
stm32_bleuio_lightbulb_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc0c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  0800d0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000094  0800d14c  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f4  0800d1ac  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e74  24000154  0800d20c  00020154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000fc8  0800d20c  00020fc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff8f  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b44  00000000  00000000  00050111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00054c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00055f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a15d  00000000  00000000  00057130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a764  00000000  00000000  0009128d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00161546  00000000  00000000  000ab9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020cf37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  0020cf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ce94 	.word	0x0800ce94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	0800ce94 	.word	0x0800ce94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fec0 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f88a 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9a0 	bl	80009d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000698:	f000 f906 	bl	80008a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f950 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 80006a0:	f00b fbd6 	bl	800be50 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <main+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
  isAdvertising= false;
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <main+0xec>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  isLightBulbOn= false;
 80006b0:	4b31      	ldr	r3, [pc, #196]	; (8000778 <main+0xf0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
  isConnected= false;
 80006b6:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0xf4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  uartStatus = UART_RX_NONE;
 80006bc:	4b30      	ldr	r3, [pc, #192]	; (8000780 <main+0xf8>)
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	701a      	strb	r2, [r3, #0]

  // Starts uart recieve interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006c2:	2201      	movs	r2, #1
 80006c4:	492f      	ldr	r1, [pc, #188]	; (8000784 <main+0xfc>)
 80006c6:	4830      	ldr	r0, [pc, #192]	; (8000788 <main+0x100>)
 80006c8:	f006 fd5c 	bl	8007184 <HAL_UART_Receive_IT>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	482e      	ldr	r0, [pc, #184]	; (800078c <main+0x104>)
 80006d2:	f002 fbab 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2102      	movs	r1, #2
 80006da:	482d      	ldr	r0, [pc, #180]	; (8000790 <main+0x108>)
 80006dc:	f002 fba6 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4829      	ldr	r0, [pc, #164]	; (800078c <main+0x104>)
 80006e8:	f002 fba0 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f000 ff20 	bl	8001534 <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2101      	movs	r1, #1
 80006f8:	4824      	ldr	r0, [pc, #144]	; (800078c <main+0x104>)
 80006fa:	f002 fb97 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <main+0x108>)
 8000704:	f002 fb92 	bl	8002e2c <HAL_GPIO_WritePin>

  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "\r\nWelcome to STM32 BleuIO Light Bulb Example!\r\nPress 0 to run the ATI command\r\nPress 1 to start advertising\r\nPress 2 to stop advertising\r\n");
 8000708:	4922      	ldr	r1, [pc, #136]	; (8000794 <main+0x10c>)
 800070a:	4823      	ldr	r0, [pc, #140]	; (8000798 <main+0x110>)
 800070c:	f00c f82e 	bl	800c76c <siprintf>
 8000710:	4603      	mov	r3, r0
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <main+0x114>)
 8000714:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0x114>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	b29a      	uxth	r2, r3
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	491d      	ldr	r1, [pc, #116]	; (8000798 <main+0x110>)
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <main+0x100>)
 8000724:	f006 fc98 	bl	8007058 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000728:	f00b fbb8 	bl	800be9c <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
    // Simple handler for uart input
    handleUartInput(uartStatus);
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <main+0xf8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fa69 	bl	8000c08 <handleUartInput>
    dongle_interpreter(dongle_response);
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <main+0x118>)
 8000738:	f000 fb22 	bl	8000d80 <dongle_interpreter>


    if(!isAdvertising && !isConnected && isBleuIOReady)
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <main+0xec>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0ee      	beq.n	8000728 <main+0xa0>
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <main+0xf4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0e7      	beq.n	8000728 <main+0xa0>
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <main+0xe8>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0e3      	beq.n	8000728 <main+0xa0>
    {
    	writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <main+0x11c>)
 8000762:	f00b fb61 	bl	800be28 <writeToDongle>
    	isAdvertising = true;
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <main+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 800076c:	e7dc      	b.n	8000728 <main+0xa0>
 800076e:	bf00      	nop
 8000770:	24000418 	.word	0x24000418
 8000774:	2400041b 	.word	0x2400041b
 8000778:	2400041a 	.word	0x2400041a
 800077c:	24000419 	.word	0x24000419
 8000780:	2400026a 	.word	0x2400026a
 8000784:	2400026c 	.word	0x2400026c
 8000788:	24000384 	.word	0x24000384
 800078c:	58020400 	.word	0x58020400
 8000790:	58021000 	.word	0x58021000
 8000794:	0800ceac 	.word	0x0800ceac
 8000798:	24000170 	.word	0x24000170
 800079c:	24000414 	.word	0x24000414
 80007a0:	24000290 	.word	0x24000290
 80007a4:	0800cf38 	.word	0x0800cf38

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00b ff16 	bl	800c5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b ff10 	bl	800c5e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f004 f8ad 	bl	8004928 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <SystemClock_Config+0xf8>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <SystemClock_Config+0xf8>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <SystemClock_Config+0xfc>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <SystemClock_Config+0xfc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000804:	bf00      	nop
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <SystemClock_Config+0xfc>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000812:	d1f8      	bne.n	8000806 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000814:	2303      	movs	r3, #3
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000818:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800081e:	2301      	movs	r3, #1
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000832:	2318      	movs	r3, #24
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000842:	230c      	movs	r3, #12
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f004 f8b2 	bl	80049bc <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800085e:	f000 fb3d 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fca8 	bl	80051dc <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000892:	f000 fb23 	bl	8000edc <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ETH_Init+0x80>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ETH_Init+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ETH_Init+0x88>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ETH_Init+0x88>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_ETH_Init+0x88>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ETH_Init+0x88>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ETH_Init+0x88>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ETH_Init+0x80>)
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_ETH_Init+0x88>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x80>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x80>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x8c>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x80>)
 80008ea:	4a13      	ldr	r2, [pc, #76]	; (8000938 <MX_ETH_Init+0x90>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x80>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x80>)
 80008f8:	f001 fcd2 	bl	80022a0 <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000902:	f000 faeb 	bl	8000edc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_ETH_Init+0x94>)
 800090c:	f00b fe6c 	bl	800c5e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_ETH_Init+0x94>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_ETH_Init+0x94>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_ETH_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400041c 	.word	0x2400041c
 800092c:	40028000 	.word	0x40028000
 8000930:	24000274 	.word	0x24000274
 8000934:	240000f4 	.word	0x240000f4
 8000938:	24000094 	.word	0x24000094
 800093c:	240004a4 	.word	0x240004a4

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_USART3_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800098a:	f006 fb15 	bl	8006fb8 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 faa2 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 800099c:	f008 fa33 	bl	8008e06 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 fa99 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 80009ae:	f008 fa68 	bl	8008e82 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 fa90 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_USART3_UART_Init+0x90>)
 80009be:	f008 f9e9 	bl	8008d94 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 fa88 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000384 	.word	0x24000384
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x19c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a5f      	ldr	r2, [pc, #380]	; (8000b74 <MX_GPIO_Init+0x19c>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a58      	ldr	r2, [pc, #352]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b52      	ldr	r3, [pc, #328]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ac6:	482c      	ldr	r0, [pc, #176]	; (8000b78 <MX_GPIO_Init+0x1a0>)
 8000ac8:	f002 f9b0 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	482a      	ldr	r0, [pc, #168]	; (8000b7c <MX_GPIO_Init+0x1a4>)
 8000ad4:	f002 f9aa 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	4828      	ldr	r0, [pc, #160]	; (8000b80 <MX_GPIO_Init+0x1a8>)
 8000ade:	f002 f9a5 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4823      	ldr	r0, [pc, #140]	; (8000b84 <MX_GPIO_Init+0x1ac>)
 8000af8:	f001 ffe8 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000afc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4818      	ldr	r0, [pc, #96]	; (8000b78 <MX_GPIO_Init+0x1a0>)
 8000b16:	f001 ffd9 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <MX_GPIO_Init+0x1a4>)
 8000b34:	f001 ffca 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_GPIO_Init+0x1b0>)
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <MX_GPIO_Init+0x1b4>)
 8000b4c:	f001 ffbe 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x1a8>)
 8000b68:	f001 ffb0 	bl	8002acc <HAL_GPIO_Init>

}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	; 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400
 8000b7c:	58020c00 	.word	0x58020c00
 8000b80:	58021000 	.word	0x58021000
 8000b84:	58020800 	.word	0x58020800
 8000b88:	11110000 	.word	0x11110000
 8000b8c:	58021800 	.word	0x58021800

08000b90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if(UartHandle == &huart3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_RxCpltCallback+0x68>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d127      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x60>
	{
		RX_value = (int)aRxBuffer[0];
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_UART_RxCpltCallback+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_UART_RxCpltCallback+0x70>)
 8000ba8:	601a      	str	r2, [r3, #0]
		uartStatus = UART_RX_NONE;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_RxCpltCallback+0x74>)
 8000bac:	22ff      	movs	r2, #255	; 0xff
 8000bae:	701a      	strb	r2, [r3, #0]

		switch(RX_value)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_UART_RxCpltCallback+0x70>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b32      	cmp	r3, #50	; 0x32
 8000bb6:	d00e      	beq.n	8000bd6 <HAL_UART_RxCpltCallback+0x46>
 8000bb8:	2b32      	cmp	r3, #50	; 0x32
 8000bba:	dc10      	bgt.n	8000bde <HAL_UART_RxCpltCallback+0x4e>
 8000bbc:	2b30      	cmp	r3, #48	; 0x30
 8000bbe:	d002      	beq.n	8000bc6 <HAL_UART_RxCpltCallback+0x36>
 8000bc0:	2b31      	cmp	r3, #49	; 0x31
 8000bc2:	d004      	beq.n	8000bce <HAL_UART_RxCpltCallback+0x3e>
 8000bc4:	e00b      	b.n	8000bde <HAL_UART_RxCpltCallback+0x4e>
		{
			case UART_RX_0:
			{
				uartStatus = UART_RX_0;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_UART_RxCpltCallback+0x74>)
 8000bc8:	2230      	movs	r2, #48	; 0x30
 8000bca:	701a      	strb	r2, [r3, #0]
				break;
 8000bcc:	e00b      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_1:
			{
				uartStatus = UART_RX_1;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_UART_RxCpltCallback+0x74>)
 8000bd0:	2231      	movs	r2, #49	; 0x31
 8000bd2:	701a      	strb	r2, [r3, #0]
				break;
 8000bd4:	e007      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_2:
			{
				uartStatus = UART_RX_2;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_UART_RxCpltCallback+0x74>)
 8000bd8:	2232      	movs	r2, #50	; 0x32
 8000bda:	701a      	strb	r2, [r3, #0]
				break;
 8000bdc:	e003      	b.n	8000be6 <HAL_UART_RxCpltCallback+0x56>
			}
			default:
			{
				uartStatus = UART_RX_NONE;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_UART_RxCpltCallback+0x74>)
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	701a      	strb	r2, [r3, #0]
				break;
 8000be4:	bf00      	nop
			}
		}
		// Resets uart recieve interrupt mode
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000be6:	2201      	movs	r2, #1
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <HAL_UART_RxCpltCallback+0x6c>)
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <HAL_UART_RxCpltCallback+0x68>)
 8000bec:	f006 faca 	bl	8007184 <HAL_UART_Receive_IT>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000384 	.word	0x24000384
 8000bfc:	2400026c 	.word	0x2400026c
 8000c00:	24000270 	.word	0x24000270
 8000c04:	2400026a 	.word	0x2400026a

08000c08 <handleUartInput>:
/**
  * @brief Simple uart input handler
  * @retval None
  */
void handleUartInput(UARTCommandTypeDef cmd)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2bff      	cmp	r3, #255	; 0xff
 8000c16:	f000 8095 	beq.w	8000d44 <handleUartInput+0x13c>
 8000c1a:	2bff      	cmp	r3, #255	; 0xff
 8000c1c:	f300 808e 	bgt.w	8000d3c <handleUartInput+0x134>
 8000c20:	2b32      	cmp	r3, #50	; 0x32
 8000c22:	d05f      	beq.n	8000ce4 <handleUartInput+0xdc>
 8000c24:	2b32      	cmp	r3, #50	; 0x32
 8000c26:	f300 8089 	bgt.w	8000d3c <handleUartInput+0x134>
 8000c2a:	2b30      	cmp	r3, #48	; 0x30
 8000c2c:	d002      	beq.n	8000c34 <handleUartInput+0x2c>
 8000c2e:	2b31      	cmp	r3, #49	; 0x31
 8000c30:	d02c      	beq.n	8000c8c <handleUartInput+0x84>
 8000c32:	e083      	b.n	8000d3c <handleUartInput+0x134>
	{
		case UART_RX_0:
		{
			// 0
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(0 pressed)\r\n");
 8000c34:	4946      	ldr	r1, [pc, #280]	; (8000d50 <handleUartInput+0x148>)
 8000c36:	4847      	ldr	r0, [pc, #284]	; (8000d54 <handleUartInput+0x14c>)
 8000c38:	f00b fd98 	bl	800c76c <siprintf>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <handleUartInput+0x150>)
 8000c40:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c42:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <handleUartInput+0x150>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	4941      	ldr	r1, [pc, #260]	; (8000d54 <handleUartInput+0x14c>)
 8000c4e:	4843      	ldr	r0, [pc, #268]	; (8000d5c <handleUartInput+0x154>)
 8000c50:	f006 fa02 	bl	8007058 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <handleUartInput+0x158>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <handleUartInput+0x5c>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_ATI);
 8000c5c:	4841      	ldr	r0, [pc, #260]	; (8000d64 <handleUartInput+0x15c>)
 8000c5e:	f00b f8e3 	bl	800be28 <writeToDongle>
 8000c62:	e00f      	b.n	8000c84 <handleUartInput+0x7c>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000c64:	4940      	ldr	r1, [pc, #256]	; (8000d68 <handleUartInput+0x160>)
 8000c66:	483b      	ldr	r0, [pc, #236]	; (8000d54 <handleUartInput+0x14c>)
 8000c68:	f00b fd80 	bl	800c76c <siprintf>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <handleUartInput+0x150>)
 8000c70:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c72:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <handleUartInput+0x150>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	4935      	ldr	r1, [pc, #212]	; (8000d54 <handleUartInput+0x14c>)
 8000c7e:	4837      	ldr	r0, [pc, #220]	; (8000d5c <handleUartInput+0x154>)
 8000c80:	f006 f9ea 	bl	8007058 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <handleUartInput+0x164>)
 8000c86:	22ff      	movs	r2, #255	; 0xff
 8000c88:	701a      	strb	r2, [r3, #0]
			break;
 8000c8a:	e05c      	b.n	8000d46 <handleUartInput+0x13e>
		}
		case UART_RX_1:
		{
			// 1
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(1 pressed)\r\n");
 8000c8c:	4938      	ldr	r1, [pc, #224]	; (8000d70 <handleUartInput+0x168>)
 8000c8e:	4831      	ldr	r0, [pc, #196]	; (8000d54 <handleUartInput+0x14c>)
 8000c90:	f00b fd6c 	bl	800c76c <siprintf>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <handleUartInput+0x150>)
 8000c98:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <handleUartInput+0x150>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	492b      	ldr	r1, [pc, #172]	; (8000d54 <handleUartInput+0x14c>)
 8000ca6:	482d      	ldr	r0, [pc, #180]	; (8000d5c <handleUartInput+0x154>)
 8000ca8:	f006 f9d6 	bl	8007058 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <handleUartInput+0x158>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <handleUartInput+0xb4>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 8000cb4:	482f      	ldr	r0, [pc, #188]	; (8000d74 <handleUartInput+0x16c>)
 8000cb6:	f00b f8b7 	bl	800be28 <writeToDongle>
 8000cba:	e00f      	b.n	8000cdc <handleUartInput+0xd4>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000cbc:	492a      	ldr	r1, [pc, #168]	; (8000d68 <handleUartInput+0x160>)
 8000cbe:	4825      	ldr	r0, [pc, #148]	; (8000d54 <handleUartInput+0x14c>)
 8000cc0:	f00b fd54 	bl	800c76c <siprintf>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <handleUartInput+0x150>)
 8000cc8:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <handleUartInput+0x150>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	491f      	ldr	r1, [pc, #124]	; (8000d54 <handleUartInput+0x14c>)
 8000cd6:	4821      	ldr	r0, [pc, #132]	; (8000d5c <handleUartInput+0x154>)
 8000cd8:	f006 f9be 	bl	8007058 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <handleUartInput+0x164>)
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	701a      	strb	r2, [r3, #0]
			break;
 8000ce2:	e030      	b.n	8000d46 <handleUartInput+0x13e>
		}
		case UART_RX_2:
		{
			// 2
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(2 pressed)\r\n");
 8000ce4:	4924      	ldr	r1, [pc, #144]	; (8000d78 <handleUartInput+0x170>)
 8000ce6:	481b      	ldr	r0, [pc, #108]	; (8000d54 <handleUartInput+0x14c>)
 8000ce8:	f00b fd40 	bl	800c76c <siprintf>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <handleUartInput+0x150>)
 8000cf0:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <handleUartInput+0x150>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	4915      	ldr	r1, [pc, #84]	; (8000d54 <handleUartInput+0x14c>)
 8000cfe:	4817      	ldr	r0, [pc, #92]	; (8000d5c <handleUartInput+0x154>)
 8000d00:	f006 f9aa 	bl	8007058 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <handleUartInput+0x158>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <handleUartInput+0x10c>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTOP);
 8000d0c:	481b      	ldr	r0, [pc, #108]	; (8000d7c <handleUartInput+0x174>)
 8000d0e:	f00b f88b 	bl	800be28 <writeToDongle>
 8000d12:	e00f      	b.n	8000d34 <handleUartInput+0x12c>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000d14:	4914      	ldr	r1, [pc, #80]	; (8000d68 <handleUartInput+0x160>)
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <handleUartInput+0x14c>)
 8000d18:	f00b fd28 	bl	800c76c <siprintf>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <handleUartInput+0x150>)
 8000d20:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <handleUartInput+0x150>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	4909      	ldr	r1, [pc, #36]	; (8000d54 <handleUartInput+0x14c>)
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <handleUartInput+0x154>)
 8000d30:	f006 f992 	bl	8007058 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <handleUartInput+0x164>)
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	701a      	strb	r2, [r3, #0]
			break;
 8000d3a:	e004      	b.n	8000d46 <handleUartInput+0x13e>
		{
			break;
		}
		default:
		{
			uartStatus = UART_RX_NONE;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <handleUartInput+0x164>)
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	701a      	strb	r2, [r3, #0]
			break;
 8000d42:	e000      	b.n	8000d46 <handleUartInput+0x13e>
			break;
 8000d44:	bf00      	nop
		}
	}
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	0800cf48 	.word	0x0800cf48
 8000d54:	24000170 	.word	0x24000170
 8000d58:	24000414 	.word	0x24000414
 8000d5c:	24000384 	.word	0x24000384
 8000d60:	24000418 	.word	0x24000418
 8000d64:	0800cf58 	.word	0x0800cf58
 8000d68:	0800cf60 	.word	0x0800cf60
 8000d6c:	2400026a 	.word	0x2400026a
 8000d70:	0800cf7c 	.word	0x0800cf7c
 8000d74:	0800cf38 	.word	0x0800cf38
 8000d78:	0800cf8c 	.word	0x0800cf8c
 8000d7c:	0800cf9c 	.word	0x0800cf9c

08000d80 <dongle_interpreter>:


void dongle_interpreter(uint8_t * input)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	if(strlen((char *)input) != 0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d07a      	beq.n	8000e86 <dongle_interpreter+0x106>
	{
		if(strstr((char *)input, "\r\nADVERTISING...") != NULL)
 8000d90:	4941      	ldr	r1, [pc, #260]	; (8000e98 <dongle_interpreter+0x118>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f00b fd12 	bl	800c7bc <strstr>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <dongle_interpreter+0x24>
		{
			isAdvertising = true;
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <dongle_interpreter+0x11c>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nADVERTISING STOPPED.") != NULL)
 8000da4:	493e      	ldr	r1, [pc, #248]	; (8000ea0 <dongle_interpreter+0x120>)
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f00b fd08 	bl	800c7bc <strstr>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <dongle_interpreter+0x38>
		{
			isAdvertising = false;
 8000db2:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <dongle_interpreter+0x11c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nCONNECTED") != NULL)
 8000db8:	493a      	ldr	r1, [pc, #232]	; (8000ea4 <dongle_interpreter+0x124>)
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f00b fcfe 	bl	800c7bc <strstr>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <dongle_interpreter+0x4c>
		{
			isConnected = true;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <dongle_interpreter+0x128>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nDISCONNECTED") != NULL)
 8000dcc:	4937      	ldr	r1, [pc, #220]	; (8000eac <dongle_interpreter+0x12c>)
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f00b fcf4 	bl	800c7bc <strstr>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <dongle_interpreter+0x60>
		{
			isConnected = false;
 8000dda:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <dongle_interpreter+0x128>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "[Received]:") != NULL)
 8000de0:	4933      	ldr	r1, [pc, #204]	; (8000eb0 <dongle_interpreter+0x130>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f00b fcea 	bl	800c7bc <strstr>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d04b      	beq.n	8000e86 <dongle_interpreter+0x106>
		{
			isLightBulbOn = !isLightBulbOn;
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <dongle_interpreter+0x134>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2300      	moveq	r3, #0
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <dongle_interpreter+0x134>)
 8000e0a:	701a      	strb	r2, [r3, #0]
			if(isLightBulbOn)
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <dongle_interpreter+0x134>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d010      	beq.n	8000e36 <dongle_interpreter+0xb6>
			{
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2101      	movs	r1, #1
 8000e18:	4827      	ldr	r0, [pc, #156]	; (8000eb8 <dongle_interpreter+0x138>)
 8000e1a:	f002 f807 	bl	8002e2c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2102      	movs	r1, #2
 8000e22:	4826      	ldr	r0, [pc, #152]	; (8000ebc <dongle_interpreter+0x13c>)
 8000e24:	f002 f802 	bl	8002e2c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	4822      	ldr	r0, [pc, #136]	; (8000eb8 <dongle_interpreter+0x138>)
 8000e30:	f001 fffc 	bl	8002e2c <HAL_GPIO_WritePin>
 8000e34:	e00f      	b.n	8000e56 <dongle_interpreter+0xd6>
			} else
			{
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2101      	movs	r1, #1
 8000e3a:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <dongle_interpreter+0x138>)
 8000e3c:	f001 fff6 	bl	8002e2c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <dongle_interpreter+0x13c>)
 8000e46:	f001 fff1 	bl	8002e2c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4819      	ldr	r0, [pc, #100]	; (8000eb8 <dongle_interpreter+0x138>)
 8000e52:	f001 ffeb 	bl	8002e2c <HAL_GPIO_WritePin>
			}
			uart_buf_len = sprintf(uart_tx_buf, "\r\nLightbulb is %s\r\n", isLightBulbOn ? "on":"off");
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <dongle_interpreter+0x134>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <dongle_interpreter+0xe2>
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <dongle_interpreter+0x140>)
 8000e60:	e000      	b.n	8000e64 <dongle_interpreter+0xe4>
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <dongle_interpreter+0x144>)
 8000e64:	461a      	mov	r2, r3
 8000e66:	4918      	ldr	r1, [pc, #96]	; (8000ec8 <dongle_interpreter+0x148>)
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <dongle_interpreter+0x14c>)
 8000e6a:	f00b fc7f 	bl	800c76c <siprintf>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <dongle_interpreter+0x150>)
 8000e72:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <dongle_interpreter+0x150>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	4913      	ldr	r1, [pc, #76]	; (8000ecc <dongle_interpreter+0x14c>)
 8000e80:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <dongle_interpreter+0x154>)
 8000e82:	f006 f8e9 	bl	8007058 <HAL_UART_Transmit>
		}
	}
	memset(&dongle_response, 0, RSP_SIZE);
 8000e86:	22f4      	movs	r2, #244	; 0xf4
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <dongle_interpreter+0x158>)
 8000e8c:	f00b fbac 	bl	800c5e8 <memset>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	0800cfac 	.word	0x0800cfac
 8000e9c:	2400041b 	.word	0x2400041b
 8000ea0:	0800cfc0 	.word	0x0800cfc0
 8000ea4:	0800cfd8 	.word	0x0800cfd8
 8000ea8:	24000419 	.word	0x24000419
 8000eac:	0800cfe4 	.word	0x0800cfe4
 8000eb0:	0800cff4 	.word	0x0800cff4
 8000eb4:	2400041a 	.word	0x2400041a
 8000eb8:	58020400 	.word	0x58020400
 8000ebc:	58021000 	.word	0x58021000
 8000ec0:	0800d000 	.word	0x0800d000
 8000ec4:	0800d004 	.word	0x0800d004
 8000ec8:	0800d008 	.word	0x0800d008
 8000ecc:	24000170 	.word	0x24000170
 8000ed0:	24000414 	.word	0x24000414
 8000ed4:	24000384 	.word	0x24000384
 8000ed8:	24000290 	.word	0x24000290

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <HAL_ETH_MspInit+0x184>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	f040 80ab 	bne.w	8001096 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f40:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f46:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f50:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f5a:	623b      	str	r3, [r7, #32]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f6e:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f82:	4a48      	ldr	r2, [pc, #288]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a31      	ldr	r2, [pc, #196]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_ETH_MspInit+0x188>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001012:	2332      	movs	r3, #50	; 0x32
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001022:	230b      	movs	r3, #11
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <HAL_ETH_MspInit+0x18c>)
 800102e:	f001 fd4d 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001032:	2386      	movs	r3, #134	; 0x86
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	230b      	movs	r3, #11
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <HAL_ETH_MspInit+0x190>)
 800104e:	f001 fd3d 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_ETH_MspInit+0x194>)
 8001070:	f001 fd2c 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001074:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001086:	230b      	movs	r3, #11
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_ETH_MspInit+0x198>)
 8001092:	f001 fd1b 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	; 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40028000 	.word	0x40028000
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020800 	.word	0x58020800
 80010ac:	58020000 	.word	0x58020000
 80010b0:	58020400 	.word	0x58020400
 80010b4:	58021800 	.word	0x58021800

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0b8      	sub	sp, #224	; 0xe0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	22bc      	movs	r2, #188	; 0xbc
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fa85 	bl	800c5e8 <memset>
  if(huart->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a29      	ldr	r2, [pc, #164]	; (8001188 <HAL_UART_MspInit+0xd0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d14a      	bne.n	800117e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	2302      	movs	r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4618      	mov	r0, r3
 80010f8:	f004 fbfc 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff feeb 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800110c:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_UART_MspInit+0xd4>)
 800110e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001112:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_UART_MspInit+0xd4>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0xd4>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001146:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800115c:	2307      	movs	r3, #7
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0xd8>)
 800116a:	f001 fcaf 	bl	8002acc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2027      	movs	r0, #39	; 0x27
 8001174:	f000 fafd 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001178:	2027      	movs	r0, #39	; 0x27
 800117a:	f000 fb14 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	37e0      	adds	r7, #224	; 0xe0
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004800 	.word	0x40004800
 800118c:	58024400 	.word	0x58024400
 8001190:	58020c00 	.word	0x58020c00

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f988 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART3_IRQHandler+0x10>)
 80011ee:	f006 f80f 	bl	8007210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	24000384 	.word	0x24000384

080011fc <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001202:	f002 f897 	bl	8003334 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000cb4 	.word	0x24000cb4

08001210 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001216:	f002 f88d 	bl	8003334 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	24000cb4 	.word	0x24000cb4

08001224 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <OTG_FS_IRQHandler+0x10>)
 800122a:	f002 f883 	bl	8003334 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000cb4 	.word	0x24000cb4

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f00b f984 	bl	800c574 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24080000 	.word	0x24080000
 8001298:	00000400 	.word	0x00000400
 800129c:	2400027c 	.word	0x2400027c
 80012a0:	24000fc8 	.word	0x24000fc8

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <SystemInit+0xec>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a38      	ldr	r2, [pc, #224]	; (8001390 <SystemInit+0xec>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <SystemInit+0xf0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d807      	bhi.n	80012d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <SystemInit+0xf0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 030f 	bic.w	r3, r3, #15
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <SystemInit+0xf0>)
 80012ce:	f043 0307 	orr.w	r3, r3, #7
 80012d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <SystemInit+0xf4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <SystemInit+0xf4>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <SystemInit+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <SystemInit+0xf4>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	492b      	ldr	r1, [pc, #172]	; (8001398 <SystemInit+0xf4>)
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <SystemInit+0xf8>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <SystemInit+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <SystemInit+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <SystemInit+0xf0>)
 8001308:	f043 0307 	orr.w	r3, r3, #7
 800130c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <SystemInit+0xf4>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <SystemInit+0xf4>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <SystemInit+0xf4>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <SystemInit+0xf4>)
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <SystemInit+0xfc>)
 8001324:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <SystemInit+0xf4>)
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <SystemInit+0x100>)
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <SystemInit+0xf4>)
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <SystemInit+0x104>)
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <SystemInit+0xf4>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <SystemInit+0xf4>)
 800133a:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <SystemInit+0x104>)
 800133c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <SystemInit+0xf4>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <SystemInit+0xf4>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <SystemInit+0x104>)
 8001348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <SystemInit+0xf4>)
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <SystemInit+0xf4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <SystemInit+0xf4>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <SystemInit+0xf4>)
 800135e:	2200      	movs	r2, #0
 8001360:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0x108>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <SystemInit+0x10c>)
 8001368:	4013      	ands	r3, r2
 800136a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800136e:	d202      	bcs.n	8001376 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SystemInit+0x110>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <SystemInit+0x114>)
 8001378:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800137c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SystemInit+0xec>)
 8001380:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001384:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	52002000 	.word	0x52002000
 8001398:	58024400 	.word	0x58024400
 800139c:	eaf6ed7f 	.word	0xeaf6ed7f
 80013a0:	02020200 	.word	0x02020200
 80013a4:	01ff0000 	.word	0x01ff0000
 80013a8:	01010280 	.word	0x01010280
 80013ac:	5c001000 	.word	0x5c001000
 80013b0:	ffff0000 	.word	0xffff0000
 80013b4:	51008108 	.word	0x51008108
 80013b8:	52004000 	.word	0x52004000

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c0:	f7ff ff70 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f00b f8c9 	bl	800c580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f94b 	bl	8000688 <main>
  bx  lr
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013fc:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001400:	0800d0b8 	.word	0x0800d0b8
  ldr r2, =_sbss
 8001404:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001408:	24000fc8 	.word	0x24000fc8

0800140c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC3_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001416:	2003      	movs	r0, #3
 8001418:	f000 f9a0 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800141c:	f004 f894 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_Init+0x68>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	4913      	ldr	r1, [pc, #76]	; (800147c <HAL_Init+0x6c>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_Init+0x68>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_Init+0x6c>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_Init+0x70>)
 8001452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_Init+0x74>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f814 	bl	8001488 <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e002      	b.n	8001470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800146a:	f7ff fd3d 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	58024400 	.word	0x58024400
 800147c:	0800d03c 	.word	0x0800d03c
 8001480:	24000004 	.word	0x24000004
 8001484:	24000000 	.word	0x24000000

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_InitTick+0x60>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e021      	b.n	80014e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_InitTick+0x64>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_InitTick+0x60>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f985 	bl	80017c2 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f94f 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x68>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2400000c 	.word	0x2400000c
 80014ec:	24000000 	.word	0x24000000
 80014f0:	24000008 	.word	0x24000008

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2400000c 	.word	0x2400000c
 8001518:	240004d8 	.word	0x240004d8

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	240004d8 	.word	0x240004d8

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2400000c 	.word	0x2400000c

0800157c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetREVID+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	0c1b      	lsrs	r3, r3, #16
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	5c001000 	.word	0x5c001000

08001594 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015a4:	4904      	ldr	r1, [pc, #16]	; (80015b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58000400 	.word	0x58000400

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x40>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00
 8001600:	05fa0000 	.word	0x05fa0000

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff40 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff90 	bl	80016b0 <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5f 	bl	800165c <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff33 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa4 	bl	8001718 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff fe9a 	bl	800151c <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e2dc      	b.n	8001dae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d008      	beq.n	8001812 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e2cd      	b.n	8001dae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a76      	ldr	r2, [pc, #472]	; (80019f0 <HAL_DMA_Abort+0x214>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04a      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a74      	ldr	r2, [pc, #464]	; (80019f4 <HAL_DMA_Abort+0x218>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d045      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a73      	ldr	r2, [pc, #460]	; (80019f8 <HAL_DMA_Abort+0x21c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d040      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a71      	ldr	r2, [pc, #452]	; (80019fc <HAL_DMA_Abort+0x220>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d03b      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a70      	ldr	r2, [pc, #448]	; (8001a00 <HAL_DMA_Abort+0x224>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d036      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_DMA_Abort+0x228>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d031      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6d      	ldr	r2, [pc, #436]	; (8001a08 <HAL_DMA_Abort+0x22c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d02c      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6b      	ldr	r2, [pc, #428]	; (8001a0c <HAL_DMA_Abort+0x230>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d027      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_DMA_Abort+0x234>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a68      	ldr	r2, [pc, #416]	; (8001a14 <HAL_DMA_Abort+0x238>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01d      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a67      	ldr	r2, [pc, #412]	; (8001a18 <HAL_DMA_Abort+0x23c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d018      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <HAL_DMA_Abort+0x240>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a64      	ldr	r2, [pc, #400]	; (8001a20 <HAL_DMA_Abort+0x244>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00e      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a62      	ldr	r2, [pc, #392]	; (8001a24 <HAL_DMA_Abort+0x248>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d009      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a61      	ldr	r2, [pc, #388]	; (8001a28 <HAL_DMA_Abort+0x24c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d004      	beq.n	80018b2 <HAL_DMA_Abort+0xd6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a5f      	ldr	r2, [pc, #380]	; (8001a2c <HAL_DMA_Abort+0x250>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Abort+0xda>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_DMA_Abort+0xdc>
 80018b6:	2300      	movs	r3, #0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d013      	beq.n	80018e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 021e 	bic.w	r2, r2, #30
 80018ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	e00a      	b.n	80018fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 020e 	bic.w	r2, r2, #14
 80018f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <HAL_DMA_Abort+0x214>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d072      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a3a      	ldr	r2, [pc, #232]	; (80019f4 <HAL_DMA_Abort+0x218>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d06d      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <HAL_DMA_Abort+0x21c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d068      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a37      	ldr	r2, [pc, #220]	; (80019fc <HAL_DMA_Abort+0x220>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d063      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a36      	ldr	r2, [pc, #216]	; (8001a00 <HAL_DMA_Abort+0x224>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_DMA_Abort+0x228>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d059      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <HAL_DMA_Abort+0x22c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d054      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_DMA_Abort+0x230>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d04f      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_DMA_Abort+0x234>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d04a      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <HAL_DMA_Abort+0x238>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d045      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a2d      	ldr	r2, [pc, #180]	; (8001a18 <HAL_DMA_Abort+0x23c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d040      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_DMA_Abort+0x240>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d03b      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <HAL_DMA_Abort+0x244>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d036      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_DMA_Abort+0x248>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d031      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <HAL_DMA_Abort+0x24c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d02c      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a25      	ldr	r2, [pc, #148]	; (8001a2c <HAL_DMA_Abort+0x250>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d027      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_DMA_Abort+0x254>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_DMA_Abort+0x258>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01d      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_DMA_Abort+0x25c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d018      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_DMA_Abort+0x260>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_DMA_Abort+0x264>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d00e      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_DMA_Abort+0x268>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_DMA_Abort+0x26c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d004      	beq.n	80019ea <HAL_DMA_Abort+0x20e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_DMA_Abort+0x270>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d132      	bne.n	8001a50 <HAL_DMA_Abort+0x274>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e031      	b.n	8001a52 <HAL_DMA_Abort+0x276>
 80019ee:	bf00      	nop
 80019f0:	40020010 	.word	0x40020010
 80019f4:	40020028 	.word	0x40020028
 80019f8:	40020040 	.word	0x40020040
 80019fc:	40020058 	.word	0x40020058
 8001a00:	40020070 	.word	0x40020070
 8001a04:	40020088 	.word	0x40020088
 8001a08:	400200a0 	.word	0x400200a0
 8001a0c:	400200b8 	.word	0x400200b8
 8001a10:	40020410 	.word	0x40020410
 8001a14:	40020428 	.word	0x40020428
 8001a18:	40020440 	.word	0x40020440
 8001a1c:	40020458 	.word	0x40020458
 8001a20:	40020470 	.word	0x40020470
 8001a24:	40020488 	.word	0x40020488
 8001a28:	400204a0 	.word	0x400204a0
 8001a2c:	400204b8 	.word	0x400204b8
 8001a30:	58025408 	.word	0x58025408
 8001a34:	5802541c 	.word	0x5802541c
 8001a38:	58025430 	.word	0x58025430
 8001a3c:	58025444 	.word	0x58025444
 8001a40:	58025458 	.word	0x58025458
 8001a44:	5802546c 	.word	0x5802546c
 8001a48:	58025480 	.word	0x58025480
 8001a4c:	58025494 	.word	0x58025494
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a64:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6d      	ldr	r2, [pc, #436]	; (8001c20 <HAL_DMA_Abort+0x444>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d04a      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a6b      	ldr	r2, [pc, #428]	; (8001c24 <HAL_DMA_Abort+0x448>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d045      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_DMA_Abort+0x44c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d040      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a68      	ldr	r2, [pc, #416]	; (8001c2c <HAL_DMA_Abort+0x450>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d03b      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a67      	ldr	r2, [pc, #412]	; (8001c30 <HAL_DMA_Abort+0x454>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d036      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <HAL_DMA_Abort+0x458>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d031      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a64      	ldr	r2, [pc, #400]	; (8001c38 <HAL_DMA_Abort+0x45c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d02c      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a62      	ldr	r2, [pc, #392]	; (8001c3c <HAL_DMA_Abort+0x460>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d027      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a61      	ldr	r2, [pc, #388]	; (8001c40 <HAL_DMA_Abort+0x464>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a5f      	ldr	r2, [pc, #380]	; (8001c44 <HAL_DMA_Abort+0x468>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01d      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5e      	ldr	r2, [pc, #376]	; (8001c48 <HAL_DMA_Abort+0x46c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d018      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <HAL_DMA_Abort+0x470>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5b      	ldr	r2, [pc, #364]	; (8001c50 <HAL_DMA_Abort+0x474>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d00e      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a59      	ldr	r2, [pc, #356]	; (8001c54 <HAL_DMA_Abort+0x478>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_DMA_Abort+0x47c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <HAL_DMA_Abort+0x32a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_DMA_Abort+0x480>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_DMA_Abort+0x33c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e007      	b.n	8001b28 <HAL_DMA_Abort+0x34c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b28:	e013      	b.n	8001b52 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2a:	f7ff fcf7 	bl	800151c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d90c      	bls.n	8001b52 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e12d      	b.n	8001dae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e5      	bne.n	8001b2a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_DMA_Abort+0x444>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04a      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <HAL_DMA_Abort+0x448>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d045      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_DMA_Abort+0x44c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d040      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <HAL_DMA_Abort+0x450>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d03b      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_DMA_Abort+0x454>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d036      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_DMA_Abort+0x458>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_DMA_Abort+0x45c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d02c      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_DMA_Abort+0x460>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d027      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a23      	ldr	r2, [pc, #140]	; (8001c40 <HAL_DMA_Abort+0x464>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_DMA_Abort+0x468>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_DMA_Abort+0x46c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_DMA_Abort+0x470>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_DMA_Abort+0x474>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_DMA_Abort+0x478>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d009      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_DMA_Abort+0x47c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_DMA_Abort+0x422>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_DMA_Abort+0x480>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Abort+0x426>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_Abort+0x428>
 8001c02:	2300      	movs	r3, #0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d02b      	beq.n	8001c60 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	223f      	movs	r2, #63	; 0x3f
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	e02a      	b.n	8001c76 <HAL_DMA_Abort+0x49a>
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2201      	movs	r2, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_DMA_Abort+0x5dc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d072      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <HAL_DMA_Abort+0x5e0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d06d      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <HAL_DMA_Abort+0x5e4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d068      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_DMA_Abort+0x5e8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d063      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_DMA_Abort+0x5ec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05e      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_DMA_Abort+0x5f0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d059      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <HAL_DMA_Abort+0x5f4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d054      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a44      	ldr	r2, [pc, #272]	; (8001dd4 <HAL_DMA_Abort+0x5f8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d04f      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_DMA_Abort+0x5fc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04a      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a41      	ldr	r2, [pc, #260]	; (8001ddc <HAL_DMA_Abort+0x600>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d045      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <HAL_DMA_Abort+0x604>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d040      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3e      	ldr	r2, [pc, #248]	; (8001de4 <HAL_DMA_Abort+0x608>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d03b      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3d      	ldr	r2, [pc, #244]	; (8001de8 <HAL_DMA_Abort+0x60c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d036      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_DMA_Abort+0x610>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3a      	ldr	r2, [pc, #232]	; (8001df0 <HAL_DMA_Abort+0x614>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d02c      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <HAL_DMA_Abort+0x618>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d027      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a37      	ldr	r2, [pc, #220]	; (8001df8 <HAL_DMA_Abort+0x61c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a35      	ldr	r2, [pc, #212]	; (8001dfc <HAL_DMA_Abort+0x620>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01d      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a34      	ldr	r2, [pc, #208]	; (8001e00 <HAL_DMA_Abort+0x624>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d018      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <HAL_DMA_Abort+0x628>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <HAL_DMA_Abort+0x62c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <HAL_DMA_Abort+0x630>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <HAL_DMA_Abort+0x634>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d004      	beq.n	8001d66 <HAL_DMA_Abort+0x58a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <HAL_DMA_Abort+0x638>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_DMA_Abort+0x58e>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_DMA_Abort+0x590>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
 8001df8:	58025408 	.word	0x58025408
 8001dfc:	5802541c 	.word	0x5802541c
 8001e00:	58025430 	.word	0x58025430
 8001e04:	58025444 	.word	0x58025444
 8001e08:	58025458 	.word	0x58025458
 8001e0c:	5802546c 	.word	0x5802546c
 8001e10:	58025480 	.word	0x58025480
 8001e14:	58025494 	.word	0x58025494

08001e18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e205      	b.n	8002236 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d004      	beq.n	8001e40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e1fa      	b.n	8002236 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a8c      	ldr	r2, [pc, #560]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04a      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a8b      	ldr	r2, [pc, #556]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d045      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a89      	ldr	r2, [pc, #548]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d040      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a88      	ldr	r2, [pc, #544]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d03b      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a86      	ldr	r2, [pc, #536]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d036      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d031      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a83      	ldr	r2, [pc, #524]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02c      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a82      	ldr	r2, [pc, #520]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d027      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a80      	ldr	r2, [pc, #512]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d022      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7f      	ldr	r2, [pc, #508]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d01d      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7d      	ldr	r2, [pc, #500]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d018      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7c      	ldr	r2, [pc, #496]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7a      	ldr	r2, [pc, #488]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a79      	ldr	r2, [pc, #484]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0xc8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a76      	ldr	r2, [pc, #472]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA_Abort_IT+0xcc>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_DMA_Abort_IT+0xce>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d065      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04a      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5e      	ldr	r2, [pc, #376]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d045      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d03b      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d036      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02c      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a55      	ldr	r2, [pc, #340]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a54      	ldr	r2, [pc, #336]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x17a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <HAL_DMA_Abort_IT+0x18c>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e147      	b.n	8002234 <HAL_DMA_Abort_IT+0x41c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e13e      	b.n	8002234 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020e 	bic.w	r2, r2, #14
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <HAL_DMA_Abort_IT+0x260>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d04a      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a29      	ldr	r2, [pc, #164]	; (800207c <HAL_DMA_Abort_IT+0x264>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d045      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_DMA_Abort_IT+0x268>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d040      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_DMA_Abort_IT+0x26c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d03b      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <HAL_DMA_Abort_IT+0x270>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_DMA_Abort_IT+0x274>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d031      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_DMA_Abort_IT+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d02c      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_DMA_Abort_IT+0x27c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d027      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_DMA_Abort_IT+0x280>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_DMA_Abort_IT+0x284>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_DMA_Abort_IT+0x288>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d018      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_DMA_Abort_IT+0x28c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <HAL_DMA_Abort_IT+0x290>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_DMA_Abort_IT+0x294>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_DMA_Abort_IT+0x298>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_DMA_Abort_IT+0x24e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_DMA_Abort_IT+0x29c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d128      	bne.n	80020b8 <HAL_DMA_Abort_IT+0x2a0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e027      	b.n	80020c8 <HAL_DMA_Abort_IT+0x2b0>
 8002078:	40020010 	.word	0x40020010
 800207c:	40020028 	.word	0x40020028
 8002080:	40020040 	.word	0x40020040
 8002084:	40020058 	.word	0x40020058
 8002088:	40020070 	.word	0x40020070
 800208c:	40020088 	.word	0x40020088
 8002090:	400200a0 	.word	0x400200a0
 8002094:	400200b8 	.word	0x400200b8
 8002098:	40020410 	.word	0x40020410
 800209c:	40020428 	.word	0x40020428
 80020a0:	40020440 	.word	0x40020440
 80020a4:	40020458 	.word	0x40020458
 80020a8:	40020470 	.word	0x40020470
 80020ac:	40020488 	.word	0x40020488
 80020b0:	400204a0 	.word	0x400204a0
 80020b4:	400204b8 	.word	0x400204b8
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5c      	ldr	r2, [pc, #368]	; (8002240 <HAL_DMA_Abort_IT+0x428>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d072      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a5b      	ldr	r2, [pc, #364]	; (8002244 <HAL_DMA_Abort_IT+0x42c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d06d      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a59      	ldr	r2, [pc, #356]	; (8002248 <HAL_DMA_Abort_IT+0x430>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d068      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_DMA_Abort_IT+0x434>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d063      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_DMA_Abort_IT+0x438>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d05e      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_DMA_Abort_IT+0x43c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d059      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a53      	ldr	r2, [pc, #332]	; (8002258 <HAL_DMA_Abort_IT+0x440>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d054      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_DMA_Abort_IT+0x444>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04f      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a50      	ldr	r2, [pc, #320]	; (8002260 <HAL_DMA_Abort_IT+0x448>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d04a      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <HAL_DMA_Abort_IT+0x44c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d045      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_DMA_Abort_IT+0x450>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d040      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_DMA_Abort_IT+0x454>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d03b      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_DMA_Abort_IT+0x458>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d036      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_DMA_Abort_IT+0x45c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d031      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_DMA_Abort_IT+0x460>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02c      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_DMA_Abort_IT+0x464>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d027      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a44      	ldr	r2, [pc, #272]	; (8002280 <HAL_DMA_Abort_IT+0x468>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d022      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a43      	ldr	r2, [pc, #268]	; (8002284 <HAL_DMA_Abort_IT+0x46c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d01d      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a41      	ldr	r2, [pc, #260]	; (8002288 <HAL_DMA_Abort_IT+0x470>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d018      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_DMA_Abort_IT+0x474>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <HAL_DMA_Abort_IT+0x478>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00e      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3d      	ldr	r2, [pc, #244]	; (8002294 <HAL_DMA_Abort_IT+0x47c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <HAL_DMA_Abort_IT+0x480>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x3a0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_DMA_Abort_IT+0x484>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Abort_IT+0x3a4>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_DMA_Abort_IT+0x3a6>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d028      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2201      	movs	r2, #1
 80021e2:	409a      	lsls	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002212:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40020010 	.word	0x40020010
 8002244:	40020028 	.word	0x40020028
 8002248:	40020040 	.word	0x40020040
 800224c:	40020058 	.word	0x40020058
 8002250:	40020070 	.word	0x40020070
 8002254:	40020088 	.word	0x40020088
 8002258:	400200a0 	.word	0x400200a0
 800225c:	400200b8 	.word	0x400200b8
 8002260:	40020410 	.word	0x40020410
 8002264:	40020428 	.word	0x40020428
 8002268:	40020440 	.word	0x40020440
 800226c:	40020458 	.word	0x40020458
 8002270:	40020470 	.word	0x40020470
 8002274:	40020488 	.word	0x40020488
 8002278:	400204a0 	.word	0x400204a0
 800227c:	400204b8 	.word	0x400204b8
 8002280:	58025408 	.word	0x58025408
 8002284:	5802541c 	.word	0x5802541c
 8002288:	58025430 	.word	0x58025430
 800228c:	58025444 	.word	0x58025444
 8002290:	58025458 	.word	0x58025458
 8002294:	5802546c 	.word	0x5802546c
 8002298:	58025480 	.word	0x58025480
 800229c:	58025494 	.word	0x58025494

080022a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0c6      	b.n	8002440 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fe2e 	bl	8000f1c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2223      	movs	r2, #35	; 0x23
 80022c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_ETH_Init+0x1a8>)
 80022c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022cc:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_ETH_Init+0x1a8>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_ETH_Init+0x1a8>)
 80022d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7a1b      	ldrb	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff f951 	bl	8001594 <HAL_SYSCFG_ETHInterfaceSelect>
 80022f2:	e003      	b.n	80022fc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80022f4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80022f8:	f7ff f94c 	bl	8001594 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff f902 	bl	800151c <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800231a:	e00f      	b.n	800233c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800231c:	f7ff f8fe 	bl	800151c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d907      	bls.n	800233c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	22e0      	movs	r2, #224	; 0xe0
 8002336:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e081      	b.n	8002440 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1e6      	bne.n	800231c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fac0 	bl	80028d4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002354:	f003 fa72 	bl	800583c <HAL_RCC_GetHCLKFreq>
 8002358:	4603      	mov	r3, r0
 800235a:	4a3c      	ldr	r2, [pc, #240]	; (800244c <HAL_ETH_Init+0x1ac>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9a      	lsrs	r2, r3, #18
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3a01      	subs	r2, #1
 8002368:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fa13 	bl	8002798 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002388:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800238c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	22e0      	movs	r2, #224	; 0xe0
 80023a4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e04a      	b.n	8002440 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f241 1308 	movw	r3, #4360	; 0x1108
 80023b2:	4413      	add	r3, r2
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_ETH_Init+0x1b0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6952      	ldr	r2, [r2, #20]
 80023be:	0052      	lsls	r2, r2, #1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	f241 1308 	movw	r3, #4360	; 0x1108
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fad8 	bl	8002984 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fb1c 	bl	8002a12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	3305      	adds	r3, #5
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021a      	lsls	r2, r3, #8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	3303      	adds	r3, #3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	061a      	lsls	r2, r3, #24
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3302      	adds	r3, #2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002418:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002426:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2210      	movs	r2, #16
 8002436:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2210      	movs	r2, #16
 800243c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	58024400 	.word	0x58024400
 800244c:	431bde83 	.word	0x431bde83
 8002450:	ffff8001 	.word	0xffff8001

08002454 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002466:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	791b      	ldrb	r3, [r3, #4]
 800246c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800246e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7b1b      	ldrb	r3, [r3, #12]
 8002474:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002476:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7b5b      	ldrb	r3, [r3, #13]
 800247c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800247e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	7b9b      	ldrb	r3, [r3, #14]
 8002484:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002486:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	7bdb      	ldrb	r3, [r3, #15]
 800248c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800248e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	7c12      	ldrb	r2, [r2, #16]
 8002494:	2a00      	cmp	r2, #0
 8002496:	d102      	bne.n	800249e <ETH_SetMACConfig+0x4a>
 8002498:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800249c:	e000      	b.n	80024a0 <ETH_SetMACConfig+0x4c>
 800249e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024a0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	7c52      	ldrb	r2, [r2, #17]
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d102      	bne.n	80024b0 <ETH_SetMACConfig+0x5c>
 80024aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ae:	e000      	b.n	80024b2 <ETH_SetMACConfig+0x5e>
 80024b0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024b2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7c9b      	ldrb	r3, [r3, #18]
 80024b8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024ba:	431a      	orrs	r2, r3
                                macconf->Speed |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024c0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80024c6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	7f1b      	ldrb	r3, [r3, #28]
 80024cc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80024ce:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	7f5b      	ldrb	r3, [r3, #29]
 80024d4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80024d6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	7f92      	ldrb	r2, [r2, #30]
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d102      	bne.n	80024e6 <ETH_SetMACConfig+0x92>
 80024e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e4:	e000      	b.n	80024e8 <ETH_SetMACConfig+0x94>
 80024e6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80024e8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7fdb      	ldrb	r3, [r3, #31]
 80024ee:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80024f0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d102      	bne.n	8002502 <ETH_SetMACConfig+0xae>
 80024fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002500:	e000      	b.n	8002504 <ETH_SetMACConfig+0xb0>
 8002502:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002504:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800250a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002512:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002514:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b56      	ldr	r3, [pc, #344]	; (8002680 <ETH_SetMACConfig+0x22c>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	430b      	orrs	r3, r1
 8002530:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800253e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002540:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002548:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800254a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002552:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002554:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800255c:	2a00      	cmp	r2, #0
 800255e:	d102      	bne.n	8002566 <ETH_SetMACConfig+0x112>
 8002560:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002564:	e000      	b.n	8002568 <ETH_SetMACConfig+0x114>
 8002566:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002568:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <ETH_SetMACConfig+0x230>)
 800257a:	4013      	ands	r3, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	430b      	orrs	r3, r1
 8002584:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <ETH_SetMACConfig+0x234>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025b6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025be:	2a00      	cmp	r2, #0
 80025c0:	d101      	bne.n	80025c6 <ETH_SetMACConfig+0x172>
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	e000      	b.n	80025c8 <ETH_SetMACConfig+0x174>
 80025c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025c8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80025f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80025f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f023 0103 	bic.w	r1, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	430a      	orrs	r2, r1
 8002612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800261e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800263a:	2a00      	cmp	r2, #0
 800263c:	d101      	bne.n	8002642 <ETH_SetMACConfig+0x1ee>
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	e000      	b.n	8002644 <ETH_SetMACConfig+0x1f0>
 8002642:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002644:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800264c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800264e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002656:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002664:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	430a      	orrs	r2, r1
 8002670:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	00048083 	.word	0x00048083
 8002684:	c0f88000 	.word	0xc0f88000
 8002688:	fffffef0 	.word	0xfffffef0

0800268c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <ETH_SetDMAConfig+0xf8>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	6809      	ldr	r1, [r1, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80026b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	791b      	ldrb	r3, [r3, #4]
 80026b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7b1b      	ldrb	r3, [r3, #12]
 80026c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80026d2:	4413      	add	r3, r2
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <ETH_SetDMAConfig+0xfc>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6811      	ldr	r1, [r2, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	f241 0304 	movw	r3, #4100	; 0x1004
 80026e6:	440b      	add	r3, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	7b5b      	ldrb	r3, [r3, #13]
 80026ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <ETH_SetDMAConfig+0x100>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6811      	ldr	r1, [r2, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	431a      	orrs	r2, r3
 800270e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002712:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	7d1b      	ldrb	r3, [r3, #20]
 800271c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800271e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	7f5b      	ldrb	r3, [r3, #29]
 8002724:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002732:	4413      	add	r3, r2
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <ETH_SetDMAConfig+0x104>)
 8002738:	4013      	ands	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6811      	ldr	r1, [r2, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	f241 1304 	movw	r3, #4356	; 0x1104
 8002746:	440b      	add	r3, r1
 8002748:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	7f1b      	ldrb	r3, [r3, #28]
 800274e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002760:	4413      	add	r3, r2
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <ETH_SetDMAConfig+0x108>)
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	431a      	orrs	r2, r3
 8002770:	f241 1308 	movw	r3, #4360	; 0x1108
 8002774:	440b      	add	r3, r1
 8002776:	601a      	str	r2, [r3, #0]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	ffff87fd 	.word	0xffff87fd
 8002788:	ffff2ffe 	.word	0xffff2ffe
 800278c:	fffec000 	.word	0xfffec000
 8002790:	ffc0efef 	.word	0xffc0efef
 8002794:	7fc0ffff 	.word	0x7fc0ffff

08002798 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0a4      	sub	sp, #144	; 0x90
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027a6:	2300      	movs	r3, #0
 80027a8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027f0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002812:	2300      	movs	r3, #0
 8002814:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002816:	2300      	movs	r3, #0
 8002818:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800281a:	2300      	movs	r3, #0
 800281c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002830:	2320      	movs	r3, #32
 8002832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002836:	2301      	movs	r3, #1
 8002838:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002842:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800284c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002872:	2300      	movs	r3, #0
 8002874:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fde6 	bl	8002454 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002888:	2301      	movs	r3, #1
 800288a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80028b8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fee1 	bl	800268c <ETH_SetDMAConfig>
}
 80028ca:	bf00      	nop
 80028cc:	3790      	adds	r7, #144	; 0x90
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028ee:	f002 ffa5 	bl	800583c <HAL_RCC_GetHCLKFreq>
 80028f2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d908      	bls.n	800290e <ETH_MAC_MDIO_ClkConfig+0x3a>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d804      	bhi.n	800290e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e027      	b.n	800295e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d908      	bls.n	8002928 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a17      	ldr	r2, [pc, #92]	; (8002978 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d204      	bcs.n	8002928 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e01a      	b.n	800295e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d303      	bcc.n	8002938 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d911      	bls.n	800295c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d908      	bls.n	8002952 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d804      	bhi.n	8002952 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e005      	b.n	800295e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e000      	b.n	800295e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800295c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	01312cff 	.word	0x01312cff
 8002974:	02160ebf 	.word	0x02160ebf
 8002978:	03938700 	.word	0x03938700
 800297c:	05f5e0ff 	.word	0x05f5e0ff
 8002980:	08f0d17f 	.word	0x08f0d17f

08002984 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e01d      	b.n	80029ce <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	3206      	adds	r2, #6
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3301      	adds	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d9de      	bls.n	8002992 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f241 132c 	movw	r3, #4396	; 0x112c
 80029e2:	4413      	add	r3, r2
 80029e4:	2203      	movs	r2, #3
 80029e6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f241 1314 	movw	r3, #4372	; 0x1114
 80029f4:	4413      	add	r3, r2
 80029f6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e024      	b.n	8002a6a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	440b      	add	r3, r1
 8002a30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d9d7      	bls.n	8002a20 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f241 1330 	movw	r3, #4400	; 0x1130
 8002a96:	4413      	add	r3, r2
 8002a98:	2203      	movs	r2, #3
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6919      	ldr	r1, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f241 131c 	movw	r3, #4380	; 0x111c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f241 1328 	movw	r3, #4392	; 0x1128
 8002abc:	4413      	add	r3, r2
 8002abe:	6019      	str	r1, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ada:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <HAL_GPIO_Init+0x234>)
 8002adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ade:	e194      	b.n	8002e0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8186 	beq.w	8002e04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d00b      	beq.n	8002b18 <HAL_GPIO_Init+0x4c>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0c:	2b11      	cmp	r3, #17
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d130      	bne.n	8002b7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4e:	2201      	movs	r2, #1
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0201 	and.w	r2, r3, #1
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0xee>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b12      	cmp	r3, #18
 8002bb8:	d123      	bne.n	8002c02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	08da      	lsrs	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3208      	adds	r2, #8
 8002bfc:	69b9      	ldr	r1, [r7, #24]
 8002bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80e0 	beq.w	8002e04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x238>)
 8002c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <HAL_GPIO_Init+0x238>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_GPIO_Init+0x238>)
 8002c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_GPIO_Init+0x23c>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_GPIO_Init+0x240>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d052      	beq.n	8002d34 <HAL_GPIO_Init+0x268>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <HAL_GPIO_Init+0x244>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d031      	beq.n	8002cfa <HAL_GPIO_Init+0x22e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <HAL_GPIO_Init+0x248>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x22a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <HAL_GPIO_Init+0x24c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <HAL_GPIO_Init+0x250>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x254>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_GPIO_Init+0x258>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_GPIO_Init+0x25c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x216>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_GPIO_Init+0x260>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x212>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_GPIO_Init+0x264>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x20e>
 8002cd6:	2309      	movs	r3, #9
 8002cd8:	e02d      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cda:	230a      	movs	r3, #10
 8002cdc:	e02b      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e029      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e027      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e025      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cea:	2305      	movs	r3, #5
 8002cec:	e023      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e021      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e01f      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e01d      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01b      	b.n	8002d36 <HAL_GPIO_Init+0x26a>
 8002cfe:	bf00      	nop
 8002d00:	58000080 	.word	0x58000080
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58000400 	.word	0x58000400
 8002d0c:	58020000 	.word	0x58020000
 8002d10:	58020400 	.word	0x58020400
 8002d14:	58020800 	.word	0x58020800
 8002d18:	58020c00 	.word	0x58020c00
 8002d1c:	58021000 	.word	0x58021000
 8002d20:	58021400 	.word	0x58021400
 8002d24:	58021800 	.word	0x58021800
 8002d28:	58021c00 	.word	0x58021c00
 8002d2c:	58022000 	.word	0x58022000
 8002d30:	58022400 	.word	0x58022400
 8002d34:	2300      	movs	r3, #0
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f002 0203 	and.w	r2, r2, #3
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	4093      	lsls	r3, r2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d46:	4938      	ldr	r1, [pc, #224]	; (8002e28 <HAL_GPIO_Init+0x35c>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f ae63 	bne.w	8002ae0 <HAL_GPIO_Init+0x14>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	3724      	adds	r7, #36	; 0x24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	58000400 	.word	0x58000400

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e60:	b08f      	sub	sp, #60	; 0x3c
 8002e62:	af0a      	add	r7, sp, #40	; 0x28
 8002e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e054      	b.n	8002f1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f009 f898 	bl	800bfc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f006 f8f3 	bl	800909a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	687e      	ldr	r6, [r7, #4]
 8002ebc:	466d      	mov	r5, sp
 8002ebe:	f106 0410 	add.w	r4, r6, #16
 8002ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed2:	1d33      	adds	r3, r6, #4
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f006 f860 	bl	8008f9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f006 f8ea 	bl	80090bc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	687e      	ldr	r6, [r7, #4]
 8002ef0:	466d      	mov	r5, sp
 8002ef2:	f106 0410 	add.w	r4, r6, #16
 8002ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f06:	1d33      	adds	r3, r6, #4
 8002f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0a:	6838      	ldr	r0, [r7, #0]
 8002f0c:	f006 fa34 	bl	8009378 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f22:	b590      	push	{r4, r7, lr}
 8002f24:	b089      	sub	sp, #36	; 0x24
 8002f26:	af04      	add	r7, sp, #16
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	70fb      	strb	r3, [r7, #3]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70bb      	strb	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_HCD_HC_Init+0x28>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e076      	b.n	8003038 <HAL_HCD_HC_Init+0x116>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	333d      	adds	r3, #61	; 0x3d
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3338      	adds	r3, #56	; 0x38
 8002f72:	787a      	ldrb	r2, [r7, #1]
 8002f74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3340      	adds	r3, #64	; 0x40
 8002f84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	3339      	adds	r3, #57	; 0x39
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	333f      	adds	r3, #63	; 0x3f
 8002fa8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	78ba      	ldrb	r2, [r7, #2]
 8002fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb6:	b2d0      	uxtb	r0, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333a      	adds	r3, #58	; 0x3a
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da09      	bge.n	8002fe4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	333b      	adds	r3, #59	; 0x3b
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e008      	b.n	8002ff6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	333b      	adds	r3, #59	; 0x3b
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	333c      	adds	r3, #60	; 0x3c
 8003004:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003008:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	787c      	ldrb	r4, [r7, #1]
 8003010:	78ba      	ldrb	r2, [r7, #2]
 8003012:	78f9      	ldrb	r1, [r7, #3]
 8003014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	4623      	mov	r3, r4
 8003026:	f006 fb23 	bl	8009670 <USB_HC_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_HCD_HC_Halt+0x1e>
 800305a:	2302      	movs	r3, #2
 800305c:	e00f      	b.n	800307e <HAL_HCD_HC_Halt+0x3e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f006 fd5f 	bl	8009b32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	70fb      	strb	r3, [r7, #3]
 800309a:	460b      	mov	r3, r1
 800309c:	70bb      	strb	r3, [r7, #2]
 800309e:	4613      	mov	r3, r2
 80030a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333b      	adds	r3, #59	; 0x3b
 80030b0:	78ba      	ldrb	r2, [r7, #2]
 80030b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	333f      	adds	r3, #63	; 0x3f
 80030c2:	787a      	ldrb	r2, [r7, #1]
 80030c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030c6:	7c3b      	ldrb	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d112      	bne.n	80030f2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	2203      	movs	r2, #3
 80030dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	333d      	adds	r3, #61	; 0x3d
 80030ec:	7f3a      	ldrb	r2, [r7, #28]
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e008      	b.n	8003104 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3342      	adds	r3, #66	; 0x42
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003104:	787b      	ldrb	r3, [r7, #1]
 8003106:	2b03      	cmp	r3, #3
 8003108:	f200 80c6 	bhi.w	8003298 <HAL_HCD_HC_SubmitRequest+0x210>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	08003285 	.word	0x08003285
 800311c:	08003189 	.word	0x08003189
 8003120:	08003207 	.word	0x08003207
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003124:	7c3b      	ldrb	r3, [r7, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 80b8 	bne.w	800329c <HAL_HCD_HC_SubmitRequest+0x214>
 800312c:	78bb      	ldrb	r3, [r7, #2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80b4 	bne.w	800329c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003134:	8b3b      	ldrh	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3355      	adds	r3, #85	; 0x55
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3355      	adds	r3, #85	; 0x55
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3342      	adds	r3, #66	; 0x42
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003172:	e093      	b.n	800329c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3342      	adds	r3, #66	; 0x42
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
      break;
 8003186:	e089      	b.n	800329c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003188:	78bb      	ldrb	r3, [r7, #2]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3355      	adds	r3, #85	; 0x55
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3342      	adds	r3, #66	; 0x42
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031b4:	e073      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3342      	adds	r3, #66	; 0x42
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
      break;
 80031c8:	e069      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3354      	adds	r3, #84	; 0x54
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3342      	adds	r3, #66	; 0x42
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
      break;
 80031f0:	e055      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3342      	adds	r3, #66	; 0x42
 8003200:	2202      	movs	r2, #2
 8003202:	701a      	strb	r2, [r3, #0]
      break;
 8003204:	e04b      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003206:	78bb      	ldrb	r3, [r7, #2]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d11d      	bne.n	8003248 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3355      	adds	r3, #85	; 0x55
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3342      	adds	r3, #66	; 0x42
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003232:	e034      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3342      	adds	r3, #66	; 0x42
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
      break;
 8003246:	e02a      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3354      	adds	r3, #84	; 0x54
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3342      	adds	r3, #66	; 0x42
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
      break;
 800326e:	e016      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3342      	adds	r3, #66	; 0x42
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      break;
 8003282:	e00c      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3342      	adds	r3, #66	; 0x42
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
      break;
 8003296:	e002      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800329c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3344      	adds	r3, #68	; 0x44
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	8b3a      	ldrh	r2, [r7, #24]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	202c      	movs	r0, #44	; 0x2c
 80032b8:	fb00 f303 	mul.w	r3, r0, r3
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	; 0x4c
 80032c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3350      	adds	r3, #80	; 0x50
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3339      	adds	r3, #57	; 0x39
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3361      	adds	r3, #97	; 0x61
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	222c      	movs	r2, #44	; 0x2c
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	3338      	adds	r3, #56	; 0x38
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	18d1      	adds	r1, r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	f006 fab2 	bl	800988c <USB_HC_StartXfer>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop

08003334 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f005 ffd1 	bl	80092f2 <USB_GetMode>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 80ef 	bne.w	8003536 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 ffb5 	bl	80092cc <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80e5 	beq.w	8003534 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f005 ffac 	bl	80092cc <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800337e:	d104      	bne.n	800338a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f005 ff9c 	bl	80092cc <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339e:	d104      	bne.n	80033aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f005 ff8c 	bl	80092cc <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033be:	d104      	bne.n	80033ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 ff7c 	bl	80092cc <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2202      	movs	r2, #2
 80033e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f005 ff6e 	bl	80092cc <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fa:	d115      	bne.n	8003428 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003404:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f008 fe80 	bl	800c11c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f006 f85e 	bl	80094e4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f005 ff4d 	bl	80092cc <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343c:	d102      	bne.n	8003444 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f001 f9ff 	bl	8004842 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f005 ff3f 	bl	80092cc <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d106      	bne.n	8003466 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f008 fe43 	bl	800c0e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2208      	movs	r2, #8
 8003464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f005 ff2e 	bl	80092cc <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b10      	cmp	r3, #16
 8003478:	d101      	bne.n	800347e <HAL_HCD_IRQHandler+0x14a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_HCD_IRQHandler+0x14c>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f001 f902 	bl	800469e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0210 	orr.w	r2, r2, #16
 80034a8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f005 ff0c 	bl	80092cc <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034be:	d13a      	bne.n	8003536 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 fb23 	bl	8009b10 <USB_HC_ReadInterrupt>
 80034ca:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	e025      	b.n	800351e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d018      	beq.n	8003518 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fc:	d106      	bne.n	800350c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8ab 	bl	8003660 <HCD_HC_IN_IRQHandler>
 800350a:	e005      	b.n	8003518 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fcc6 	bl	8003ea4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3301      	adds	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	d3d4      	bcc.n	80034d2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003530:	615a      	str	r2, [r3, #20]
 8003532:	e000      	b.n	8003536 <HAL_HCD_IRQHandler+0x202>
      return;
 8003534:	bf00      	nop
    }
  }
}
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_HCD_Start+0x16>
 800354e:	2302      	movs	r3, #2
 8003550:	e013      	b.n	800357a <HAL_HCD_Start+0x3e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f005 fd8a 	bl	8009078 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	4618      	mov	r0, r3
 800356c:	f006 f81e 	bl	80095ac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_HCD_Stop+0x16>
 8003594:	2302      	movs	r3, #2
 8003596:	e00d      	b.n	80035b4 <HAL_HCD_Stop+0x32>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fc1d 	bl	8009de4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f005 ffc5 	bl	8009558 <USB_ResetPort>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3360      	adds	r3, #96	; 0x60
 80035f2:	781b      	ldrb	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3350      	adds	r3, #80	; 0x50
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f006 f809 	bl	800964c <USB_GetCurrentFrame>
 800363a:	4603      	mov	r3, r0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 ffe4 	bl	800961e <USB_GetHostSpeed>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d119      	bne.n	80036c4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	2304      	movs	r3, #4
 80036a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	60d3      	str	r3, [r2, #12]
 80036c2:	e101      	b.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	d12b      	bne.n	8003734 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	3361      	adds	r3, #97	; 0x61
 80036fe:	2207      	movs	r2, #7
 8003700:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	440a      	add	r2, r1
 8003718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f006 fa00 	bl	8009b32 <USB_HC_Halt>
 8003732:	e0c9      	b.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d109      	bne.n	800375e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	461a      	mov	r2, r3
 8003758:	2320      	movs	r3, #32
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e0b4      	b.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d133      	bne.n	80037dc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	0151      	lsls	r1, r2, #5
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	440a      	add	r2, r1
 800378a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3361      	adds	r3, #97	; 0x61
 80037a2:	2205      	movs	r2, #5
 80037a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	2310      	movs	r3, #16
 80037b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2308      	movs	r3, #8
 80037c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f006 f9ac 	bl	8009b32 <USB_HC_Halt>
 80037da:	e075      	b.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d134      	bne.n	800385e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3361      	adds	r3, #97	; 0x61
 8003822:	2208      	movs	r2, #8
 8003824:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	461a      	mov	r2, r3
 8003834:	2310      	movs	r3, #16
 8003836:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f006 f96b 	bl	8009b32 <USB_HC_Halt>
 800385c:	e034      	b.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d129      	bne.n	80038c8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	440a      	add	r2, r1
 800388a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	3361      	adds	r3, #97	; 0x61
 80038a2:	2206      	movs	r2, #6
 80038a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f006 f93e 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038de:	d122      	bne.n	8003926 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f006 f911 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	461a      	mov	r2, r3
 800391e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003922:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003924:	e2ba      	b.n	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 811b 	bne.w	8003b74 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d019      	beq.n	800397a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	3348      	adds	r3, #72	; 0x48
 8003954:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	0159      	lsls	r1, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	440b      	add	r3, r1
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	202c      	movs	r0, #44	; 0x2c
 8003970:	fb00 f303 	mul.w	r3, r0, r3
 8003974:	440b      	add	r3, r1
 8003976:	3350      	adds	r3, #80	; 0x50
 8003978:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3361      	adds	r3, #97	; 0x61
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	335c      	adds	r3, #92	; 0x5c
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2301      	movs	r3, #1
 80039ae:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	333f      	adds	r3, #63	; 0x3f
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	333f      	adds	r3, #63	; 0x3f
 80039d2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d121      	bne.n	8003a1c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 f895 	bl	8009b32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2310      	movs	r3, #16
 8003a18:	6093      	str	r3, [r2, #8]
 8003a1a:	e066      	b.n	8003aea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	333f      	adds	r3, #63	; 0x3f
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d127      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a4e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3360      	adds	r3, #96	; 0x60
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	202c      	movs	r0, #44	; 0x2c
 8003a6c:	fb00 f303 	mul.w	r3, r0, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3360      	adds	r3, #96	; 0x60
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f008 fb5d 	bl	800c138 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a7e:	e034      	b.n	8003aea <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	333f      	adds	r3, #63	; 0x3f
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d12a      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3360      	adds	r3, #96	; 0x60
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3354      	adds	r3, #84	; 0x54
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	f083 0301 	eor.w	r3, r3, #1
 8003aba:	b2d8      	uxtb	r0, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3354      	adds	r3, #84	; 0x54
 8003aca:	4602      	mov	r2, r0
 8003acc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	b2d9      	uxtb	r1, r3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	202c      	movs	r0, #44	; 0x2c
 8003ad8:	fb00 f303 	mul.w	r3, r0, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3360      	adds	r3, #96	; 0x60
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f008 fb27 	bl	800c138 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12b      	bne.n	8003b4a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3348      	adds	r3, #72	; 0x48
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	202c      	movs	r0, #44	; 0x2c
 8003b08:	fb00 f202 	mul.w	r2, r0, r2
 8003b0c:	440a      	add	r2, r1
 8003b0e:	3240      	adds	r2, #64	; 0x40
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 81be 	beq.w	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3354      	adds	r3, #84	; 0x54
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	f083 0301 	eor.w	r3, r3, #1
 8003b34:	b2d8      	uxtb	r0, r3
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3354      	adds	r3, #84	; 0x54
 8003b44:	4602      	mov	r2, r0
 8003b46:	701a      	strb	r2, [r3, #0]
}
 8003b48:	e1a8      	b.n	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	212c      	movs	r1, #44	; 0x2c
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	3354      	adds	r3, #84	; 0x54
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	f083 0301 	eor.w	r3, r3, #1
 8003b5e:	b2d8      	uxtb	r0, r3
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3354      	adds	r3, #84	; 0x54
 8003b6e:	4602      	mov	r2, r0
 8003b70:	701a      	strb	r2, [r3, #0]
}
 8003b72:	e193      	b.n	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	f040 8106 	bne.w	8003d98 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ba6:	f023 0302 	bic.w	r3, r3, #2
 8003baa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3361      	adds	r3, #97	; 0x61
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d109      	bne.n	8003bd4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e0c9      	b.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	3361      	adds	r3, #97	; 0x61
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d109      	bne.n	8003bfc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3360      	adds	r3, #96	; 0x60
 8003bf6:	2205      	movs	r2, #5
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e0b5      	b.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	3361      	adds	r3, #97	; 0x61
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d009      	beq.n	8003c24 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	212c      	movs	r1, #44	; 0x2c
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3361      	adds	r3, #97	; 0x61
 8003c1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d150      	bne.n	8003cc6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	335c      	adds	r3, #92	; 0x5c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	202c      	movs	r0, #44	; 0x2c
 8003c3c:	fb00 f303 	mul.w	r3, r0, r3
 8003c40:	440b      	add	r3, r1
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	335c      	adds	r3, #92	; 0x5c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d912      	bls.n	8003c80 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	335c      	adds	r3, #92	; 0x5c
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3360      	adds	r3, #96	; 0x60
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c7e:	e073      	b.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3360      	adds	r3, #96	; 0x60
 8003c8e:	2202      	movs	r2, #2
 8003c90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ca8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cc4:	e050      	b.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3361      	adds	r3, #97	; 0x61
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d122      	bne.n	8003d20 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	212c      	movs	r1, #44	; 0x2c
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3360      	adds	r3, #96	; 0x60
 8003ce8:	2202      	movs	r2, #2
 8003cea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e023      	b.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3361      	adds	r3, #97	; 0x61
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d119      	bne.n	8003d68 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	335c      	adds	r3, #92	; 0x5c
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	202c      	movs	r0, #44	; 0x2c
 8003d4c:	fb00 f303 	mul.w	r3, r0, r3
 8003d50:	440b      	add	r3, r1
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	2204      	movs	r2, #4
 8003d66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d74:	461a      	mov	r2, r3
 8003d76:	2302      	movs	r3, #2
 8003d78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	b2d9      	uxtb	r1, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	202c      	movs	r0, #44	; 0x2c
 8003d84:	fb00 f303 	mul.w	r3, r0, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3360      	adds	r3, #96	; 0x60
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f008 f9d1 	bl	800c138 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d96:	e081      	b.n	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b10      	cmp	r3, #16
 8003dac:	d176      	bne.n	8003e9c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	333f      	adds	r3, #63	; 0x3f
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d121      	bne.n	8003e06 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	335c      	adds	r3, #92	; 0x5c
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f005 fe97 	bl	8009b32 <USB_HC_Halt>
 8003e04:	e041      	b.n	8003e8a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	333f      	adds	r3, #63	; 0x3f
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	333f      	adds	r3, #63	; 0x3f
 8003e28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d12d      	bne.n	8003e8a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	212c      	movs	r1, #44	; 0x2c
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	335c      	adds	r3, #92	; 0x5c
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d120      	bne.n	8003e8a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	3361      	adds	r3, #97	; 0x61
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f005 fe54 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2310      	movs	r3, #16
 8003e9a:	6093      	str	r3, [r2, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d119      	bne.n	8003f08 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f06:	e3c6      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d13e      	bne.n	8003f9c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	333d      	adds	r3, #61	; 0x3d
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 83a8 	bne.w	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	333d      	adds	r3, #61	; 0x3d
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3360      	adds	r3, #96	; 0x60
 8003f66:	2202      	movs	r2, #2
 8003f68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f005 fdcc 	bl	8009b32 <USB_HC_Halt>
}
 8003f9a:	e37c      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb2:	d122      	bne.n	8003ffa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	0151      	lsls	r1, r2, #5
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	440a      	add	r2, r1
 8003fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 fda7 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff6:	6093      	str	r3, [r2, #8]
}
 8003ff8:	e34d      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d150      	bne.n	80040b2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	335c      	adds	r3, #92	; 0x5c
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d111      	bne.n	800405c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	333d      	adds	r3, #61	; 0x3d
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f005 fd53 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4413      	add	r3, r2
 8004094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004098:	461a      	mov	r2, r3
 800409a:	2301      	movs	r3, #1
 800409c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3361      	adds	r3, #97	; 0x61
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
}
 80040b0:	e2f1      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d13c      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3361      	adds	r3, #97	; 0x61
 80040d6:	2204      	movs	r2, #4
 80040d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	333d      	adds	r3, #61	; 0x3d
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	335c      	adds	r3, #92	; 0x5c
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	440a      	add	r2, r1
 8004114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f005 fd02 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	461a      	mov	r2, r3
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	6093      	str	r3, [r2, #8]
}
 8004140:	e2a9      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d12a      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	2308      	movs	r3, #8
 8004168:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	440a      	add	r2, r1
 8004180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f005 fccc 	bl	8009b32 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3361      	adds	r3, #97	; 0x61
 80041a8:	2205      	movs	r2, #5
 80041aa:	701a      	strb	r2, [r3, #0]
}
 80041ac:	e273      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d150      	bne.n	8004266 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	212c      	movs	r1, #44	; 0x2c
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	335c      	adds	r3, #92	; 0x5c
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3361      	adds	r3, #97	; 0x61
 80041e4:	2203      	movs	r2, #3
 80041e6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	333d      	adds	r3, #61	; 0x3d
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d112      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	333c      	adds	r3, #60	; 0x3c
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	333d      	adds	r3, #61	; 0x3d
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	440a      	add	r2, r1
 8004238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f005 fc70 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	2310      	movs	r3, #16
 8004262:	6093      	str	r3, [r2, #8]
}
 8004264:	e217      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b80      	cmp	r3, #128	; 0x80
 800427a:	d174      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d121      	bne.n	80042c8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	212c      	movs	r1, #44	; 0x2c
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	3361      	adds	r3, #97	; 0x61
 8004292:	2206      	movs	r2, #6
 8004294:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f005 fc36 	bl	8009b32 <USB_HC_Halt>
 80042c6:	e044      	b.n	8004352 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	212c      	movs	r1, #44	; 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	335c      	adds	r3, #92	; 0x5c
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	202c      	movs	r0, #44	; 0x2c
 80042e0:	fb00 f303 	mul.w	r3, r0, r3
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	212c      	movs	r1, #44	; 0x2c
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	4413      	add	r3, r2
 80042f6:	335c      	adds	r3, #92	; 0x5c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d920      	bls.n	8004340 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	212c      	movs	r1, #44	; 0x2c
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	4413      	add	r3, r2
 800430a:	335c      	adds	r3, #92	; 0x5c
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	212c      	movs	r1, #44	; 0x2c
 8004316:	fb01 f303 	mul.w	r3, r1, r3
 800431a:	4413      	add	r3, r2
 800431c:	3360      	adds	r3, #96	; 0x60
 800431e:	2204      	movs	r2, #4
 8004320:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	b2d9      	uxtb	r1, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	202c      	movs	r0, #44	; 0x2c
 800432c:	fb00 f303 	mul.w	r3, r0, r3
 8004330:	4413      	add	r3, r2
 8004332:	3360      	adds	r3, #96	; 0x60
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f007 fefd 	bl	800c138 <HAL_HCD_HC_NotifyURBChange_Callback>
 800433e:	e008      	b.n	8004352 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	3360      	adds	r3, #96	; 0x60
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	6093      	str	r3, [r2, #8]
}
 8004364:	e197      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437c:	d134      	bne.n	80043e8 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	440a      	add	r2, r1
 8004394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004398:	f043 0302 	orr.w	r3, r3, #2
 800439c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	4611      	mov	r1, r2
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 fbc2 	bl	8009b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ba:	461a      	mov	r2, r3
 80043bc:	2310      	movs	r3, #16
 80043be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	461a      	mov	r2, r3
 80043ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3361      	adds	r3, #97	; 0x61
 80043e2:	2208      	movs	r2, #8
 80043e4:	701a      	strb	r2, [r3, #0]
}
 80043e6:	e156      	b.n	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	f040 814b 	bne.w	8004696 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	440a      	add	r2, r1
 8004416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800441a:	f023 0302 	bic.w	r3, r3, #2
 800441e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	3361      	adds	r3, #97	; 0x61
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d179      	bne.n	8004528 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3360      	adds	r3, #96	; 0x60
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	333f      	adds	r3, #63	; 0x3f
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d00a      	beq.n	8004470 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	333f      	adds	r3, #63	; 0x3f
 8004468:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800446a:	2b03      	cmp	r3, #3
 800446c:	f040 80fc 	bne.w	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d142      	bne.n	80044fe <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	334c      	adds	r3, #76	; 0x4c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80ed 	beq.w	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	334c      	adds	r3, #76	; 0x4c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	202c      	movs	r0, #44	; 0x2c
 80044a4:	fb00 f202 	mul.w	r2, r0, r2
 80044a8:	440a      	add	r2, r1
 80044aa:	3240      	adds	r2, #64	; 0x40
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	4413      	add	r3, r2
 80044b0:	3b01      	subs	r3, #1
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	202c      	movs	r0, #44	; 0x2c
 80044b8:	fb00 f202 	mul.w	r2, r0, r2
 80044bc:	440a      	add	r2, r1
 80044be:	3240      	adds	r2, #64	; 0x40
 80044c0:	8812      	ldrh	r2, [r2, #0]
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80ca 	beq.w	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3355      	adds	r3, #85	; 0x55
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2d8      	uxtb	r0, r3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	3355      	adds	r3, #85	; 0x55
 80044f8:	4602      	mov	r2, r0
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e0b4      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3355      	adds	r3, #85	; 0x55
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	f083 0301 	eor.w	r3, r3, #1
 8004512:	b2d8      	uxtb	r0, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3355      	adds	r3, #85	; 0x55
 8004522:	4602      	mov	r2, r0
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e09f      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	212c      	movs	r1, #44	; 0x2c
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	4413      	add	r3, r2
 8004534:	3361      	adds	r3, #97	; 0x61
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d109      	bne.n	8004550 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3360      	adds	r3, #96	; 0x60
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e08b      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3361      	adds	r3, #97	; 0x61
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d109      	bne.n	8004578 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3360      	adds	r3, #96	; 0x60
 8004572:	2202      	movs	r2, #2
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e077      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	3361      	adds	r3, #97	; 0x61
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d109      	bne.n	80045a0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	2205      	movs	r2, #5
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e063      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3361      	adds	r3, #97	; 0x61
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d009      	beq.n	80045c8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3361      	adds	r3, #97	; 0x61
 80045c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d14f      	bne.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	335c      	adds	r3, #92	; 0x5c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	202c      	movs	r0, #44	; 0x2c
 80045e0:	fb00 f303 	mul.w	r3, r0, r3
 80045e4:	440b      	add	r3, r1
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	212c      	movs	r1, #44	; 0x2c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4413      	add	r3, r2
 80045f6:	335c      	adds	r3, #92	; 0x5c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d912      	bls.n	8004624 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	335c      	adds	r3, #92	; 0x5c
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	3360      	adds	r3, #96	; 0x60
 800461e:	2204      	movs	r2, #4
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e021      	b.n	8004668 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	212c      	movs	r1, #44	; 0x2c
 800462a:	fb01 f303 	mul.w	r3, r1, r3
 800462e:	4413      	add	r3, r2
 8004630:	3360      	adds	r3, #96	; 0x60
 8004632:	2202      	movs	r2, #2
 8004634:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	4413      	add	r3, r2
 800463e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800464c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004654:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	461a      	mov	r2, r3
 8004676:	2302      	movs	r3, #2
 8004678:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	b2d9      	uxtb	r1, r3
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	202c      	movs	r0, #44	; 0x2c
 8004684:	fb00 f303 	mul.w	r3, r0, r3
 8004688:	4413      	add	r3, r2
 800468a:	3360      	adds	r3, #96	; 0x60
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 fd51 	bl	800c138 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004696:	bf00      	nop
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08a      	sub	sp, #40	; 0x28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	0c5b      	lsrs	r3, r3, #17
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d004      	beq.n	80046e4 <HCD_RXQLVL_IRQHandler+0x46>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	f000 80a9 	beq.w	8004834 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046e2:	e0aa      	b.n	800483a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80a6 	beq.w	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	212c      	movs	r1, #44	; 0x2c
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	3344      	adds	r3, #68	; 0x44
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 809b 	beq.w	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	3350      	adds	r3, #80	; 0x50
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	441a      	add	r2, r3
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	202c      	movs	r0, #44	; 0x2c
 800471c:	fb00 f303 	mul.w	r3, r0, r3
 8004720:	440b      	add	r3, r1
 8004722:	334c      	adds	r3, #76	; 0x4c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d87a      	bhi.n	8004820 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3344      	adds	r3, #68	; 0x44
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	b292      	uxth	r2, r2
 8004742:	4619      	mov	r1, r3
 8004744:	f004 fd6a 	bl	800921c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	212c      	movs	r1, #44	; 0x2c
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	4413      	add	r3, r2
 8004754:	3344      	adds	r3, #68	; 0x44
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	441a      	add	r2, r3
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	202c      	movs	r0, #44	; 0x2c
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	440b      	add	r3, r1
 8004768:	3344      	adds	r3, #68	; 0x44
 800476a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3350      	adds	r3, #80	; 0x50
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	441a      	add	r2, r3
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	202c      	movs	r0, #44	; 0x2c
 8004786:	fb00 f303 	mul.w	r3, r0, r3
 800478a:	440b      	add	r3, r1
 800478c:	3350      	adds	r3, #80	; 0x50
 800478e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	0cdb      	lsrs	r3, r3, #19
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	212c      	movs	r1, #44	; 0x2c
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	3340      	adds	r3, #64	; 0x40
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d13c      	bne.n	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d039      	beq.n	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047da:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3354      	adds	r3, #84	; 0x54
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2d8      	uxtb	r0, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3354      	adds	r3, #84	; 0x54
 800481a:	4602      	mov	r2, r0
 800481c:	701a      	strb	r2, [r3, #0]
      break;
 800481e:	e00b      	b.n	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3360      	adds	r3, #96	; 0x60
 800482e:	2204      	movs	r2, #4
 8004830:	701a      	strb	r2, [r3, #0]
      break;
 8004832:	e001      	b.n	8004838 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004834:	bf00      	nop
 8004836:	e000      	b.n	800483a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004838:	bf00      	nop
  }
}
 800483a:	bf00      	nop
 800483c:	3728      	adds	r7, #40	; 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800486e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d10b      	bne.n	8004892 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d102      	bne.n	800488a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f007 fc3b 	bl	800c100 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d132      	bne.n	8004902 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f043 0308 	orr.w	r3, r3, #8
 80048a2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d126      	bne.n	80048fc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d113      	bne.n	80048de <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80048bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048c0:	d106      	bne.n	80048d0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 fe0b 	bl	80094e4 <USB_InitFSLSPClkSel>
 80048ce:	e011      	b.n	80048f4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f004 fe04 	bl	80094e4 <USB_InitFSLSPClkSel>
 80048dc:	e00a      	b.n	80048f4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d106      	bne.n	80048f4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ec:	461a      	mov	r2, r3
 80048ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048f2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f007 fc2d 	bl	800c154 <HAL_HCD_PortEnabled_Callback>
 80048fa:	e002      	b.n	8004902 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f007 fc37 	bl	800c170 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b20      	cmp	r3, #32
 800490a:	d103      	bne.n	8004914 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f043 0320 	orr.w	r3, r3, #32
 8004912:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_PWREx_ConfigSupply+0x70>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d00a      	beq.n	8004952 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_PWREx_ConfigSupply+0x70>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d001      	beq.n	800494e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e01f      	b.n	800498e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e01d      	b.n	800498e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_PWREx_ConfigSupply+0x70>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	490f      	ldr	r1, [pc, #60]	; (8004998 <HAL_PWREx_ConfigSupply+0x70>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4313      	orrs	r3, r2
 8004960:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004962:	f7fc fddb 	bl	800151c <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004968:	e009      	b.n	800497e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800496a:	f7fc fdd7 	bl	800151c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d901      	bls.n	800497e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e007      	b.n	800498e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_PWREx_ConfigSupply+0x70>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	d1ee      	bne.n	800496a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	58024800 	.word	0x58024800

0800499c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	60d3      	str	r3, [r2, #12]
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	58024800 	.word	0x58024800

080049bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e3ff      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8087 	beq.w	8004aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4b99      	ldr	r3, [pc, #612]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049e6:	4b97      	ldr	r3, [pc, #604]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d007      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46>
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b18      	cmp	r3, #24
 80049f6:	d110      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d10b      	bne.n	8004a1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a02:	4b90      	ldr	r3, [pc, #576]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d06c      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d168      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e3d9      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x76>
 8004a24:	4b87      	ldr	r3, [pc, #540]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a86      	ldr	r2, [pc, #536]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02e      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0x98>
 8004a3a:	4b82      	ldr	r3, [pc, #520]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a81      	ldr	r2, [pc, #516]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a7e      	ldr	r2, [pc, #504]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e01d      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0xbc>
 8004a5e:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a78      	ldr	r2, [pc, #480]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0xd4>
 8004a78:	4b72      	ldr	r3, [pc, #456]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a71      	ldr	r2, [pc, #452]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b6f      	ldr	r3, [pc, #444]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a6e      	ldr	r2, [pc, #440]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fc fd40 	bl	800151c <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa0:	f7fc fd3c 	bl	800151c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e38d      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab2:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe4>
 8004abe:	e014      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fc fd2c 	bl	800151c <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fc fd28 	bl	800151c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e379      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ada:	4b5a      	ldr	r3, [pc, #360]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x10c>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80ae 	beq.w	8004c54 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b02:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_RCC_OscConfig+0x162>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	2b18      	cmp	r3, #24
 8004b12:	d13a      	bne.n	8004b8a <HAL_RCC_OscConfig+0x1ce>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d135      	bne.n	8004b8a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1e:	4b49      	ldr	r3, [pc, #292]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCC_OscConfig+0x17a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e34b      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b36:	f7fc fd21 	bl	800157c <HAL_GetREVID>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d817      	bhi.n	8004b74 <HAL_RCC_OscConfig+0x1b8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d108      	bne.n	8004b5e <HAL_RCC_OscConfig+0x1a2>
 8004b4c:	4b3d      	ldr	r3, [pc, #244]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004b54:	4a3b      	ldr	r2, [pc, #236]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b5c:	e07a      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	4935      	ldr	r1, [pc, #212]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b72:	e06f      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b74:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	4930      	ldr	r1, [pc, #192]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b88:	e064      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d045      	beq.n	8004c1e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 0219 	bic.w	r2, r3, #25
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4929      	ldr	r1, [pc, #164]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fc fcba 	bl	800151c <HAL_GetTick>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fc fcb6 	bl	800151c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e307      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	f7fc fcd7 	bl	800157c <HAL_GetREVID>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d817      	bhi.n	8004c08 <HAL_RCC_OscConfig+0x24c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d108      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x236>
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004be8:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bee:	6053      	str	r3, [r2, #4]
 8004bf0:	e030      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	031b      	lsls	r3, r3, #12
 8004c00:	4910      	ldr	r1, [pc, #64]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
 8004c06:	e025      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
 8004c08:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	490b      	ldr	r1, [pc, #44]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
 8004c1c:	e01a      	b.n	8004c54 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <HAL_RCC_OscConfig+0x288>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fc fc77 	bl	800151c <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fc fc73 	bl	800151c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d903      	bls.n	8004c48 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e2c4      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
 8004c44:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c48:	4ba4      	ldr	r3, [pc, #656]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a9 	beq.w	8004db4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c62:	4b9e      	ldr	r3, [pc, #632]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c6c:	4b9b      	ldr	r3, [pc, #620]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d007      	beq.n	8004c88 <HAL_RCC_OscConfig+0x2cc>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b18      	cmp	r3, #24
 8004c7c:	d13a      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x338>
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d135      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c88:	4b94      	ldr	r3, [pc, #592]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x2e4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e296      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ca0:	f7fc fc6c 	bl	800157c <HAL_GetREVID>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d817      	bhi.n	8004cde <HAL_RCC_OscConfig+0x322>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d108      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x30c>
 8004cb6:	4b89      	ldr	r3, [pc, #548]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004cbe:	4a87      	ldr	r2, [pc, #540]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cc6:	e075      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cc8:	4b84      	ldr	r3, [pc, #528]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	069b      	lsls	r3, r3, #26
 8004cd6:	4981      	ldr	r1, [pc, #516]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cdc:	e06a      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cde:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	497b      	ldr	r1, [pc, #492]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cf2:	e05f      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d042      	beq.n	8004d82 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cfc:	4b77      	ldr	r3, [pc, #476]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a76      	ldr	r2, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fc fc08 	bl	800151c <HAL_GetTick>
 8004d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d10:	f7fc fc04 	bl	800151c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e255      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d22:	4b6e      	ldr	r3, [pc, #440]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d2e:	f7fc fc25 	bl	800157c <HAL_GetREVID>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d817      	bhi.n	8004d6c <HAL_RCC_OscConfig+0x3b0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d108      	bne.n	8004d56 <HAL_RCC_OscConfig+0x39a>
 8004d44:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d4c:	4a63      	ldr	r2, [pc, #396]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d52:	6053      	str	r3, [r2, #4]
 8004d54:	e02e      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
 8004d56:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	069b      	lsls	r3, r3, #26
 8004d64:	495d      	ldr	r1, [pc, #372]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
 8004d6a:	e023      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
 8004d6c:	4b5b      	ldr	r3, [pc, #364]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	4958      	ldr	r1, [pc, #352]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60cb      	str	r3, [r1, #12]
 8004d80:	e018      	b.n	8004db4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d82:	4b56      	ldr	r3, [pc, #344]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a55      	ldr	r2, [pc, #340]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fc fbc5 	bl	800151c <HAL_GetTick>
 8004d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004d96:	f7fc fbc1 	bl	800151c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e212      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004da8:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d036      	beq.n	8004e2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d019      	beq.n	8004dfc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc8:	4b44      	ldr	r3, [pc, #272]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dcc:	4a43      	ldr	r2, [pc, #268]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fc fba2 	bl	800151c <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fc fb9e 	bl	800151c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1ef      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x420>
 8004dfa:	e018      	b.n	8004e2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dfc:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e00:	4a36      	ldr	r2, [pc, #216]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fc fb88 	bl	800151c <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fc fb84 	bl	800151c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e1d5      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d036      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d019      	beq.n	8004e76 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e42:	4b26      	ldr	r3, [pc, #152]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e4e:	f7fc fb65 	bl	800151c <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e56:	f7fc fb61 	bl	800151c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e1b2      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x49a>
 8004e74:	e018      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e82:	f7fc fb4b 	bl	800151c <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004e8a:	f7fc fb47 	bl	800151c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e198      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_RCC_OscConfig+0x520>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8085 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <HAL_RCC_OscConfig+0x524>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_RCC_OscConfig+0x524>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fb2b 	bl	800151c <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec8:	e00c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eca:	f7fc fb27 	bl	800151c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	; 0x64
 8004ed6:	d905      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e178      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee4:	4b96      	ldr	r3, [pc, #600]	; (8005140 <HAL_RCC_OscConfig+0x784>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ec      	beq.n	8004eca <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x54a>
 8004ef8:	4b92      	ldr	r3, [pc, #584]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a91      	ldr	r2, [pc, #580]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
 8004f04:	e02d      	b.n	8004f62 <HAL_RCC_OscConfig+0x5a6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x56c>
 8004f0e:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a8c      	ldr	r2, [pc, #560]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1a:	4b8a      	ldr	r3, [pc, #552]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1e:	4a89      	ldr	r2, [pc, #548]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	6713      	str	r3, [r2, #112]	; 0x70
 8004f26:	e01c      	b.n	8004f62 <HAL_RCC_OscConfig+0x5a6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x58e>
 8004f30:	4b84      	ldr	r3, [pc, #528]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a83      	ldr	r2, [pc, #524]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a80      	ldr	r2, [pc, #512]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x5a6>
 8004f4a:	4b7e      	ldr	r3, [pc, #504]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a7d      	ldr	r2, [pc, #500]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b7b      	ldr	r3, [pc, #492]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a7a      	ldr	r2, [pc, #488]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fc fad7 	bl	800151c <HAL_GetTick>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fc fad3 	bl	800151c <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e122      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f88:	4b6e      	ldr	r3, [pc, #440]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCC_OscConfig+0x5b6>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f96:	f7fc fac1 	bl	800151c <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fc fabd 	bl	800151c <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e10c      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004fb4:	4b63      	ldr	r3, [pc, #396]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8101 	beq.w	80051cc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fca:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd2:	2b18      	cmp	r3, #24
 8004fd4:	f000 80bc 	beq.w	8005150 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	f040 8095 	bne.w	800510c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b58      	ldr	r3, [pc, #352]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a57      	ldr	r2, [pc, #348]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8004fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fc fa95 	bl	800151c <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fc fa91 	bl	800151c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0e2      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005008:	4b4e      	ldr	r3, [pc, #312]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005014:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <HAL_RCC_OscConfig+0x78c>)
 800501a:	4013      	ands	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005024:	0112      	lsls	r2, r2, #4
 8005026:	430a      	orrs	r2, r1
 8005028:	4946      	ldr	r1, [pc, #280]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 800502a:	4313      	orrs	r3, r2
 800502c:	628b      	str	r3, [r1, #40]	; 0x28
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	3b01      	subs	r3, #1
 8005034:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	3b01      	subs	r3, #1
 800503e:	025b      	lsls	r3, r3, #9
 8005040:	b29b      	uxth	r3, r3
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	3b01      	subs	r3, #1
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	3b01      	subs	r3, #1
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800505e:	4939      	ldr	r1, [pc, #228]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005060:	4313      	orrs	r3, r2
 8005062:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005064:	4b37      	ldr	r3, [pc, #220]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005070:	4b34      	ldr	r3, [pc, #208]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005074:	4b35      	ldr	r3, [pc, #212]	; (800514c <HAL_RCC_OscConfig+0x790>)
 8005076:	4013      	ands	r3, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800507c:	00d2      	lsls	r2, r2, #3
 800507e:	4931      	ldr	r1, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005080:	4313      	orrs	r3, r2
 8005082:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005084:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f023 020c 	bic.w	r2, r3, #12
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	492c      	ldr	r1, [pc, #176]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005092:	4313      	orrs	r3, r2
 8005094:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f023 0202 	bic.w	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4928      	ldr	r1, [pc, #160]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050a8:	4b26      	ldr	r3, [pc, #152]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b4:	4b23      	ldr	r3, [pc, #140]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80050cc:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 80050de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fa1a 	bl	800151c <HAL_GetTick>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fc fa16 	bl	800151c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e067      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x730>
 800510a:	e05f      	b.n	80051cc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc fa00 	bl	800151c <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005120:	f7fc f9fc 	bl	800151c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e04d      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <HAL_RCC_OscConfig+0x788>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x764>
 800513e:	e045      	b.n	80051cc <HAL_RCC_OscConfig+0x810>
 8005140:	58024800 	.word	0x58024800
 8005144:	58024400 	.word	0x58024400
 8005148:	fffffc0c 	.word	0xfffffc0c
 800514c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005150:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_OscConfig+0x81c>)
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_OscConfig+0x81c>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b01      	cmp	r3, #1
 8005162:	d031      	beq.n	80051c8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0203 	and.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d12a      	bne.n	80051c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d122      	bne.n	80051c8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d11a      	bne.n	80051c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d111      	bne.n	80051c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d108      	bne.n	80051c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	0e1b      	lsrs	r3, r3, #24
 80051ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3730      	adds	r7, #48	; 0x30
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400

080051dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e19c      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b8a      	ldr	r3, [pc, #552]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d910      	bls.n	8005220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b87      	ldr	r3, [pc, #540]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 020f 	bic.w	r2, r3, #15
 8005206:	4985      	ldr	r1, [pc, #532]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b83      	ldr	r3, [pc, #524]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e184      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	4b7b      	ldr	r3, [pc, #492]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800523c:	4b78      	ldr	r3, [pc, #480]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	4975      	ldr	r1, [pc, #468]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800524a:	4313      	orrs	r3, r2
 800524c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d010      	beq.n	800527c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	4b70      	ldr	r3, [pc, #448]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005266:	429a      	cmp	r2, r3
 8005268:	d908      	bls.n	800527c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800526a:	4b6d      	ldr	r3, [pc, #436]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	496a      	ldr	r1, [pc, #424]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005278:	4313      	orrs	r3, r2
 800527a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	4b64      	ldr	r3, [pc, #400]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005294:	429a      	cmp	r2, r3
 8005296:	d908      	bls.n	80052aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	495e      	ldr	r1, [pc, #376]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d908      	bls.n	80052d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052c6:	4b56      	ldr	r3, [pc, #344]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	4953      	ldr	r1, [pc, #332]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	4b4d      	ldr	r3, [pc, #308]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d908      	bls.n	8005306 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b4a      	ldr	r3, [pc, #296]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f023 020f 	bic.w	r2, r3, #15
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4947      	ldr	r1, [pc, #284]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005302:	4313      	orrs	r3, r2
 8005304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d055      	beq.n	80053be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005312:	4b43      	ldr	r3, [pc, #268]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	4940      	ldr	r1, [pc, #256]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005320:	4313      	orrs	r3, r2
 8005322:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d107      	bne.n	800533c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532c:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d121      	bne.n	800537c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0f6      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d107      	bne.n	8005354 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d115      	bne.n	800537c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0ea      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d107      	bne.n	800536c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800535c:	4b30      	ldr	r3, [pc, #192]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0de      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800536c:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0d6      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800537c:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f023 0207 	bic.w	r2, r3, #7
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4925      	ldr	r1, [pc, #148]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538e:	f7fc f8c5 	bl	800151c <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005394:	e00a      	b.n	80053ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fc f8c1 	bl	800151c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0be      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d1eb      	bne.n	8005396 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d010      	beq.n	80053ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d208      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053da:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f023 020f 	bic.w	r2, r3, #15
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	490e      	ldr	r1, [pc, #56]	; (8005420 <HAL_RCC_ClockConfig+0x244>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d214      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fa:	4b08      	ldr	r3, [pc, #32]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 020f 	bic.w	r2, r3, #15
 8005402:	4906      	ldr	r1, [pc, #24]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	4b04      	ldr	r3, [pc, #16]	; (800541c <HAL_RCC_ClockConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d005      	beq.n	8005424 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e086      	b.n	800552a <HAL_RCC_ClockConfig+0x34e>
 800541c:	52002000 	.word	0x52002000
 8005420:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800543c:	429a      	cmp	r2, r3
 800543e:	d208      	bcs.n	8005452 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005440:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	4939      	ldr	r1, [pc, #228]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 800544e:	4313      	orrs	r3, r2
 8005450:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d208      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	492e      	ldr	r1, [pc, #184]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 800547c:	4313      	orrs	r3, r2
 800547e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d010      	beq.n	80054ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005498:	429a      	cmp	r2, r3
 800549a:	d208      	bcs.n	80054ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	4922      	ldr	r1, [pc, #136]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d208      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054ca:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4917      	ldr	r1, [pc, #92]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054dc:	f000 f834 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 80054e0:	4602      	mov	r2, r0
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	4912      	ldr	r1, [pc, #72]	; (8005538 <HAL_RCC_ClockConfig+0x35c>)
 80054ee:	5ccb      	ldrb	r3, [r1, r3]
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
 80054f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <HAL_RCC_ClockConfig+0x35c>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	4a0a      	ldr	r2, [pc, #40]	; (800553c <HAL_RCC_ClockConfig+0x360>)
 8005512:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x364>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_ClockConfig+0x368>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb ffb2 	bl	8001488 <HAL_InitTick>
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	58024400 	.word	0x58024400
 8005538:	0800d03c 	.word	0x0800d03c
 800553c:	24000004 	.word	0x24000004
 8005540:	24000000 	.word	0x24000000
 8005544:	24000008 	.word	0x24000008

08005548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800554e:	4bb3      	ldr	r3, [pc, #716]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005556:	2b18      	cmp	r3, #24
 8005558:	f200 8155 	bhi.w	8005806 <HAL_RCC_GetSysClockFreq+0x2be>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <HAL_RCC_GetSysClockFreq+0x1c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	080055c9 	.word	0x080055c9
 8005568:	08005807 	.word	0x08005807
 800556c:	08005807 	.word	0x08005807
 8005570:	08005807 	.word	0x08005807
 8005574:	08005807 	.word	0x08005807
 8005578:	08005807 	.word	0x08005807
 800557c:	08005807 	.word	0x08005807
 8005580:	08005807 	.word	0x08005807
 8005584:	080055ef 	.word	0x080055ef
 8005588:	08005807 	.word	0x08005807
 800558c:	08005807 	.word	0x08005807
 8005590:	08005807 	.word	0x08005807
 8005594:	08005807 	.word	0x08005807
 8005598:	08005807 	.word	0x08005807
 800559c:	08005807 	.word	0x08005807
 80055a0:	08005807 	.word	0x08005807
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	08005807 	.word	0x08005807
 80055ac:	08005807 	.word	0x08005807
 80055b0:	08005807 	.word	0x08005807
 80055b4:	08005807 	.word	0x08005807
 80055b8:	08005807 	.word	0x08005807
 80055bc:	08005807 	.word	0x08005807
 80055c0:	08005807 	.word	0x08005807
 80055c4:	080055fb 	.word	0x080055fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c8:	4b94      	ldr	r3, [pc, #592]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055d4:	4b91      	ldr	r3, [pc, #580]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	4a90      	ldr	r2, [pc, #576]	; (8005820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
 80055e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80055e6:	e111      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055e8:	4b8d      	ldr	r3, [pc, #564]	; (8005820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055ea:	61bb      	str	r3, [r7, #24]
    break;
 80055ec:	e10e      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80055ee:	4b8d      	ldr	r3, [pc, #564]	; (8005824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055f0:	61bb      	str	r3, [r7, #24]
    break;
 80055f2:	e10b      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80055f4:	4b8c      	ldr	r3, [pc, #560]	; (8005828 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80055f6:	61bb      	str	r3, [r7, #24]
    break;
 80055f8:	e108      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055fa:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005604:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005610:	4b82      	ldr	r3, [pc, #520]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800561a:	4b80      	ldr	r3, [pc, #512]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 80e1 	beq.w	8005800 <HAL_RCC_GetSysClockFreq+0x2b8>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b02      	cmp	r3, #2
 8005642:	f000 8083 	beq.w	800574c <HAL_RCC_GetSysClockFreq+0x204>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b02      	cmp	r3, #2
 800564a:	f200 80a1 	bhi.w	8005790 <HAL_RCC_GetSysClockFreq+0x248>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x114>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d056      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x1c0>
 800565a:	e099      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800565c:	4b6f      	ldr	r3, [pc, #444]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02d      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005668:	4b6c      	ldr	r3, [pc, #432]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	4a6b      	ldr	r2, [pc, #428]	; (8005820 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b62      	ldr	r3, [pc, #392]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800582c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80056c2:	e087      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005830 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b51      	ldr	r3, [pc, #324]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800582c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005706:	e065      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005834 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b40      	ldr	r3, [pc, #256]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a02 	vldr	s12, [r7, #8]
 800572e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800582c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800574a:	e043      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005838 <HAL_RCC_GetSysClockFreq+0x2f0>
 800575a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575e:	4b2f      	ldr	r3, [pc, #188]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005772:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800582c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800578e:	e021      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005834 <HAL_RCC_GetSysClockFreq+0x2ec>
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a2:	4b1e      	ldr	r3, [pc, #120]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800582c <HAL_RCC_GetSysClockFreq+0x2e4>
 80057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	3301      	adds	r3, #1
 80057e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f8:	ee17 3a90 	vmov	r3, s15
 80057fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80057fe:	e005      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	61bb      	str	r3, [r7, #24]
    break;
 8005804:	e002      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005808:	61bb      	str	r3, [r7, #24]
    break;
 800580a:	bf00      	nop
  }

  return sysclockfreq;
 800580c:	69bb      	ldr	r3, [r7, #24]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3724      	adds	r7, #36	; 0x24
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	003d0900 	.word	0x003d0900
 8005828:	007a1200 	.word	0x007a1200
 800582c:	46000000 	.word	0x46000000
 8005830:	4c742400 	.word	0x4c742400
 8005834:	4a742400 	.word	0x4a742400
 8005838:	4af42400 	.word	0x4af42400

0800583c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005842:	f7ff fe81 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8005846:	4602      	mov	r2, r0
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <HAL_RCC_GetHCLKFreq+0x50>)
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	0a1b      	lsrs	r3, r3, #8
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	490f      	ldr	r1, [pc, #60]	; (8005890 <HAL_RCC_GetHCLKFreq+0x54>)
 8005854:	5ccb      	ldrb	r3, [r1, r3]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	fa22 f303 	lsr.w	r3, r2, r3
 800585e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_RCC_GetHCLKFreq+0x50>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	4a09      	ldr	r2, [pc, #36]	; (8005890 <HAL_RCC_GetHCLKFreq+0x54>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	fa22 f303 	lsr.w	r3, r2, r3
 8005876:	4a07      	ldr	r2, [pc, #28]	; (8005894 <HAL_RCC_GetHCLKFreq+0x58>)
 8005878:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <HAL_RCC_GetHCLKFreq+0x5c>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <HAL_RCC_GetHCLKFreq+0x58>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	58024400 	.word	0x58024400
 8005890:	0800d03c 	.word	0x0800d03c
 8005894:	24000004 	.word	0x24000004
 8005898:	24000000 	.word	0x24000000

0800589c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058a0:	f7ff ffcc 	bl	800583c <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4904      	ldr	r1, [pc, #16]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	58024400 	.word	0x58024400
 80058c4:	0800d03c 	.word	0x0800d03c

080058c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058cc:	f7ff ffb6 	bl	800583c <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4904      	ldr	r1, [pc, #16]	; (80058f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	58024400 	.word	0x58024400
 80058f0:	0800d03c 	.word	0x0800d03c

080058f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005900:	2300      	movs	r3, #0
 8005902:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d03f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005918:	d02a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800591a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800591e:	d824      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005924:	d018      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800592a:	d81e      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005936:	e018      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4bab      	ldr	r3, [pc, #684]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	4aaa      	ldr	r2, [pc, #680]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005944:	e015      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	2102      	movs	r1, #2
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f9cf 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005956:	e00c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fa78 	bl	8006e54 <RCCEx_PLL3_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
      break;
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005978:	4b9b      	ldr	r3, [pc, #620]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005984:	4998      	ldr	r1, [pc, #608]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	650b      	str	r3, [r1, #80]	; 0x50
 800598a:	e001      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d03d      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d826      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059c1 	.word	0x080059c1
 80059b0:	080059cf 	.word	0x080059cf
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059f9 	.word	0x080059f9
 80059bc:	080059f9 	.word	0x080059f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c0:	4b89      	ldr	r3, [pc, #548]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a88      	ldr	r2, [pc, #544]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059cc:	e015      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f98b 	bl	8006cf0 <RCCEx_PLL2_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059de:	e00c      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fa34 	bl	8006e54 <RCCEx_PLL3_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059f0:	e003      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	e000      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80059f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a00:	4b79      	ldr	r3, [pc, #484]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	f023 0207 	bic.w	r2, r3, #7
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	4976      	ldr	r1, [pc, #472]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	650b      	str	r3, [r1, #80]	; 0x50
 8005a12:	e001      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d042      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2c:	d02b      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a32:	d825      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a34:	2bc0      	cmp	r3, #192	; 0xc0
 8005a36:	d028      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a38:	2bc0      	cmp	r3, #192	; 0xc0
 8005a3a:	d821      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d016      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d81d      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d007      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005a4c:	e018      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4e:	4b66      	ldr	r3, [pc, #408]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4a65      	ldr	r2, [pc, #404]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a5a:	e017      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f944 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a6c:	e00e      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3324      	adds	r3, #36	; 0x24
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f9ed 	bl	8006e54 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005a7e:	e005      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
      break;
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005a92:	4b55      	ldr	r3, [pc, #340]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	4952      	ldr	r1, [pc, #328]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8005aa4:	e001      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d049      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ac0:	d030      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ac6:	d82a      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005acc:	d02c      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005ace:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ad2:	d824      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad8:	d018      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ade:	d81e      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ae8:	d007      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005aea:	e018      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b3e      	ldr	r3, [pc, #248]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a3d      	ldr	r2, [pc, #244]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005af8:	e017      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 f8f5 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005b0a:	e00e      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f99e 	bl	8006e54 <RCCEx_PLL3_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b1c:	e005      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	75fb      	strb	r3, [r7, #23]
      break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b30:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b3e:	492a      	ldr	r1, [pc, #168]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	658b      	str	r3, [r1, #88]	; 0x58
 8005b44:	e001      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d04c      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b60:	d030      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b66:	d82a      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b72:	d824      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b78:	d018      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b7e:	d81e      	bhi.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b88:	d007      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b8a:	e018      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005b98:	e017      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 f8a5 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005baa:	e00e      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3324      	adds	r3, #36	; 0x24
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 f94e 	bl	8006e54 <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bbc:	e005      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005bc4:	bf00      	nop
 8005bc6:	e000      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10d      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bde:	4902      	ldr	r1, [pc, #8]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	658b      	str	r3, [r1, #88]	; 0x58
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d032      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c00:	2b30      	cmp	r3, #48	; 0x30
 8005c02:	d01c      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d817      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d00c      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d813      	bhi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d016      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d10f      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c18:	4baf      	ldr	r3, [pc, #700]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4aae      	ldr	r2, [pc, #696]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c24:	e00e      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 f85f 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005c36:	e005      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3c:	e002      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005c4a:	4ba3      	ldr	r3, [pc, #652]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	49a0      	ldr	r1, [pc, #640]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c5c:	e001      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d047      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c76:	d030      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7c:	d82a      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c82:	d02c      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005c84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c88:	d824      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	d018      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c94:	d81e      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9e:	d007      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005ca0:	e018      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca2:	4b8d      	ldr	r3, [pc, #564]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	4a8c      	ldr	r2, [pc, #560]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cae:	e017      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f81a 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cc0:	e00e      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3324      	adds	r3, #36	; 0x24
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f8c3 	bl	8006e54 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005cd2:	e005      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ce6:	4b7c      	ldr	r3, [pc, #496]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	4979      	ldr	r1, [pc, #484]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	650b      	str	r3, [r1, #80]	; 0x50
 8005cf8:	e001      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
 8005cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d049      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d12:	d02e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d18:	d828      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d1e:	d02a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d24:	d822      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d2a:	d026      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005d2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d30:	d81c      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d36:	d010      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3c:	d816      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01d      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d46:	d111      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ffce 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d58:	e012      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3324      	adds	r3, #36	; 0x24
 8005d5e:	2101      	movs	r1, #1
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f877 	bl	8006e54 <RCCEx_PLL3_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005d6a:	e009      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e006      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d72:	bf00      	nop
 8005d74:	e004      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d76:	bf00      	nop
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d86:	4b54      	ldr	r3, [pc, #336]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d92:	4951      	ldr	r1, [pc, #324]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	650b      	str	r3, [r1, #80]	; 0x50
 8005d98:	e001      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d04b      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db4:	d02e      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dba:	d828      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d02a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d822      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dcc:	d026      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005dd2:	d81c      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dd8:	d010      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dde:	d816      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01d      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de8:	d111      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 ff7d 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005dfa:	e012      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f826 	bl	8006e54 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005e0c:	e009      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e006      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e14:	bf00      	nop
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e36:	4928      	ldr	r1, [pc, #160]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	658b      	str	r3, [r1, #88]	; 0x58
 8005e3c:	e001      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02f      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e56:	d00e      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5c:	d814      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d015      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e66:	d10f      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 ff37 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	490d      	ldr	r1, [pc, #52]	; (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	650b      	str	r3, [r1, #80]	; 0x50
 8005ea8:	e001      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d033      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d81c      	bhi.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005ec2:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005f03 	.word	0x08005f03
 8005ecc:	08005edd 	.word	0x08005edd
 8005ed0:	08005eeb 	.word	0x08005eeb
 8005ed4:	08005f03 	.word	0x08005f03
 8005ed8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005edc:	4bb8      	ldr	r3, [pc, #736]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4ab7      	ldr	r2, [pc, #732]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ee8:	e00c      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fefd 	bl	8006cf0 <RCCEx_PLL2_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	75fb      	strb	r3, [r7, #23]
      break;
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f0a:	4bad      	ldr	r3, [pc, #692]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	f023 0203 	bic.w	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	49aa      	ldr	r1, [pc, #680]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f1c:	e001      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8086 	beq.w	800603c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f30:	4ba4      	ldr	r3, [pc, #656]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4aa3      	ldr	r2, [pc, #652]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f3c:	f7fb faee 	bl	800151c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f42:	e009      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f44:	f7fb faea 	bl	800151c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d902      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	75fb      	strb	r3, [r7, #23]
        break;
 8005f56:	e005      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f58:	4b9a      	ldr	r3, [pc, #616]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ef      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d166      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f6a:	4b95      	ldr	r3, [pc, #596]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f74:	4053      	eors	r3, r2
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d013      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f7e:	4b90      	ldr	r3, [pc, #576]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f88:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	4a8c      	ldr	r2, [pc, #560]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f94:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4a89      	ldr	r2, [pc, #548]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fa0:	4a87      	ldr	r2, [pc, #540]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb0:	d115      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7fb fab3 	bl	800151c <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fb8:	e00b      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fba:	f7fb faaf 	bl	800151c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d902      	bls.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	75fb      	strb	r3, [r7, #23]
            break;
 8005fd0:	e005      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0ed      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d126      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d10d      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ff4:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006002:	0919      	lsrs	r1, r3, #4
 8006004:	4b70      	ldr	r3, [pc, #448]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006006:	400b      	ands	r3, r1
 8006008:	496d      	ldr	r1, [pc, #436]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800600a:	4313      	orrs	r3, r2
 800600c:	610b      	str	r3, [r1, #16]
 800600e:	e005      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006010:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	4a6a      	ldr	r2, [pc, #424]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800601a:	6113      	str	r3, [r2, #16]
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800601e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602a:	4965      	ldr	r1, [pc, #404]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	670b      	str	r3, [r1, #112]	; 0x70
 8006030:	e004      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	75bb      	strb	r3, [r7, #22]
 8006036:	e001      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d07e      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800604c:	2b28      	cmp	r3, #40	; 0x28
 800604e:	d867      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	08006127 	.word	0x08006127
 800605c:	08006121 	.word	0x08006121
 8006060:	08006121 	.word	0x08006121
 8006064:	08006121 	.word	0x08006121
 8006068:	08006121 	.word	0x08006121
 800606c:	08006121 	.word	0x08006121
 8006070:	08006121 	.word	0x08006121
 8006074:	08006121 	.word	0x08006121
 8006078:	080060fd 	.word	0x080060fd
 800607c:	08006121 	.word	0x08006121
 8006080:	08006121 	.word	0x08006121
 8006084:	08006121 	.word	0x08006121
 8006088:	08006121 	.word	0x08006121
 800608c:	08006121 	.word	0x08006121
 8006090:	08006121 	.word	0x08006121
 8006094:	08006121 	.word	0x08006121
 8006098:	0800610f 	.word	0x0800610f
 800609c:	08006121 	.word	0x08006121
 80060a0:	08006121 	.word	0x08006121
 80060a4:	08006121 	.word	0x08006121
 80060a8:	08006121 	.word	0x08006121
 80060ac:	08006121 	.word	0x08006121
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006121 	.word	0x08006121
 80060b8:	08006127 	.word	0x08006127
 80060bc:	08006121 	.word	0x08006121
 80060c0:	08006121 	.word	0x08006121
 80060c4:	08006121 	.word	0x08006121
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006121 	.word	0x08006121
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006121 	.word	0x08006121
 80060d8:	08006127 	.word	0x08006127
 80060dc:	08006121 	.word	0x08006121
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
 80060e8:	08006121 	.word	0x08006121
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006121 	.word	0x08006121
 80060f4:	08006121 	.word	0x08006121
 80060f8:	08006127 	.word	0x08006127
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fdf4 	bl	8006cf0 <RCCEx_PLL2_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800610c:	e00c      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3324      	adds	r3, #36	; 0x24
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fe9d 	bl	8006e54 <RCCEx_PLL3_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]
      break;
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613a:	4921      	ldr	r1, [pc, #132]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	654b      	str	r3, [r1, #84]	; 0x54
 8006140:	e001      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03e      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	2b05      	cmp	r3, #5
 8006158:	d820      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061a3 	.word	0x080061a3
 8006164:	08006179 	.word	0x08006179
 8006168:	0800618b 	.word	0x0800618b
 800616c:	080061a3 	.word	0x080061a3
 8006170:	080061a3 	.word	0x080061a3
 8006174:	080061a3 	.word	0x080061a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3304      	adds	r3, #4
 800617c:	2101      	movs	r1, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fdb6 	bl	8006cf0 <RCCEx_PLL2_Config>
 8006184:	4603      	mov	r3, r0
 8006186:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006188:	e00c      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3324      	adds	r3, #36	; 0x24
 800618e:	2101      	movs	r1, #1
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fe5f 	bl	8006e54 <RCCEx_PLL3_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800619a:	e003      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
      break;
 80061a0:	e000      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80061a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d110      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	f023 0207 	bic.w	r2, r3, #7
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b6:	4902      	ldr	r1, [pc, #8]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	654b      	str	r3, [r1, #84]	; 0x54
 80061bc:	e008      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	58024800 	.word	0x58024800
 80061c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d039      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d820      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	0800622f 	.word	0x0800622f
 80061f0:	08006205 	.word	0x08006205
 80061f4:	08006217 	.word	0x08006217
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fd70 	bl	8006cf0 <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006214:	e00c      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2101      	movs	r1, #1
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fe19 	bl	8006e54 <RCCEx_PLL3_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	e000      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800622e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006236:	4bb7      	ldr	r3, [pc, #732]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	f023 0207 	bic.w	r2, r3, #7
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	49b3      	ldr	r1, [pc, #716]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006246:	4313      	orrs	r3, r2
 8006248:	658b      	str	r3, [r1, #88]	; 0x58
 800624a:	e001      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d04b      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006266:	d02e      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800626c:	d828      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006272:	d02a      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d822      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800627a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800627e:	d026      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006284:	d81c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628a:	d010      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800628c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006290:	d816      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01d      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800629a:	d111      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fd24 	bl	8006cf0 <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062ac:	e012      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3324      	adds	r3, #36	; 0x24
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fdcd 	bl	8006e54 <RCCEx_PLL3_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80062be:	e009      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	75fb      	strb	r3, [r7, #23]
      break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80062c6:	bf00      	nop
 80062c8:	e004      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80062d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062da:	4b8e      	ldr	r3, [pc, #568]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e8:	498a      	ldr	r1, [pc, #552]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	654b      	str	r3, [r1, #84]	; 0x54
 80062ee:	e001      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d04b      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006306:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800630a:	d02e      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800630c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006310:	d828      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d02a      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d822      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800631e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006322:	d026      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006328:	d81c      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632e:	d010      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d816      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01d      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633e:	d111      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fcd2 	bl	8006cf0 <RCCEx_PLL2_Config>
 800634c:	4603      	mov	r3, r0
 800634e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006350:	e012      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fd7b 	bl	8006e54 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006362:	e009      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e006      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800636e:	bf00      	nop
 8006370:	e002      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800637e:	4b65      	ldr	r3, [pc, #404]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800638c:	4961      	ldr	r1, [pc, #388]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800638e:	4313      	orrs	r3, r2
 8006390:	658b      	str	r3, [r1, #88]	; 0x58
 8006392:	e001      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d04b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063ae:	d02e      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80063b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80063b4:	d828      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80063b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ba:	d02a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c0:	d822      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80063c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063c6:	d026      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80063c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063cc:	d81c      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d2:	d010      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d8:	d816      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01d      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80063de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e2:	d111      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fc80 	bl	8006cf0 <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80063f4:	e012      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3324      	adds	r3, #36	; 0x24
 80063fa:	2102      	movs	r1, #2
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fd29 	bl	8006e54 <RCCEx_PLL3_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006406:	e009      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	75fb      	strb	r3, [r7, #23]
      break;
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800641a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006422:	4b3c      	ldr	r3, [pc, #240]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006430:	4938      	ldr	r1, [pc, #224]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006432:	4313      	orrs	r3, r2
 8006434:	658b      	str	r3, [r1, #88]	; 0x58
 8006436:	e001      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006452:	d10a      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fcfa 	bl	8006e54 <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006478:	4926      	ldr	r1, [pc, #152]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800647a:	4313      	orrs	r3, r2
 800647c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006494:	d10a      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3324      	adds	r3, #36	; 0x24
 800649a:	2102      	movs	r1, #2
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fcd9 	bl	8006e54 <RCCEx_PLL3_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064ac:	4b19      	ldr	r3, [pc, #100]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ba:	4916      	ldr	r1, [pc, #88]	; (8006514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d036      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064d6:	d01f      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80064d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064dc:	d817      	bhi.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d009      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80064e8:	e011      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3304      	adds	r3, #4
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fbfd 	bl	8006cf0 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80064fa:	e00e      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3324      	adds	r3, #36	; 0x24
 8006500:	2102      	movs	r1, #2
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fca6 	bl	8006e54 <RCCEx_PLL3_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800650c:	e005      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
      break;
 8006512:	e002      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006514:	58024400 	.word	0x58024400
      break;
 8006518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006520:	4b93      	ldr	r3, [pc, #588]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800652e:	4990      	ldr	r1, [pc, #576]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006530:	4313      	orrs	r3, r2
 8006532:	658b      	str	r3, [r1, #88]	; 0x58
 8006534:	e001      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d033      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006550:	d01c      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006556:	d816      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655c:	d003      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800655e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006562:	d007      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006564:	e00f      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006566:	4b82      	ldr	r3, [pc, #520]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a81      	ldr	r2, [pc, #516]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800656c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006572:	e00c      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc6a 	bl	8006e54 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	e000      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800658c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006594:	4b76      	ldr	r3, [pc, #472]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a2:	4973      	ldr	r1, [pc, #460]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	654b      	str	r3, [r1, #84]	; 0x54
 80065a8:	e001      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d029      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80065c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c6:	d007      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80065c8:	e00f      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ca:	4b69      	ldr	r3, [pc, #420]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4a68      	ldr	r2, [pc, #416]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065d6:	e00b      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3304      	adds	r3, #4
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fb86 	bl	8006cf0 <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
      break;
 80065ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80065f6:	4b5e      	ldr	r3, [pc, #376]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006602:	495b      	ldr	r1, [pc, #364]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006604:	4313      	orrs	r3, r2
 8006606:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006608:	e001      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3324      	adds	r3, #36	; 0x24
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc17 	bl	8006e54 <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d030      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006644:	d017      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d811      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800664c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006650:	d013      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d80b      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800665c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006662:	4b43      	ldr	r3, [pc, #268]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	4a42      	ldr	r2, [pc, #264]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800666c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800666e:	e007      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	75fb      	strb	r3, [r7, #23]
      break;
 8006674:	e004      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006676:	bf00      	nop
 8006678:	e002      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800667e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006686:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006692:	4937      	ldr	r1, [pc, #220]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	654b      	str	r3, [r1, #84]	; 0x54
 8006698:	e001      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	492e      	ldr	r1, [pc, #184]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d009      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066c8:	4b29      	ldr	r3, [pc, #164]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066d6:	4926      	ldr	r1, [pc, #152]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066e8:	4b21      	ldr	r3, [pc, #132]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f4:	491e      	ldr	r1, [pc, #120]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006710:	6113      	str	r3, [r2, #16]
 8006712:	4b17      	ldr	r3, [pc, #92]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800671c:	4914      	ldr	r1, [pc, #80]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	da08      	bge.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800672a:	4b11      	ldr	r3, [pc, #68]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800672c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006736:	490e      	ldr	r1, [pc, #56]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	4906      	ldr	r1, [pc, #24]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800675c:	7dbb      	ldrb	r3, [r7, #22]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	58024400 	.word	0x58024400

08006774 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006778:	f7ff f860 	bl	800583c <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4904      	ldr	r1, [pc, #16]	; (800679c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	f003 031f 	and.w	r3, r3, #31
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006794:	4618      	mov	r0, r3
 8006796:	bd80      	pop	{r7, pc}
 8006798:	58024400 	.word	0x58024400
 800679c:	0800d03c 	.word	0x0800d03c

080067a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	; 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067a8:	4ba1      	ldr	r3, [pc, #644]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80067b2:	4b9f      	ldr	r3, [pc, #636]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	0b1b      	lsrs	r3, r3, #12
 80067b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067be:	4b9c      	ldr	r3, [pc, #624]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	091b      	lsrs	r3, r3, #4
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80067ca:	4b99      	ldr	r3, [pc, #612]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	fb02 f303 	mul.w	r3, r2, r3
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8111 	beq.w	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	f000 8083 	beq.w	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	f200 80a1 	bhi.w	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d056      	beq.n	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800680a:	e099      	b.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800680c:	4b88      	ldr	r3, [pc, #544]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d02d      	beq.n	8006874 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006818:	4b85      	ldr	r3, [pc, #532]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	4a84      	ldr	r2, [pc, #528]	; (8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
 8006828:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006842:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006852:	ed97 6a03 	vldr	s12, [r7, #12]
 8006856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006872:	e087      	b.n	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b6a      	ldr	r3, [pc, #424]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006896:	ed97 6a03 	vldr	s12, [r7, #12]
 800689a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068b6:	e065      	b.n	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b59      	ldr	r3, [pc, #356]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068fa:	e043      	b.n	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b48      	ldr	r3, [pc, #288]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800693e:	e021      	b.n	8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800694e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006952:	4b37      	ldr	r3, [pc, #220]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006962:	ed97 6a03 	vldr	s12, [r7, #12]
 8006966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800696a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006982:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006984:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	0a5b      	lsrs	r3, r3, #9
 800698a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800699a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800699e:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069aa:	ee17 2a90 	vmov	r2, s15
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80069b2:	4b1f      	ldr	r3, [pc, #124]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069bc:	ee07 3a90 	vmov	s15, r3
 80069c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069d8:	ee17 2a90 	vmov	r2, s15
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80069e0:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	0e1b      	lsrs	r3, r3, #24
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80069fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a06:	ee17 2a90 	vmov	r2, s15
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a0e:	e008      	b.n	8006a22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	609a      	str	r2, [r3, #8]
}
 8006a22:	bf00      	nop
 8006a24:	3724      	adds	r7, #36	; 0x24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	03d09000 	.word	0x03d09000
 8006a38:	46000000 	.word	0x46000000
 8006a3c:	4c742400 	.word	0x4c742400
 8006a40:	4a742400 	.word	0x4a742400
 8006a44:	4af42400 	.word	0x4af42400

08006a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b089      	sub	sp, #36	; 0x24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a50:	4ba1      	ldr	r3, [pc, #644]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a5a:	4b9f      	ldr	r3, [pc, #636]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	0d1b      	lsrs	r3, r3, #20
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a66:	4b9c      	ldr	r3, [pc, #624]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a72:	4b99      	ldr	r3, [pc, #612]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	08db      	lsrs	r3, r3, #3
 8006a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8111 	beq.w	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f000 8083 	beq.w	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	f200 80a1 	bhi.w	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d056      	beq.n	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ab2:	e099      	b.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab4:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d02d      	beq.n	8006b1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ac0:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	4a84      	ldr	r2, [pc, #528]	; (8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b1a:	e087      	b.n	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b6a      	ldr	r3, [pc, #424]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b5e:	e065      	b.n	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ba2:	e043      	b.n	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b48      	ldr	r3, [pc, #288]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006be6:	e021      	b.n	8006c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c2c:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	0a5b      	lsrs	r3, r3, #9
 8006c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c52:	ee17 2a90 	vmov	r2, s15
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c5a:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	0c1b      	lsrs	r3, r3, #16
 8006c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c80:	ee17 2a90 	vmov	r2, s15
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c88:	4b13      	ldr	r3, [pc, #76]	; (8006cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	0e1b      	lsrs	r3, r3, #24
 8006c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cae:	ee17 2a90 	vmov	r2, s15
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cb6:	e008      	b.n	8006cca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
}
 8006cca:	bf00      	nop
 8006ccc:	3724      	adds	r7, #36	; 0x24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
 8006cdc:	03d09000 	.word	0x03d09000
 8006ce0:	46000000 	.word	0x46000000
 8006ce4:	4c742400 	.word	0x4c742400
 8006ce8:	4a742400 	.word	0x4a742400
 8006cec:	4af42400 	.word	0x4af42400

08006cf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cfe:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d101      	bne.n	8006d0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e099      	b.n	8006e42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d0e:	4b4f      	ldr	r3, [pc, #316]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a4e      	ldr	r2, [pc, #312]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1a:	f7fa fbff 	bl	800151c <HAL_GetTick>
 8006d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d20:	e008      	b.n	8006d34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d22:	f7fa fbfb 	bl	800151c <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e086      	b.n	8006e42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d34:	4b45      	ldr	r3, [pc, #276]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f0      	bne.n	8006d22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d40:	4b42      	ldr	r3, [pc, #264]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	031b      	lsls	r3, r3, #12
 8006d4e:	493f      	ldr	r1, [pc, #252]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	628b      	str	r3, [r1, #40]	; 0x28
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	025b      	lsls	r3, r3, #9
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	061b      	lsls	r3, r3, #24
 8006d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d84:	4931      	ldr	r1, [pc, #196]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d8a:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	492d      	ldr	r1, [pc, #180]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d9c:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	f023 0220 	bic.w	r2, r3, #32
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	4928      	ldr	r1, [pc, #160]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dae:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006db4:	f023 0310 	bic.w	r3, r3, #16
 8006db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dba:	4b24      	ldr	r3, [pc, #144]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <RCCEx_PLL2_Config+0x160>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	69d2      	ldr	r2, [r2, #28]
 8006dc6:	00d2      	lsls	r2, r2, #3
 8006dc8:	4920      	ldr	r1, [pc, #128]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006dce:	4b1f      	ldr	r3, [pc, #124]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006dd4:	f043 0310 	orr.w	r3, r3, #16
 8006dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006de0:	4b1a      	ldr	r3, [pc, #104]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a19      	ldr	r2, [pc, #100]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dec:	e00f      	b.n	8006e0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d106      	bne.n	8006e02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006df4:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e00:	e005      	b.n	8006e0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	4a11      	ldr	r2, [pc, #68]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a0e      	ldr	r2, [pc, #56]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1a:	f7fa fb7f 	bl	800151c <HAL_GetTick>
 8006e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e20:	e008      	b.n	8006e34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e22:	f7fa fb7b 	bl	800151c <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e006      	b.n	8006e42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <RCCEx_PLL2_Config+0x15c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	ffff0007 	.word	0xffff0007

08006e54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e62:	4b53      	ldr	r3, [pc, #332]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d101      	bne.n	8006e72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e099      	b.n	8006fa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e72:	4b4f      	ldr	r3, [pc, #316]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a4e      	ldr	r2, [pc, #312]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7e:	f7fa fb4d 	bl	800151c <HAL_GetTick>
 8006e82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e84:	e008      	b.n	8006e98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e86:	f7fa fb49 	bl	800151c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e086      	b.n	8006fa6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e98:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1f0      	bne.n	8006e86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ea4:	4b42      	ldr	r3, [pc, #264]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	051b      	lsls	r3, r3, #20
 8006eb2:	493f      	ldr	r1, [pc, #252]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	025b      	lsls	r3, r3, #9
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ee8:	4931      	ldr	r1, [pc, #196]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006eee:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	492d      	ldr	r1, [pc, #180]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f00:	4b2b      	ldr	r3, [pc, #172]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	4928      	ldr	r1, [pc, #160]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f12:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f1e:	4b24      	ldr	r3, [pc, #144]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <RCCEx_PLL3_Config+0x160>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	69d2      	ldr	r2, [r2, #28]
 8006f2a:	00d2      	lsls	r2, r2, #3
 8006f2c:	4920      	ldr	r1, [pc, #128]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f32:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f50:	e00f      	b.n	8006f72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d106      	bne.n	8006f66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f58:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	4a14      	ldr	r2, [pc, #80]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f64:	e005      	b.n	8006f72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a0e      	ldr	r2, [pc, #56]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7e:	f7fa facd 	bl	800151c <HAL_GetTick>
 8006f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f84:	e008      	b.n	8006f98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f86:	f7fa fac9 	bl	800151c <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e006      	b.n	8006fa6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f98:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	ffff0007 	.word	0xffff0007

08006fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e042      	b.n	8007050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fa f86b 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	; 0x24
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fbe2 	bl	80077c4 <UART_SetConfig>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e022      	b.n	8007050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f936 	bl	8008284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f9bd 	bl	80083c8 <UART_CheckIdleState>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706e:	2b20      	cmp	r3, #32
 8007070:	f040 8083 	bne.w	800717a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_UART_Transmit+0x28>
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e07b      	b.n	800717c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_UART_Transmit+0x3a>
 800708e:	2302      	movs	r3, #2
 8007090:	e074      	b.n	800717c <HAL_UART_Transmit+0x124>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2221      	movs	r2, #33	; 0x21
 80070a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070aa:	f7fa fa37 	bl	800151c <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	88fa      	ldrh	r2, [r7, #6]
 80070b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	88fa      	ldrh	r2, [r7, #6]
 80070bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d108      	bne.n	80070dc <HAL_UART_Transmit+0x84>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e003      	b.n	80070e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80070ec:	e02c      	b.n	8007148 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f001 f9b0 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e039      	b.n	800717c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	3302      	adds	r3, #2
 8007122:	61bb      	str	r3, [r7, #24]
 8007124:	e007      	b.n	8007136 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1cc      	bne.n	80070ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	2140      	movs	r1, #64	; 0x40
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f001 f97d 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e006      	b.n	800717c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e000      	b.n	800717c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
  }
}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007198:	2b20      	cmp	r3, #32
 800719a:	d131      	bne.n	8007200 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Receive_IT+0x24>
 80071a2:	88fb      	ldrh	r3, [r7, #6]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e02a      	b.n	8007202 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_UART_Receive_IT+0x36>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e023      	b.n	8007202 <HAL_UART_Receive_IT+0x7e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0f      	ldr	r2, [pc, #60]	; (800720c <HAL_UART_Receive_IT+0x88>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00e      	beq.n	80071f0 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80071ee:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f001 f9b2 	bl	8008560 <UART_Start_Receive_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	e000      	b.n	8007202 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
  }
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	58000c00 	.word	0x58000c00

08007210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	f640 030f 	movw	r3, #2063	; 0x80f
 8007236:	4013      	ands	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d118      	bne.n	8007272 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d013      	beq.n	8007272 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8282 	beq.w	800776c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
      }
      return;
 8007270:	e27c      	b.n	800776c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80ef 	beq.w	8007458 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4b73      	ldr	r3, [pc, #460]	; (800744c <HAL_UART_IRQHandler+0x23c>)
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4b72      	ldr	r3, [pc, #456]	; (8007450 <HAL_UART_IRQHandler+0x240>)
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 80e4 	beq.w	8007458 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <HAL_UART_IRQHandler+0xac>
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2201      	movs	r2, #1
 80072aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072b2:	f043 0201 	orr.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <HAL_UART_IRQHandler+0xd8>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2202      	movs	r2, #2
 80072d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072de:	f043 0204 	orr.w	r2, r3, #4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d010      	beq.n	8007314 <HAL_UART_IRQHandler+0x104>
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2204      	movs	r2, #4
 8007302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730a:	f043 0202 	orr.w	r2, r3, #2
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d015      	beq.n	800734a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4b48      	ldr	r3, [pc, #288]	; (800744c <HAL_UART_IRQHandler+0x23c>)
 800732c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00b      	beq.n	800734a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2208      	movs	r2, #8
 8007338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007340:	f043 0208 	orr.w	r2, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007350:	2b00      	cmp	r3, #0
 8007352:	d011      	beq.n	8007378 <HAL_UART_IRQHandler+0x168>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736e:	f043 0220 	orr.w	r2, r3, #32
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 81f6 	beq.w	8007770 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d004      	beq.n	80073d2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d031      	beq.n	8007436 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 f982 	bl	80086dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d123      	bne.n	800742e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d013      	beq.n	8007426 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007402:	4a14      	ldr	r2, [pc, #80]	; (8007454 <HAL_UART_IRQHandler+0x244>)
 8007404:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740a:	4618      	mov	r0, r3
 800740c:	f7fa fd04 	bl	8001e18 <HAL_DMA_Abort_IT>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d017      	beq.n	8007446 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e00f      	b.n	8007446 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9b6 	bl	8007798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	e00b      	b.n	8007446 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9b2 	bl	8007798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	e007      	b.n	8007446 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9ae 	bl	8007798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007444:	e194      	b.n	8007770 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007446:	bf00      	nop
    return;
 8007448:	e192      	b.n	8007770 <HAL_UART_IRQHandler+0x560>
 800744a:	bf00      	nop
 800744c:	10000001 	.word	0x10000001
 8007450:	04000120 	.word	0x04000120
 8007454:	08008741 	.word	0x08008741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745c:	2b01      	cmp	r3, #1
 800745e:	f040 810f 	bne.w	8007680 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8109 	beq.w	8007680 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8103 	beq.w	8007680 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2210      	movs	r2, #16
 8007480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	f040 80bb 	bne.w	8007608 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a96      	ldr	r2, [pc, #600]	; (80076f4 <HAL_UART_IRQHandler+0x4e4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d059      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a94      	ldr	r2, [pc, #592]	; (80076f8 <HAL_UART_IRQHandler+0x4e8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d053      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a92      	ldr	r2, [pc, #584]	; (80076fc <HAL_UART_IRQHandler+0x4ec>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04d      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a90      	ldr	r2, [pc, #576]	; (8007700 <HAL_UART_IRQHandler+0x4f0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d047      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a8e      	ldr	r2, [pc, #568]	; (8007704 <HAL_UART_IRQHandler+0x4f4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d041      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a8c      	ldr	r2, [pc, #560]	; (8007708 <HAL_UART_IRQHandler+0x4f8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d03b      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a8a      	ldr	r2, [pc, #552]	; (800770c <HAL_UART_IRQHandler+0x4fc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d035      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a88      	ldr	r2, [pc, #544]	; (8007710 <HAL_UART_IRQHandler+0x500>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02f      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a86      	ldr	r2, [pc, #536]	; (8007714 <HAL_UART_IRQHandler+0x504>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d029      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a84      	ldr	r2, [pc, #528]	; (8007718 <HAL_UART_IRQHandler+0x508>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d023      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a82      	ldr	r2, [pc, #520]	; (800771c <HAL_UART_IRQHandler+0x50c>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d01d      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a80      	ldr	r2, [pc, #512]	; (8007720 <HAL_UART_IRQHandler+0x510>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d017      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a7e      	ldr	r2, [pc, #504]	; (8007724 <HAL_UART_IRQHandler+0x514>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d011      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a7c      	ldr	r2, [pc, #496]	; (8007728 <HAL_UART_IRQHandler+0x518>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7a      	ldr	r2, [pc, #488]	; (800772c <HAL_UART_IRQHandler+0x51c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d005      	beq.n	8007552 <HAL_UART_IRQHandler+0x342>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a78      	ldr	r2, [pc, #480]	; (8007730 <HAL_UART_IRQHandler+0x520>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d105      	bne.n	800755e <HAL_UART_IRQHandler+0x34e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b29b      	uxth	r3, r3
 800755c:	e004      	b.n	8007568 <HAL_UART_IRQHandler+0x358>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	b29b      	uxth	r3, r3
 8007568:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8101 	beq.w	8007774 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007578:	893a      	ldrh	r2, [r7, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	f080 80fa 	bcs.w	8007774 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	893a      	ldrh	r2, [r7, #8]
 8007584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	d02b      	beq.n	80075ec <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075a2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0210 	bic.w	r2, r2, #16
 80075e0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fa f8f8 	bl	80017dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f8d3 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007606:	e0b5      	b.n	8007774 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007614:	b29b      	uxth	r3, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80a8 	beq.w	8007778 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8007628:	897b      	ldrh	r3, [r7, #10]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a4 	beq.w	8007778 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800763e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6899      	ldr	r1, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b3a      	ldr	r3, [pc, #232]	; (8007734 <HAL_UART_IRQHandler+0x524>)
 800764c:	400b      	ands	r3, r1
 800764e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0210 	bic.w	r2, r2, #16
 8007672:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007674:	897b      	ldrh	r3, [r7, #10]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f897 	bl	80077ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800767e:	e07b      	b.n	8007778 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <HAL_UART_IRQHandler+0x496>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d008      	beq.n	80076a6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800769c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fb5a 	bl	8008d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076a4:	e06b      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d012      	beq.n	80076d6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d057      	beq.n	800777c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
    }
    return;
 80076d4:	e052      	b.n	800777c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02b      	beq.n	8007738 <HAL_UART_IRQHandler+0x528>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d026      	beq.n	8007738 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f83e 	bl	800876c <UART_EndTransmit_IT>
    return;
 80076f0:	e045      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
 80076f2:	bf00      	nop
 80076f4:	40020010 	.word	0x40020010
 80076f8:	40020028 	.word	0x40020028
 80076fc:	40020040 	.word	0x40020040
 8007700:	40020058 	.word	0x40020058
 8007704:	40020070 	.word	0x40020070
 8007708:	40020088 	.word	0x40020088
 800770c:	400200a0 	.word	0x400200a0
 8007710:	400200b8 	.word	0x400200b8
 8007714:	40020410 	.word	0x40020410
 8007718:	40020428 	.word	0x40020428
 800771c:	40020440 	.word	0x40020440
 8007720:	40020458 	.word	0x40020458
 8007724:	40020470 	.word	0x40020470
 8007728:	40020488 	.word	0x40020488
 800772c:	400204a0 	.word	0x400204a0
 8007730:	400204b8 	.word	0x400204b8
 8007734:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <HAL_UART_IRQHandler+0x544>
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fb17 	bl	8008d80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007752:	e014      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00f      	beq.n	800777e <HAL_UART_IRQHandler+0x56e>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0c      	bge.n	800777e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fb01 	bl	8008d6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800776a:	e008      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
      return;
 800776c:	bf00      	nop
 800776e:	e006      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
    return;
 8007770:	bf00      	nop
 8007772:	e004      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
      return;
 8007774:	bf00      	nop
 8007776:	e002      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
      return;
 8007778:	bf00      	nop
 800777a:	e000      	b.n	800777e <HAL_UART_IRQHandler+0x56e>
    return;
 800777c:	bf00      	nop
  }
}
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	b5b0      	push	{r4, r5, r7, lr}
 80077c6:	b08e      	sub	sp, #56	; 0x38
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4bbf      	ldr	r3, [pc, #764]	; (8007af0 <UART_SetConfig+0x32c>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4ab5      	ldr	r2, [pc, #724]	; (8007af4 <UART_SetConfig+0x330>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800782a:	4313      	orrs	r3, r2
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	4bb0      	ldr	r3, [pc, #704]	; (8007af8 <UART_SetConfig+0x334>)
 8007836:	4013      	ands	r3, r2
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800783e:	430b      	orrs	r3, r1
 8007840:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f023 010f 	bic.w	r1, r3, #15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4aa7      	ldr	r2, [pc, #668]	; (8007afc <UART_SetConfig+0x338>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d176      	bne.n	8007950 <UART_SetConfig+0x18c>
 8007862:	4ba7      	ldr	r3, [pc, #668]	; (8007b00 <UART_SetConfig+0x33c>)
 8007864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800786a:	2b28      	cmp	r3, #40	; 0x28
 800786c:	d86c      	bhi.n	8007948 <UART_SetConfig+0x184>
 800786e:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0xb0>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	08007919 	.word	0x08007919
 8007878:	08007949 	.word	0x08007949
 800787c:	08007949 	.word	0x08007949
 8007880:	08007949 	.word	0x08007949
 8007884:	08007949 	.word	0x08007949
 8007888:	08007949 	.word	0x08007949
 800788c:	08007949 	.word	0x08007949
 8007890:	08007949 	.word	0x08007949
 8007894:	08007921 	.word	0x08007921
 8007898:	08007949 	.word	0x08007949
 800789c:	08007949 	.word	0x08007949
 80078a0:	08007949 	.word	0x08007949
 80078a4:	08007949 	.word	0x08007949
 80078a8:	08007949 	.word	0x08007949
 80078ac:	08007949 	.word	0x08007949
 80078b0:	08007949 	.word	0x08007949
 80078b4:	08007929 	.word	0x08007929
 80078b8:	08007949 	.word	0x08007949
 80078bc:	08007949 	.word	0x08007949
 80078c0:	08007949 	.word	0x08007949
 80078c4:	08007949 	.word	0x08007949
 80078c8:	08007949 	.word	0x08007949
 80078cc:	08007949 	.word	0x08007949
 80078d0:	08007949 	.word	0x08007949
 80078d4:	08007931 	.word	0x08007931
 80078d8:	08007949 	.word	0x08007949
 80078dc:	08007949 	.word	0x08007949
 80078e0:	08007949 	.word	0x08007949
 80078e4:	08007949 	.word	0x08007949
 80078e8:	08007949 	.word	0x08007949
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007949 	.word	0x08007949
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007949 	.word	0x08007949
 80078fc:	08007949 	.word	0x08007949
 8007900:	08007949 	.word	0x08007949
 8007904:	08007949 	.word	0x08007949
 8007908:	08007949 	.word	0x08007949
 800790c:	08007949 	.word	0x08007949
 8007910:	08007949 	.word	0x08007949
 8007914:	08007941 	.word	0x08007941
 8007918:	2301      	movs	r3, #1
 800791a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800791e:	e222      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007926:	e21e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792e:	e21a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007936:	e216      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007938:	2320      	movs	r3, #32
 800793a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793e:	e212      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007940:	2340      	movs	r3, #64	; 0x40
 8007942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007946:	e20e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007948:	2380      	movs	r3, #128	; 0x80
 800794a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800794e:	e20a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a6b      	ldr	r2, [pc, #428]	; (8007b04 <UART_SetConfig+0x340>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d130      	bne.n	80079bc <UART_SetConfig+0x1f8>
 800795a:	4b69      	ldr	r3, [pc, #420]	; (8007b00 <UART_SetConfig+0x33c>)
 800795c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b05      	cmp	r3, #5
 8007964:	d826      	bhi.n	80079b4 <UART_SetConfig+0x1f0>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0x1a8>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007985 	.word	0x08007985
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007995 	.word	0x08007995
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079a5 	.word	0x080079a5
 8007980:	080079ad 	.word	0x080079ad
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800798a:	e1ec      	b.n	8007d66 <UART_SetConfig+0x5a2>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007992:	e1e8      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800799a:	e1e4      	b.n	8007d66 <UART_SetConfig+0x5a2>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079a2:	e1e0      	b.n	8007d66 <UART_SetConfig+0x5a2>
 80079a4:	2320      	movs	r3, #32
 80079a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079aa:	e1dc      	b.n	8007d66 <UART_SetConfig+0x5a2>
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079b2:	e1d8      	b.n	8007d66 <UART_SetConfig+0x5a2>
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ba:	e1d4      	b.n	8007d66 <UART_SetConfig+0x5a2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a51      	ldr	r2, [pc, #324]	; (8007b08 <UART_SetConfig+0x344>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d130      	bne.n	8007a28 <UART_SetConfig+0x264>
 80079c6:	4b4e      	ldr	r3, [pc, #312]	; (8007b00 <UART_SetConfig+0x33c>)
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d826      	bhi.n	8007a20 <UART_SetConfig+0x25c>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <UART_SetConfig+0x214>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a11 	.word	0x08007a11
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f6:	e1b6      	b.n	8007d66 <UART_SetConfig+0x5a2>
 80079f8:	2304      	movs	r3, #4
 80079fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fe:	e1b2      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a00:	2308      	movs	r3, #8
 8007a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a06:	e1ae      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0e:	e1aa      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a10:	2320      	movs	r3, #32
 8007a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a16:	e1a6      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	e1a2      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a26:	e19e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a37      	ldr	r2, [pc, #220]	; (8007b0c <UART_SetConfig+0x348>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d130      	bne.n	8007a94 <UART_SetConfig+0x2d0>
 8007a32:	4b33      	ldr	r3, [pc, #204]	; (8007b00 <UART_SetConfig+0x33c>)
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d826      	bhi.n	8007a8c <UART_SetConfig+0x2c8>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <UART_SetConfig+0x280>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a5d 	.word	0x08007a5d
 8007a48:	08007a65 	.word	0x08007a65
 8007a4c:	08007a6d 	.word	0x08007a6d
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a7d 	.word	0x08007a7d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a62:	e180      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6a:	e17c      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a72:	e178      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7a:	e174      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a82:	e170      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8a:	e16c      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a8c:	2380      	movs	r3, #128	; 0x80
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a92:	e168      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <UART_SetConfig+0x34c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d142      	bne.n	8007b24 <UART_SetConfig+0x360>
 8007a9e:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <UART_SetConfig+0x33c>)
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d838      	bhi.n	8007b1c <UART_SetConfig+0x358>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x2ec>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ace:	e14a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad6:	e146      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ade:	e142      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e13e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ae8:	2320      	movs	r3, #32
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	e13a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007af0:	cfff69f3 	.word	0xcfff69f3
 8007af4:	58000c00 	.word	0x58000c00
 8007af8:	11fff4ff 	.word	0x11fff4ff
 8007afc:	40011000 	.word	0x40011000
 8007b00:	58024400 	.word	0x58024400
 8007b04:	40004400 	.word	0x40004400
 8007b08:	40004800 	.word	0x40004800
 8007b0c:	40004c00 	.word	0x40004c00
 8007b10:	40005000 	.word	0x40005000
 8007b14:	2340      	movs	r3, #64	; 0x40
 8007b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b1a:	e124      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b22:	e120      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4acc      	ldr	r2, [pc, #816]	; (8007e5c <UART_SetConfig+0x698>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d176      	bne.n	8007c1c <UART_SetConfig+0x458>
 8007b2e:	4bcc      	ldr	r3, [pc, #816]	; (8007e60 <UART_SetConfig+0x69c>)
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b36:	2b28      	cmp	r3, #40	; 0x28
 8007b38:	d86c      	bhi.n	8007c14 <UART_SetConfig+0x450>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0x37c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007be5 	.word	0x08007be5
 8007b44:	08007c15 	.word	0x08007c15
 8007b48:	08007c15 	.word	0x08007c15
 8007b4c:	08007c15 	.word	0x08007c15
 8007b50:	08007c15 	.word	0x08007c15
 8007b54:	08007c15 	.word	0x08007c15
 8007b58:	08007c15 	.word	0x08007c15
 8007b5c:	08007c15 	.word	0x08007c15
 8007b60:	08007bed 	.word	0x08007bed
 8007b64:	08007c15 	.word	0x08007c15
 8007b68:	08007c15 	.word	0x08007c15
 8007b6c:	08007c15 	.word	0x08007c15
 8007b70:	08007c15 	.word	0x08007c15
 8007b74:	08007c15 	.word	0x08007c15
 8007b78:	08007c15 	.word	0x08007c15
 8007b7c:	08007c15 	.word	0x08007c15
 8007b80:	08007bf5 	.word	0x08007bf5
 8007b84:	08007c15 	.word	0x08007c15
 8007b88:	08007c15 	.word	0x08007c15
 8007b8c:	08007c15 	.word	0x08007c15
 8007b90:	08007c15 	.word	0x08007c15
 8007b94:	08007c15 	.word	0x08007c15
 8007b98:	08007c15 	.word	0x08007c15
 8007b9c:	08007c15 	.word	0x08007c15
 8007ba0:	08007bfd 	.word	0x08007bfd
 8007ba4:	08007c15 	.word	0x08007c15
 8007ba8:	08007c15 	.word	0x08007c15
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007c15 	.word	0x08007c15
 8007bb4:	08007c15 	.word	0x08007c15
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007c15 	.word	0x08007c15
 8007bc0:	08007c05 	.word	0x08007c05
 8007bc4:	08007c15 	.word	0x08007c15
 8007bc8:	08007c15 	.word	0x08007c15
 8007bcc:	08007c15 	.word	0x08007c15
 8007bd0:	08007c15 	.word	0x08007c15
 8007bd4:	08007c15 	.word	0x08007c15
 8007bd8:	08007c15 	.word	0x08007c15
 8007bdc:	08007c15 	.word	0x08007c15
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	2301      	movs	r3, #1
 8007be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bea:	e0bc      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bf2:	e0b8      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfa:	e0b4      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c02:	e0b0      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c04:	2320      	movs	r3, #32
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0a:	e0ac      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c12:	e0a8      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c1a:	e0a4      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a90      	ldr	r2, [pc, #576]	; (8007e64 <UART_SetConfig+0x6a0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d130      	bne.n	8007c88 <UART_SetConfig+0x4c4>
 8007c26:	4b8e      	ldr	r3, [pc, #568]	; (8007e60 <UART_SetConfig+0x69c>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d826      	bhi.n	8007c80 <UART_SetConfig+0x4bc>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x474>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007c69 	.word	0x08007c69
 8007c48:	08007c71 	.word	0x08007c71
 8007c4c:	08007c79 	.word	0x08007c79
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c56:	e086      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5e:	e082      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c66:	e07e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c6e:	e07a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c70:	2320      	movs	r3, #32
 8007c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c76:	e076      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c7e:	e072      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c86:	e06e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a76      	ldr	r2, [pc, #472]	; (8007e68 <UART_SetConfig+0x6a4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d130      	bne.n	8007cf4 <UART_SetConfig+0x530>
 8007c92:	4b73      	ldr	r3, [pc, #460]	; (8007e60 <UART_SetConfig+0x69c>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d826      	bhi.n	8007cec <UART_SetConfig+0x528>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x4e0>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cbd 	.word	0x08007cbd
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007ccd 	.word	0x08007ccd
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cc2:	e050      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cca:	e04c      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd2:	e048      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cda:	e044      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007cdc:	2320      	movs	r3, #32
 8007cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce2:	e040      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007ce4:	2340      	movs	r3, #64	; 0x40
 8007ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cea:	e03c      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007cec:	2380      	movs	r3, #128	; 0x80
 8007cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf2:	e038      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a5c      	ldr	r2, [pc, #368]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d130      	bne.n	8007d60 <UART_SetConfig+0x59c>
 8007cfe:	4b58      	ldr	r3, [pc, #352]	; (8007e60 <UART_SetConfig+0x69c>)
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d826      	bhi.n	8007d58 <UART_SetConfig+0x594>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <UART_SetConfig+0x54c>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d29 	.word	0x08007d29
 8007d14:	08007d31 	.word	0x08007d31
 8007d18:	08007d39 	.word	0x08007d39
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d49 	.word	0x08007d49
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d2e:	e01a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d36:	e016      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d3e:	e012      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d40:	2310      	movs	r3, #16
 8007d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d46:	e00e      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4e:	e00a      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e006      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e002      	b.n	8007d66 <UART_SetConfig+0x5a2>
 8007d60:	2380      	movs	r3, #128	; 0x80
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a40      	ldr	r2, [pc, #256]	; (8007e6c <UART_SetConfig+0x6a8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	f040 80ef 	bne.w	8007f50 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	dc46      	bgt.n	8007e08 <UART_SetConfig+0x644>
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	f2c0 8081 	blt.w	8007e82 <UART_SetConfig+0x6be>
 8007d80:	3b02      	subs	r3, #2
 8007d82:	2b1e      	cmp	r3, #30
 8007d84:	d87d      	bhi.n	8007e82 <UART_SetConfig+0x6be>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <UART_SetConfig+0x5c8>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007e0f 	.word	0x08007e0f
 8007d90:	08007e83 	.word	0x08007e83
 8007d94:	08007e17 	.word	0x08007e17
 8007d98:	08007e83 	.word	0x08007e83
 8007d9c:	08007e83 	.word	0x08007e83
 8007da0:	08007e83 	.word	0x08007e83
 8007da4:	08007e27 	.word	0x08007e27
 8007da8:	08007e83 	.word	0x08007e83
 8007dac:	08007e83 	.word	0x08007e83
 8007db0:	08007e83 	.word	0x08007e83
 8007db4:	08007e83 	.word	0x08007e83
 8007db8:	08007e83 	.word	0x08007e83
 8007dbc:	08007e83 	.word	0x08007e83
 8007dc0:	08007e83 	.word	0x08007e83
 8007dc4:	08007e37 	.word	0x08007e37
 8007dc8:	08007e83 	.word	0x08007e83
 8007dcc:	08007e83 	.word	0x08007e83
 8007dd0:	08007e83 	.word	0x08007e83
 8007dd4:	08007e83 	.word	0x08007e83
 8007dd8:	08007e83 	.word	0x08007e83
 8007ddc:	08007e83 	.word	0x08007e83
 8007de0:	08007e83 	.word	0x08007e83
 8007de4:	08007e83 	.word	0x08007e83
 8007de8:	08007e83 	.word	0x08007e83
 8007dec:	08007e83 	.word	0x08007e83
 8007df0:	08007e83 	.word	0x08007e83
 8007df4:	08007e83 	.word	0x08007e83
 8007df8:	08007e83 	.word	0x08007e83
 8007dfc:	08007e83 	.word	0x08007e83
 8007e00:	08007e83 	.word	0x08007e83
 8007e04:	08007e75 	.word	0x08007e75
 8007e08:	2b40      	cmp	r3, #64	; 0x40
 8007e0a:	d036      	beq.n	8007e7a <UART_SetConfig+0x6b6>
 8007e0c:	e039      	b.n	8007e82 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e0e:	f7fe fcb1 	bl	8006774 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007e14:	e03b      	b.n	8007e8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fcc0 	bl	80067a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e24:	e033      	b.n	8007e8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e26:	f107 0308 	add.w	r3, r7, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fe0c 	bl	8006a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e34:	e02b      	b.n	8007e8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <UART_SetConfig+0x69c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <UART_SetConfig+0x69c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	08db      	lsrs	r3, r3, #3
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <UART_SetConfig+0x6ac>)
 8007e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e54:	e01b      	b.n	8007e8e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007e56:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <UART_SetConfig+0x6ac>)
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e5a:	e018      	b.n	8007e8e <UART_SetConfig+0x6ca>
 8007e5c:	40011400 	.word	0x40011400
 8007e60:	58024400 	.word	0x58024400
 8007e64:	40007800 	.word	0x40007800
 8007e68:	40007c00 	.word	0x40007c00
 8007e6c:	58000c00 	.word	0x58000c00
 8007e70:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e74:	4bc4      	ldr	r3, [pc, #784]	; (8008188 <UART_SetConfig+0x9c4>)
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e78:	e009      	b.n	8007e8e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e80:	e005      	b.n	8007e8e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007e8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 81da 	beq.w	800824a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	4abc      	ldr	r2, [pc, #752]	; (800818c <UART_SetConfig+0x9c8>)
 8007e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	4413      	add	r3, r2
 8007eb4:	6a3a      	ldr	r2, [r7, #32]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d305      	bcc.n	8007ec6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec0:	6a3a      	ldr	r2, [r7, #32]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d903      	bls.n	8007ece <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ecc:	e1bd      	b.n	800824a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f04f 0100 	mov.w	r1, #0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	4aac      	ldr	r2, [pc, #688]	; (800818c <UART_SetConfig+0x9c8>)
 8007edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	f7f8 fa53 	bl	8000390 <__aeabi_uldivmod>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	020b      	lsls	r3, r1, #8
 8007efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f00:	0202      	lsls	r2, r0, #8
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	6849      	ldr	r1, [r1, #4]
 8007f06:	0849      	lsrs	r1, r1, #1
 8007f08:	4608      	mov	r0, r1
 8007f0a:	f04f 0100 	mov.w	r1, #0
 8007f0e:	1814      	adds	r4, r2, r0
 8007f10:	eb43 0501 	adc.w	r5, r3, r1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fa35 	bl	8000390 <__aeabi_uldivmod>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f34:	d308      	bcc.n	8007f48 <UART_SetConfig+0x784>
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f3c:	d204      	bcs.n	8007f48 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	e180      	b.n	800824a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007f4e:	e17c      	b.n	800824a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f58:	f040 80bf 	bne.w	80080da <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007f5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	dc49      	bgt.n	8007ff8 <UART_SetConfig+0x834>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	db7c      	blt.n	8008062 <UART_SetConfig+0x89e>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d87a      	bhi.n	8008062 <UART_SetConfig+0x89e>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <UART_SetConfig+0x7b0>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007fff 	.word	0x08007fff
 8007f78:	08008007 	.word	0x08008007
 8007f7c:	08008063 	.word	0x08008063
 8007f80:	08008063 	.word	0x08008063
 8007f84:	0800800f 	.word	0x0800800f
 8007f88:	08008063 	.word	0x08008063
 8007f8c:	08008063 	.word	0x08008063
 8007f90:	08008063 	.word	0x08008063
 8007f94:	0800801f 	.word	0x0800801f
 8007f98:	08008063 	.word	0x08008063
 8007f9c:	08008063 	.word	0x08008063
 8007fa0:	08008063 	.word	0x08008063
 8007fa4:	08008063 	.word	0x08008063
 8007fa8:	08008063 	.word	0x08008063
 8007fac:	08008063 	.word	0x08008063
 8007fb0:	08008063 	.word	0x08008063
 8007fb4:	0800802f 	.word	0x0800802f
 8007fb8:	08008063 	.word	0x08008063
 8007fbc:	08008063 	.word	0x08008063
 8007fc0:	08008063 	.word	0x08008063
 8007fc4:	08008063 	.word	0x08008063
 8007fc8:	08008063 	.word	0x08008063
 8007fcc:	08008063 	.word	0x08008063
 8007fd0:	08008063 	.word	0x08008063
 8007fd4:	08008063 	.word	0x08008063
 8007fd8:	08008063 	.word	0x08008063
 8007fdc:	08008063 	.word	0x08008063
 8007fe0:	08008063 	.word	0x08008063
 8007fe4:	08008063 	.word	0x08008063
 8007fe8:	08008063 	.word	0x08008063
 8007fec:	08008063 	.word	0x08008063
 8007ff0:	08008063 	.word	0x08008063
 8007ff4:	08008055 	.word	0x08008055
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d02e      	beq.n	800805a <UART_SetConfig+0x896>
 8007ffc:	e031      	b.n	8008062 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ffe:	f7fd fc4d 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8008002:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008004:	e033      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008006:	f7fd fc5f 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 800800a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800800c:	e02f      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fbc4 	bl	80067a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800801c:	e027      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fd10 	bl	8006a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800802c:	e01f      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802e:	4b58      	ldr	r3, [pc, #352]	; (8008190 <UART_SetConfig+0x9cc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800803a:	4b55      	ldr	r3, [pc, #340]	; (8008190 <UART_SetConfig+0x9cc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	4a53      	ldr	r2, [pc, #332]	; (8008194 <UART_SetConfig+0x9d0>)
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800804c:	e00f      	b.n	800806e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <UART_SetConfig+0x9d0>)
 8008050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008052:	e00c      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008054:	4b4c      	ldr	r3, [pc, #304]	; (8008188 <UART_SetConfig+0x9c4>)
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008058:	e009      	b.n	800806e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008060:	e005      	b.n	800806e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800806c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80ea 	beq.w	800824a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	4a44      	ldr	r2, [pc, #272]	; (800818c <UART_SetConfig+0x9c8>)
 800807c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008080:	461a      	mov	r2, r3
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	fbb3 f3f2 	udiv	r3, r3, r2
 8008088:	005a      	lsls	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	441a      	add	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	b29b      	uxth	r3, r3
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d916      	bls.n	80080d2 <UART_SetConfig+0x90e>
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080aa:	d212      	bcs.n	80080d2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f023 030f 	bic.w	r3, r3, #15
 80080b4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080c4:	4313      	orrs	r3, r2
 80080c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080ce:	60da      	str	r2, [r3, #12]
 80080d0:	e0bb      	b.n	800824a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80080d8:	e0b7      	b.n	800824a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080de:	2b20      	cmp	r3, #32
 80080e0:	dc4a      	bgt.n	8008178 <UART_SetConfig+0x9b4>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f2c0 8086 	blt.w	80081f4 <UART_SetConfig+0xa30>
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	f200 8083 	bhi.w	80081f4 <UART_SetConfig+0xa30>
 80080ee:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <UART_SetConfig+0x930>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	0800817f 	.word	0x0800817f
 80080f8:	08008199 	.word	0x08008199
 80080fc:	080081f5 	.word	0x080081f5
 8008100:	080081f5 	.word	0x080081f5
 8008104:	080081a1 	.word	0x080081a1
 8008108:	080081f5 	.word	0x080081f5
 800810c:	080081f5 	.word	0x080081f5
 8008110:	080081f5 	.word	0x080081f5
 8008114:	080081b1 	.word	0x080081b1
 8008118:	080081f5 	.word	0x080081f5
 800811c:	080081f5 	.word	0x080081f5
 8008120:	080081f5 	.word	0x080081f5
 8008124:	080081f5 	.word	0x080081f5
 8008128:	080081f5 	.word	0x080081f5
 800812c:	080081f5 	.word	0x080081f5
 8008130:	080081f5 	.word	0x080081f5
 8008134:	080081c1 	.word	0x080081c1
 8008138:	080081f5 	.word	0x080081f5
 800813c:	080081f5 	.word	0x080081f5
 8008140:	080081f5 	.word	0x080081f5
 8008144:	080081f5 	.word	0x080081f5
 8008148:	080081f5 	.word	0x080081f5
 800814c:	080081f5 	.word	0x080081f5
 8008150:	080081f5 	.word	0x080081f5
 8008154:	080081f5 	.word	0x080081f5
 8008158:	080081f5 	.word	0x080081f5
 800815c:	080081f5 	.word	0x080081f5
 8008160:	080081f5 	.word	0x080081f5
 8008164:	080081f5 	.word	0x080081f5
 8008168:	080081f5 	.word	0x080081f5
 800816c:	080081f5 	.word	0x080081f5
 8008170:	080081f5 	.word	0x080081f5
 8008174:	080081e7 	.word	0x080081e7
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d037      	beq.n	80081ec <UART_SetConfig+0xa28>
 800817c:	e03a      	b.n	80081f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800817e:	f7fd fb8d 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8008182:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008184:	e03c      	b.n	8008200 <UART_SetConfig+0xa3c>
 8008186:	bf00      	nop
 8008188:	003d0900 	.word	0x003d0900
 800818c:	0800d04c 	.word	0x0800d04c
 8008190:	58024400 	.word	0x58024400
 8008194:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008198:	f7fd fb96 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 800819c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800819e:	e02f      	b.n	8008200 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081a0:	f107 0314 	add.w	r3, r7, #20
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fafb 	bl	80067a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ae:	e027      	b.n	8008200 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe fc47 	bl	8006a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081be:	e01f      	b.n	8008200 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c0:	4b2c      	ldr	r3, [pc, #176]	; (8008274 <UART_SetConfig+0xab0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081cc:	4b29      	ldr	r3, [pc, #164]	; (8008274 <UART_SetConfig+0xab0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	4a28      	ldr	r2, [pc, #160]	; (8008278 <UART_SetConfig+0xab4>)
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081de:	e00f      	b.n	8008200 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80081e0:	4b25      	ldr	r3, [pc, #148]	; (8008278 <UART_SetConfig+0xab4>)
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081e4:	e00c      	b.n	8008200 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081e6:	4b25      	ldr	r3, [pc, #148]	; (800827c <UART_SetConfig+0xab8>)
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081ea:	e009      	b.n	8008200 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081f2:	e005      	b.n	8008200 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80081fe:	bf00      	nop
    }

    if (pclk != 0U)
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d021      	beq.n	800824a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	4a1d      	ldr	r2, [pc, #116]	; (8008280 <UART_SetConfig+0xabc>)
 800820c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008210:	461a      	mov	r2, r3
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	fbb3 f2f2 	udiv	r2, r3, r2
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	441a      	add	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	b29b      	uxth	r3, r3
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2b0f      	cmp	r3, #15
 8008230:	d908      	bls.n	8008244 <UART_SetConfig+0xa80>
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d204      	bcs.n	8008244 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e002      	b.n	800824a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008266:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800826a:	4618      	mov	r0, r3
 800826c:	3738      	adds	r7, #56	; 0x38
 800826e:	46bd      	mov	sp, r7
 8008270:	bdb0      	pop	{r4, r5, r7, pc}
 8008272:	bf00      	nop
 8008274:	58024400 	.word	0x58024400
 8008278:	03d09000 	.word	0x03d09000
 800827c:	003d0900 	.word	0x003d0900
 8008280:	0800d04c 	.word	0x0800d04c

08008284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01a      	beq.n	800839a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008382:	d10a      	bne.n	800839a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	605a      	str	r2, [r3, #4]
  }
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083d8:	f7f9 f8a0 	bl	800151c <HAL_GetTick>
 80083dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d10e      	bne.n	800840a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f82f 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e025      	b.n	8008456 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b04      	cmp	r3, #4
 8008416:	d10e      	bne.n	8008436 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f819 	bl	800845e <UART_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e00f      	b.n	8008456 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800846e:	e062      	b.n	8008536 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	d05e      	beq.n	8008536 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008478:	f7f9 f850 	bl	800151c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	429a      	cmp	r2, r3
 8008486:	d302      	bcc.n	800848e <UART_WaitOnFlagUntilTimeout+0x30>
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11d      	bne.n	80084ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800849c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e045      	b.n	8008556 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d02e      	beq.n	8008536 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e6:	d126      	bne.n	8008536 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008500:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0201 	bic.w	r2, r2, #1
 8008510:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e00f      	b.n	8008556 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69da      	ldr	r2, [r3, #28]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4013      	ands	r3, r2
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	429a      	cmp	r2, r3
 8008552:	d08d      	beq.n	8008470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	88fa      	ldrh	r2, [r7, #6]
 8008578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	88fa      	ldrh	r2, [r7, #6]
 8008580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d10e      	bne.n	80085b2 <UART_Start_Receive_IT+0x52>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d105      	bne.n	80085a8 <UART_Start_Receive_IT+0x48>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085a6:	e02d      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	22ff      	movs	r2, #255	; 0xff
 80085ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085b0:	e028      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10d      	bne.n	80085d6 <UART_Start_Receive_IT+0x76>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <UART_Start_Receive_IT+0x6c>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	22ff      	movs	r2, #255	; 0xff
 80085c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085ca:	e01b      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	227f      	movs	r2, #127	; 0x7f
 80085d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085d4:	e016      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085de:	d10d      	bne.n	80085fc <UART_Start_Receive_IT+0x9c>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d104      	bne.n	80085f2 <UART_Start_Receive_IT+0x92>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	227f      	movs	r2, #127	; 0x7f
 80085ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085f0:	e008      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	223f      	movs	r2, #63	; 0x3f
 80085f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80085fa:	e003      	b.n	8008604 <UART_Start_Receive_IT+0xa4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2222      	movs	r2, #34	; 0x22
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800862c:	d12a      	bne.n	8008684 <UART_Start_Receive_IT+0x124>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	429a      	cmp	r2, r3
 8008638:	d324      	bcc.n	8008684 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008642:	d107      	bne.n	8008654 <UART_Start_Receive_IT+0xf4>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4a1f      	ldr	r2, [pc, #124]	; (80086cc <UART_Start_Receive_IT+0x16c>)
 8008650:	671a      	str	r2, [r3, #112]	; 0x70
 8008652:	e002      	b.n	800865a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a1e      	ldr	r2, [pc, #120]	; (80086d0 <UART_Start_Receive_IT+0x170>)
 8008658:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008670:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008680:	609a      	str	r2, [r3, #8]
 8008682:	e01b      	b.n	80086bc <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868c:	d107      	bne.n	800869e <UART_Start_Receive_IT+0x13e>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a0e      	ldr	r2, [pc, #56]	; (80086d4 <UART_Start_Receive_IT+0x174>)
 800869a:	671a      	str	r2, [r3, #112]	; 0x70
 800869c:	e002      	b.n	80086a4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a0d      	ldr	r2, [pc, #52]	; (80086d8 <UART_Start_Receive_IT+0x178>)
 80086a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80086ba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	08008b55 	.word	0x08008b55
 80086d0:	08008951 	.word	0x08008951
 80086d4:	08008879 	.word	0x08008879
 80086d8:	080087a1 	.word	0x080087a1

080086dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <UART_EndRxTransfer+0x60>)
 8008700:	400b      	ands	r3, r1
 8008702:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d107      	bne.n	800871c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0210 	bic.w	r2, r2, #16
 800871a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	effffffe 	.word	0xeffffffe

08008740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff f81a 	bl	8007798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008782:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe fff6 	bl	8007784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b6:	2b22      	cmp	r3, #34	; 0x22
 80087b8:	d152      	bne.n	8008860 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087c2:	89bb      	ldrh	r3, [r7, #12]
 80087c4:	b2d9      	uxtb	r1, r3
 80087c6:	89fb      	ldrh	r3, [r7, #14]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	400a      	ands	r2, r1
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d139      	bne.n	8008870 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800880a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0201 	bic.w	r2, r2, #1
 800881a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2220      	movs	r2, #32
 8008820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d10f      	bne.n	8008852 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0210 	bic.w	r2, r2, #16
 8008840:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fe ffae 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008850:	e002      	b.n	8008858 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7f8 f99c 	bl	8000b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800885e:	e007      	b.n	8008870 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699a      	ldr	r2, [r3, #24]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0208 	orr.w	r2, r2, #8
 800886e:	619a      	str	r2, [r3, #24]
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008886:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888e:	2b22      	cmp	r3, #34	; 0x22
 8008890:	d152      	bne.n	8008938 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80088a0:	89ba      	ldrh	r2, [r7, #12]
 80088a2:	89fb      	ldrh	r3, [r7, #14]
 80088a4:	4013      	ands	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	1c9a      	adds	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d139      	bne.n	8008948 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10f      	bne.n	800892a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0210 	bic.w	r2, r2, #16
 8008918:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fe ff42 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008928:	e002      	b.n	8008930 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7f8 f930 	bl	8000b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008936:	e007      	b.n	8008948 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0208 	orr.w	r2, r2, #8
 8008946:	619a      	str	r2, [r3, #24]
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800895e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897e:	2b22      	cmp	r3, #34	; 0x22
 8008980:	f040 80d8 	bne.w	8008b34 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800898a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800898c:	e0a8      	b.n	8008ae0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008996:	89bb      	ldrh	r3, [r7, #12]
 8008998:	b2d9      	uxtb	r1, r3
 800899a:	8b7b      	ldrh	r3, [r7, #26]
 800899c:	b2da      	uxtb	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a2:	400a      	ands	r2, r1
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f003 0307 	and.w	r3, r3, #7
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d04d      	beq.n	8008a72 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d010      	beq.n	8008a02 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00b      	beq.n	8008a02 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2201      	movs	r2, #1
 80089f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f8:	f043 0201 	orr.w	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d010      	beq.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0xde>
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a24:	f043 0204 	orr.w	r2, r3, #4
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <UART_RxISR_8BIT_FIFOEN+0x10a>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2204      	movs	r2, #4
 8008a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a50:	f043 0202 	orr.w	r2, r3, #2
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d006      	beq.n	8008a72 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fe fe97 	bl	8007798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d130      	bne.n	8008ae0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a8c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6899      	ldr	r1, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4b2c      	ldr	r3, [pc, #176]	; (8008b4c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d10f      	bne.n	8008ad4 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0210 	bic.w	r2, r2, #16
 8008ac2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fe fe6d 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008ad2:	e002      	b.n	8008ada <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7f8 f85b 	bl	8000b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f af4e 	bne.w	800898e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008af8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008afa:	897b      	ldrh	r3, [r7, #10]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d021      	beq.n	8008b44 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b06:	897a      	ldrh	r2, [r7, #10]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d21b      	bcs.n	8008b44 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008b1a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0220 	orr.w	r2, r2, #32
 8008b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b32:	e007      	b.n	8008b44 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0208 	orr.w	r2, r2, #8
 8008b42:	619a      	str	r2, [r3, #24]
}
 8008b44:	bf00      	nop
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	effffffe 	.word	0xeffffffe
 8008b50:	080087a1 	.word	0x080087a1

08008b54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b62:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	2b22      	cmp	r3, #34	; 0x22
 8008b84:	f040 80d8 	bne.w	8008d38 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b8e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b90:	e0a8      	b.n	8008ce4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008ba0:	8aba      	ldrh	r2, [r7, #20]
 8008ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb0:	1c9a      	adds	r2, r3, #2
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d04d      	beq.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d010      	beq.n	8008c06 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bfc:	f043 0201 	orr.w	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d010      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0xde>
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c28:	f043 0204 	orr.w	r2, r3, #4
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d010      	beq.n	8008c5e <UART_RxISR_16BIT_FIFOEN+0x10a>
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00b      	beq.n	8008c5e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2204      	movs	r2, #4
 8008c4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c54:	f043 0202 	orr.w	r2, r3, #2
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe fd95 	bl	8007798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d130      	bne.n	8008ce4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c90:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6899      	ldr	r1, [r3, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	4b2c      	ldr	r3, [pc, #176]	; (8008d50 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8008c9e:	400b      	ands	r3, r1
 8008ca0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d10f      	bne.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0210 	bic.w	r2, r2, #16
 8008cc6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe fd6b 	bl	80077ac <HAL_UARTEx_RxEventCallback>
 8008cd6:	e002      	b.n	8008cde <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7f7 ff59 	bl	8000b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ce4:	8afb      	ldrh	r3, [r7, #22]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f47f af4e 	bne.w	8008b92 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cfc:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d021      	beq.n	8008d48 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d0a:	89fa      	ldrh	r2, [r7, #14]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d21b      	bcs.n	8008d48 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008d1e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8008d24:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0220 	orr.w	r2, r2, #32
 8008d34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d36:	e007      	b.n	8008d48 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0208 	orr.w	r2, r2, #8
 8008d46:	619a      	str	r2, [r3, #24]
}
 8008d48:	bf00      	nop
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	effffffe 	.word	0xeffffffe
 8008d54:	08008879 	.word	0x08008879

08008d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d101      	bne.n	8008daa <HAL_UARTEx_DisableFifoMode+0x16>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e027      	b.n	8008dfa <HAL_UARTEx_DisableFifoMode+0x66>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2224      	movs	r2, #36	; 0x24
 8008db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0201 	bic.w	r2, r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e02d      	b.n	8008e7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2224      	movs	r2, #36	; 0x24
 8008e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0201 	bic.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f850 	bl	8008f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e02d      	b.n	8008ef6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2224      	movs	r2, #36	; 0x24
 8008ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f022 0201 	bic.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f812 	bl	8008f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d108      	bne.n	8008f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f20:	e031      	b.n	8008f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f22:	2310      	movs	r3, #16
 8008f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f26:	2310      	movs	r3, #16
 8008f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	0e5b      	lsrs	r3, r3, #25
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	0f5b      	lsrs	r3, r3, #29
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	7b3a      	ldrb	r2, [r7, #12]
 8008f4e:	4911      	ldr	r1, [pc, #68]	; (8008f94 <UARTEx_SetNbDataToProcess+0x94>)
 8008f50:	5c8a      	ldrb	r2, [r1, r2]
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f56:	7b3a      	ldrb	r2, [r7, #12]
 8008f58:	490f      	ldr	r1, [pc, #60]	; (8008f98 <UARTEx_SetNbDataToProcess+0x98>)
 8008f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	7b7a      	ldrb	r2, [r7, #13]
 8008f6c:	4909      	ldr	r1, [pc, #36]	; (8008f94 <UARTEx_SetNbDataToProcess+0x94>)
 8008f6e:	5c8a      	ldrb	r2, [r1, r2]
 8008f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f74:	7b7a      	ldrb	r2, [r7, #13]
 8008f76:	4908      	ldr	r1, [pc, #32]	; (8008f98 <UARTEx_SetNbDataToProcess+0x98>)
 8008f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	0800d064 	.word	0x0800d064
 8008f98:	0800d06c 	.word	0x0800d06c

08008f9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	f107 001c 	add.w	r0, r7, #28
 8008faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d120      	bne.n	8008ff6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <USB_CoreInit+0xd4>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d105      	bne.n	8008fea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f990 	bl	8009310 <USB_CoreReset>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e01a      	b.n	800902c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f984 	bl	8009310 <USB_CoreReset>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800900c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	639a      	str	r2, [r3, #56]	; 0x38
 800901e:	e005      	b.n	800902c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	2b01      	cmp	r3, #1
 8009030:	d116      	bne.n	8009060 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <USB_CoreInit+0xd8>)
 8009042:	4313      	orrs	r3, r2
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f043 0206 	orr.w	r2, r3, #6
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800906c:	b004      	add	sp, #16
 800906e:	4770      	bx	lr
 8009070:	ffbdffbf 	.word	0xffbdffbf
 8009074:	03ee0000 	.word	0x03ee0000

08009078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f043 0201 	orr.w	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f023 0201 	bic.w	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d106      	bne.n	80090e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]
 80090e6:	e00b      	b.n	8009100 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60da      	str	r2, [r3, #12]
 80090fa:	e001      	b.n	8009100 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e003      	b.n	8009108 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009100:	2032      	movs	r0, #50	; 0x32
 8009102:	f7f8 fa17 	bl	8001534 <HAL_Delay>

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	019b      	lsls	r3, r3, #6
 8009122:	f043 0220 	orr.w	r2, r3, #32
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a09      	ldr	r2, [pc, #36]	; (8009158 <USB_FlushTxFifo+0x48>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d901      	bls.n	800913c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e006      	b.n	800914a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b20      	cmp	r3, #32
 8009146:	d0f0      	beq.n	800912a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	00030d40 	.word	0x00030d40

0800915c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2210      	movs	r2, #16
 800916c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4a09      	ldr	r2, [pc, #36]	; (800919c <USB_FlushRxFifo+0x40>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d901      	bls.n	8009180 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e006      	b.n	800918e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f003 0310 	and.w	r3, r3, #16
 8009188:	2b10      	cmp	r3, #16
 800918a:	d0f0      	beq.n	800916e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	00030d40 	.word	0x00030d40

080091a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	4611      	mov	r1, r2
 80091ac:	461a      	mov	r2, r3
 80091ae:	460b      	mov	r3, r1
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	4613      	mov	r3, r2
 80091b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80091be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d123      	bne.n	800920e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091c6:	88bb      	ldrh	r3, [r7, #4]
 80091c8:	3303      	adds	r3, #3
 80091ca:	089b      	lsrs	r3, r3, #2
 80091cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e018      	b.n	8009206 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	031a      	lsls	r2, r3, #12
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	461a      	mov	r2, r3
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3301      	adds	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	3301      	adds	r3, #1
 80091f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3301      	adds	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	3301      	adds	r3, #1
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d3e2      	bcc.n	80091d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3724      	adds	r7, #36	; 0x24
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800921c:	b480      	push	{r7}
 800921e:	b08b      	sub	sp, #44	; 0x2c
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	b29b      	uxth	r3, r3
 8009238:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009242:	2300      	movs	r3, #0
 8009244:	623b      	str	r3, [r7, #32]
 8009246:	e014      	b.n	8009272 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	601a      	str	r2, [r3, #0]
    pDest++;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	3301      	adds	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	3301      	adds	r3, #1
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	3301      	adds	r3, #1
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	3301      	adds	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	3301      	adds	r3, #1
 8009270:	623b      	str	r3, [r7, #32]
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	429a      	cmp	r2, r3
 8009278:	d3e6      	bcc.n	8009248 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800927a:	8bfb      	ldrh	r3, [r7, #30]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01e      	beq.n	80092be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928a:	461a      	mov	r2, r3
 800928c:	f107 0310 	add.w	r3, r7, #16
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	701a      	strb	r2, [r3, #0]
      i++;
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	3301      	adds	r3, #1
 80092aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	3301      	adds	r3, #1
 80092b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092b2:	8bfb      	ldrh	r3, [r7, #30]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092b8:	8bfb      	ldrh	r3, [r7, #30]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1ea      	bne.n	8009294 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	372c      	adds	r7, #44	; 0x2c
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4013      	ands	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80092e4:	68fb      	ldr	r3, [r7, #12]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f003 0301 	and.w	r3, r3, #1
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	3301      	adds	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4a13      	ldr	r2, [pc, #76]	; (8009374 <USB_CoreReset+0x64>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d901      	bls.n	800932e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e01b      	b.n	8009366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	daf2      	bge.n	800931c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f043 0201 	orr.w	r2, r3, #1
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a09      	ldr	r2, [pc, #36]	; (8009374 <USB_CoreReset+0x64>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d901      	bls.n	8009358 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e006      	b.n	8009366 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b01      	cmp	r3, #1
 8009362:	d0f0      	beq.n	8009346 <USB_CoreReset+0x36>

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	00030d40 	.word	0x00030d40

08009378 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009378:	b084      	sub	sp, #16
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	f107 001c 	add.w	r0, r7, #28
 8009386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009394:	461a      	mov	r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d018      	beq.n	80093f0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80093be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d10a      	bne.n	80093da <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093d2:	f043 0304 	orr.w	r3, r3, #4
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	e014      	b.n	8009404 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093e8:	f023 0304 	bic.w	r3, r3, #4
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	e009      	b.n	8009404 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093fe:	f023 0304 	bic.w	r3, r3, #4
 8009402:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009404:	2110      	movs	r1, #16
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fe82 	bl	8009110 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff fea5 	bl	800915c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e015      	b.n	8009444 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009424:	461a      	mov	r2, r3
 8009426:	f04f 33ff 	mov.w	r3, #4294967295
 800942a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	4413      	add	r3, r2
 8009434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009438:	461a      	mov	r2, r3
 800943a:	2300      	movs	r3, #0
 800943c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	429a      	cmp	r2, r3
 800944a:	d3e5      	bcc.n	8009418 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800944c:	2101      	movs	r1, #1
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f8ac 	bl	80095ac <USB_DriveVbus>

  HAL_Delay(200U);
 8009454:	20c8      	movs	r0, #200	; 0xc8
 8009456:	f7f8 f86d 	bl	8001534 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800947a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a14      	ldr	r2, [pc, #80]	; (80094d0 <USB_HostInit+0x158>)
 8009480:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a13      	ldr	r2, [pc, #76]	; (80094d4 <USB_HostInit+0x15c>)
 8009486:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800948a:	e009      	b.n	80094a0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2280      	movs	r2, #128	; 0x80
 8009490:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <USB_HostInit+0x160>)
 8009496:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a10      	ldr	r2, [pc, #64]	; (80094dc <USB_HostInit+0x164>)
 800949c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d105      	bne.n	80094b2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	f043 0210 	orr.w	r2, r3, #16
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	699a      	ldr	r2, [r3, #24]
 80094b6:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <USB_HostInit+0x168>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094ca:	b004      	add	sp, #16
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	01000200 	.word	0x01000200
 80094d4:	00e00300 	.word	0x00e00300
 80094d8:	00600080 	.word	0x00600080
 80094dc:	004000e0 	.word	0x004000e0
 80094e0:	a3200008 	.word	0xa3200008

080094e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009502:	f023 0303 	bic.w	r3, r3, #3
 8009506:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	68f9      	ldr	r1, [r7, #12]
 8009518:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800951c:	4313      	orrs	r3, r2
 800951e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d107      	bne.n	8009536 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952c:	461a      	mov	r2, r3
 800952e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009532:	6053      	str	r3, [r2, #4]
 8009534:	e009      	b.n	800954a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d106      	bne.n	800954a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009542:	461a      	mov	r2, r3
 8009544:	f241 7370 	movw	r3, #6000	; 0x1770
 8009548:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009578:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009586:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009588:	2064      	movs	r0, #100	; 0x64
 800958a:	f7f7 ffd3 	bl	8001534 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800959a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800959c:	200a      	movs	r0, #10
 800959e:	f7f7 ffc9 	bl	8001534 <HAL_Delay>

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80095d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <USB_DriveVbus+0x44>
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d106      	bne.n	80095f0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80095ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095ee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fa:	d109      	bne.n	8009610 <USB_DriveVbus+0x64>
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800960a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800960e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	0c5b      	lsrs	r3, r3, #17
 800963c:	f003 0303 	and.w	r3, r3, #3
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	b29b      	uxth	r3, r3
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
	...

08009670 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	461a      	mov	r2, r3
 800967e:	4603      	mov	r3, r0
 8009680:	70fb      	strb	r3, [r7, #3]
 8009682:	460b      	mov	r3, r1
 8009684:	70bb      	strb	r3, [r7, #2]
 8009686:	4613      	mov	r3, r2
 8009688:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	4413      	add	r3, r2
 800969a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969e:	461a      	mov	r2, r3
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295
 80096a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80096a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d87e      	bhi.n	80097ac <USB_HC_Init+0x13c>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USB_HC_Init+0x44>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c5 	.word	0x080096c5
 80096b8:	0800976f 	.word	0x0800976f
 80096bc:	080096c5 	.word	0x080096c5
 80096c0:	08009731 	.word	0x08009731
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d0:	461a      	mov	r2, r3
 80096d2:	f240 439d 	movw	r3, #1181	; 0x49d
 80096d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80096d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da10      	bge.n	8009702 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009700:	e057      	b.n	80097b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	d051      	beq.n	80097b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	4413      	add	r3, r2
 8009716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	78fa      	ldrb	r2, [r7, #3]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	440a      	add	r2, r1
 8009724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800972c:	60d3      	str	r3, [r2, #12]
      break;
 800972e:	e040      	b.n	80097b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	4413      	add	r3, r2
 8009738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800973c:	461a      	mov	r2, r3
 800973e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009742:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009744:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009748:	2b00      	cmp	r3, #0
 800974a:	da34      	bge.n	80097b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	78fa      	ldrb	r2, [r7, #3]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	440a      	add	r2, r1
 8009762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800976a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800976c:	e023      	b.n	80097b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	4413      	add	r3, r2
 8009776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800977a:	461a      	mov	r2, r3
 800977c:	f240 2325 	movw	r3, #549	; 0x225
 8009780:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009782:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009786:	2b00      	cmp	r3, #0
 8009788:	da17      	bge.n	80097ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	4413      	add	r3, r2
 8009792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	0151      	lsls	r1, r2, #5
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	440a      	add	r2, r1
 80097a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80097a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80097aa:	e006      	b.n	80097ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	77fb      	strb	r3, [r7, #31]
      break;
 80097b0:	e004      	b.n	80097bc <USB_HC_Init+0x14c>
      break;
 80097b2:	bf00      	nop
 80097b4:	e002      	b.n	80097bc <USB_HC_Init+0x14c>
      break;
 80097b6:	bf00      	nop
 80097b8:	e000      	b.n	80097bc <USB_HC_Init+0x14c>
      break;
 80097ba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	2101      	movs	r1, #1
 80097cc:	fa01 f303 	lsl.w	r3, r1, r3
 80097d0:	6939      	ldr	r1, [r7, #16]
 80097d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80097d6:	4313      	orrs	r3, r2
 80097d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80097e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da03      	bge.n	80097f6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80097ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097f2:	61bb      	str	r3, [r7, #24]
 80097f4:	e001      	b.n	80097fa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff ff0f 	bl	800961e <USB_GetHostSpeed>
 8009800:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009806:	2b02      	cmp	r3, #2
 8009808:	d106      	bne.n	8009818 <USB_HC_Init+0x1a8>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d003      	beq.n	8009818 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e001      	b.n	800981c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800981c:	787b      	ldrb	r3, [r7, #1]
 800981e:	059b      	lsls	r3, r3, #22
 8009820:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009824:	78bb      	ldrb	r3, [r7, #2]
 8009826:	02db      	lsls	r3, r3, #11
 8009828:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800982c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800982e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009832:	049b      	lsls	r3, r3, #18
 8009834:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009838:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800983a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800983c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009840:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	0159      	lsls	r1, r3, #5
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	440b      	add	r3, r1
 800984e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009852:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009858:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800985a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800985e:	2b03      	cmp	r3, #3
 8009860:	d10f      	bne.n	8009882 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	4413      	add	r3, r2
 800986a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	440a      	add	r2, r1
 8009878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800987c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009880:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009882:	7ffb      	ldrb	r3, [r7, #31]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08c      	sub	sp, #48	; 0x30
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80098a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d02d      	beq.n	8009912 <USB_HC_StartXfer+0x86>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	791b      	ldrb	r3, [r3, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d129      	bne.n	8009912 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d117      	bne.n	80098f4 <USB_HC_StartXfer+0x68>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	79db      	ldrb	r3, [r3, #7]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <USB_HC_StartXfer+0x48>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	79db      	ldrb	r3, [r3, #7]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d10f      	bne.n	80098f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	6a3a      	ldr	r2, [r7, #32]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80098f4:	79fb      	ldrb	r3, [r7, #7]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <USB_HC_StartXfer+0x86>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	795b      	ldrb	r3, [r3, #5]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d107      	bne.n	8009912 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	4619      	mov	r1, r3
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 fa2f 	bl	8009d6c <USB_DoPing>
      return HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	e0f8      	b.n	8009b04 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d018      	beq.n	800994c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	8912      	ldrh	r2, [r2, #8]
 8009922:	4413      	add	r3, r2
 8009924:	3b01      	subs	r3, #1
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	8912      	ldrh	r2, [r2, #8]
 800992a:	fbb3 f3f2 	udiv	r3, r3, r2
 800992e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009930:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009932:	8b7b      	ldrh	r3, [r7, #26]
 8009934:	429a      	cmp	r2, r3
 8009936:	d90b      	bls.n	8009950 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009938:	8b7b      	ldrh	r3, [r7, #26]
 800993a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800993c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	8912      	ldrh	r2, [r2, #8]
 8009942:	fb02 f203 	mul.w	r2, r2, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	611a      	str	r2, [r3, #16]
 800994a:	e001      	b.n	8009950 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800994c:	2301      	movs	r3, #1
 800994e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	78db      	ldrb	r3, [r3, #3]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	8912      	ldrh	r2, [r2, #8]
 800995e:	fb02 f203 	mul.w	r2, r2, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	611a      	str	r2, [r3, #16]
 8009966:	e003      	b.n	8009970 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	695a      	ldr	r2, [r3, #20]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800997a:	04d9      	lsls	r1, r3, #19
 800997c:	4b63      	ldr	r3, [pc, #396]	; (8009b0c <USB_HC_StartXfer+0x280>)
 800997e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009980:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	7a9b      	ldrb	r3, [r3, #10]
 8009986:	075b      	lsls	r3, r3, #29
 8009988:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800998c:	69f9      	ldr	r1, [r7, #28]
 800998e:	0148      	lsls	r0, r1, #5
 8009990:	6a39      	ldr	r1, [r7, #32]
 8009992:	4401      	add	r1, r0
 8009994:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009998:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800999a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	68d9      	ldr	r1, [r3, #12]
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b2:	460a      	mov	r2, r1
 80099b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bf0c      	ite	eq
 80099c6:	2301      	moveq	r3, #1
 80099c8:	2300      	movne	r3, #0
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	0151      	lsls	r1, r2, #5
 80099e0:	6a3a      	ldr	r2, [r7, #32]
 80099e2:	440a      	add	r2, r1
 80099e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	7e7b      	ldrb	r3, [r7, #25]
 80099fe:	075b      	lsls	r3, r3, #29
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	0148      	lsls	r0, r1, #5
 8009a04:	6a39      	ldr	r1, [r7, #32]
 8009a06:	4401      	add	r1, r0
 8009a08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	78db      	ldrb	r3, [r3, #3]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d004      	beq.n	8009a3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	e003      	b.n	8009a42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a56:	461a      	mov	r2, r3
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e04e      	b.n	8009b04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	78db      	ldrb	r3, [r3, #3]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d149      	bne.n	8009b02 <USB_HC_StartXfer+0x276>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d045      	beq.n	8009b02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	79db      	ldrb	r3, [r3, #7]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d830      	bhi.n	8009ae0 <USB_HC_StartXfer+0x254>
 8009a7e:	a201      	add	r2, pc, #4	; (adr r2, 8009a84 <USB_HC_StartXfer+0x1f8>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009ab9 	.word	0x08009ab9
 8009a8c:	08009a95 	.word	0x08009a95
 8009a90:	08009ab9 	.word	0x08009ab9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	3303      	adds	r3, #3
 8009a9a:	089b      	lsrs	r3, r3, #2
 8009a9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009a9e:	8afa      	ldrh	r2, [r7, #22]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d91c      	bls.n	8009ae4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	f043 0220 	orr.w	r2, r3, #32
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	619a      	str	r2, [r3, #24]
        }
        break;
 8009ab6:	e015      	b.n	8009ae4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	3303      	adds	r3, #3
 8009abe:	089b      	lsrs	r3, r3, #2
 8009ac0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009ac2:	8afa      	ldrh	r2, [r7, #22]
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d90a      	bls.n	8009ae8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	619a      	str	r2, [r3, #24]
        }
        break;
 8009ade:	e003      	b.n	8009ae8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e002      	b.n	8009aea <USB_HC_StartXfer+0x25e>
        break;
 8009ae4:	bf00      	nop
 8009ae6:	e000      	b.n	8009aea <USB_HC_StartXfer+0x25e>
        break;
 8009ae8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68d9      	ldr	r1, [r3, #12]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	785a      	ldrb	r2, [r3, #1]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2000      	movs	r0, #0
 8009afa:	9000      	str	r0, [sp, #0]
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7ff fb4f 	bl	80091a0 <USB_WritePacket>
  }

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3728      	adds	r7, #40	; 0x28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	1ff80000 	.word	0x1ff80000

08009b10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	b29b      	uxth	r3, r3
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b089      	sub	sp, #36	; 0x24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	0c9b      	lsrs	r3, r3, #18
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	0fdb      	lsrs	r3, r3, #31
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	d104      	bne.n	8009b8c <USB_HC_Halt+0x5a>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e0e8      	b.n	8009d5e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <USB_HC_Halt+0x66>
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d173      	bne.n	8009c80 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bb6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 80cb 	bne.w	8009d5c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d143      	bne.n	8009c5a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	0151      	lsls	r1, r2, #5
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	440a      	add	r2, r1
 8009be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c10:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c30:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	3301      	adds	r3, #1
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c3e:	d81d      	bhi.n	8009c7c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c56:	d0ec      	beq.n	8009c32 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c58:	e080      	b.n	8009d5c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	0151      	lsls	r1, r2, #5
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	440a      	add	r2, r1
 8009c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c7a:	e06f      	b.n	8009d5c <USB_HC_Halt+0x22a>
            break;
 8009c7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c7e:	e06d      	b.n	8009d5c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	0151      	lsls	r1, r2, #5
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	440a      	add	r2, r1
 8009c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d143      	bne.n	8009d38 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	0151      	lsls	r1, r2, #5
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	440a      	add	r2, r1
 8009cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d0e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	3301      	adds	r3, #1
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d1c:	d81d      	bhi.n	8009d5a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	015a      	lsls	r2, r3, #5
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	4413      	add	r3, r2
 8009d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d34:	d0ec      	beq.n	8009d10 <USB_HC_Halt+0x1de>
 8009d36:	e011      	b.n	8009d5c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	e000      	b.n	8009d5c <USB_HC_Halt+0x22a>
          break;
 8009d5a:	bf00      	nop
    }
  }

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3724      	adds	r7, #36	; 0x24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
	...

08009d6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009d80:	2301      	movs	r3, #1
 8009d82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	04da      	lsls	r2, r3, #19
 8009d88:	4b15      	ldr	r3, [pc, #84]	; (8009de0 <USB_DoPing+0x74>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009db4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dbc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	1ff80000 	.word	0x1ff80000

08009de4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff f950 	bl	800909a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009dfa:	2110      	movs	r1, #16
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff f987 	bl	8009110 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff f9aa 	bl	800915c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	e01f      	b.n	8009e4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e42:	461a      	mov	r2, r3
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2b0f      	cmp	r3, #15
 8009e52:	d9dc      	bls.n	8009e0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009e54:	2300      	movs	r3, #0
 8009e56:	613b      	str	r3, [r7, #16]
 8009e58:	e034      	b.n	8009ec4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8e:	461a      	mov	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	3301      	adds	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea0:	d80c      	bhi.n	8009ebc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eb8:	d0ec      	beq.n	8009e94 <USB_StopHost+0xb0>
 8009eba:	e000      	b.n	8009ebe <USB_StopHost+0xda>
        break;
 8009ebc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d9c7      	bls.n	8009e5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295
 8009ede:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff f8c9 	bl	8009078 <USB_EnableGlobalInt>

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b089      	sub	sp, #36	; 0x24
 8009ef4:	af04      	add	r7, sp, #16
 8009ef6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009ef8:	2301      	movs	r3, #1
 8009efa:	2202      	movs	r2, #2
 8009efc:	2102      	movs	r1, #2
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fccc 	bl	800a89c <USBH_FindInterface>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	2bff      	cmp	r3, #255	; 0xff
 8009f0c:	d002      	beq.n	8009f14 <USBH_CDC_InterfaceInit+0x24>
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d901      	bls.n	8009f18 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009f14:	2302      	movs	r3, #2
 8009f16:	e13d      	b.n	800a194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fca1 	bl	800a864 <USBH_SelectInterface>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e131      	b.n	800a194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009f36:	2050      	movs	r0, #80	; 0x50
 8009f38:	f002 fb46 	bl	800c5c8 <malloc>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009f50:	2302      	movs	r3, #2
 8009f52:	e11f      	b.n	800a194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009f54:	2250      	movs	r2, #80	; 0x50
 8009f56:	2100      	movs	r1, #0
 8009f58:	68b8      	ldr	r0, [r7, #8]
 8009f5a:	f002 fb45 	bl	800c5e8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	211a      	movs	r1, #26
 8009f64:	fb01 f303 	mul.w	r3, r1, r3
 8009f68:	4413      	add	r3, r2
 8009f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da15      	bge.n	8009fa2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	211a      	movs	r1, #26
 8009f7c:	fb01 f303 	mul.w	r3, r1, r3
 8009f80:	4413      	add	r3, r2
 8009f82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009f86:	781a      	ldrb	r2, [r3, #0]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	211a      	movs	r1, #26
 8009f92:	fb01 f303 	mul.w	r3, r1, r3
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009f9c:	881a      	ldrh	r2, [r3, #0]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	785b      	ldrb	r3, [r3, #1]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 fe98 	bl	800bcde <USBH_AllocPipe>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	7819      	ldrb	r1, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	7858      	ldrb	r0, [r3, #1]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	8952      	ldrh	r2, [r2, #10]
 8009fce:	9202      	str	r2, [sp, #8]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4623      	mov	r3, r4
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fe50 	bl	800bc80 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f002 fa3f 	bl	800c46c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	210a      	movs	r1, #10
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fc51 	bl	800a89c <USBH_FindInterface>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2bff      	cmp	r3, #255	; 0xff
 800a002:	d002      	beq.n	800a00a <USBH_CDC_InterfaceInit+0x11a>
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d901      	bls.n	800a00e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	e0c2      	b.n	800a194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	211a      	movs	r1, #26
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	4413      	add	r3, r2
 800a01a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	b25b      	sxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	da16      	bge.n	800a054 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	211a      	movs	r1, #26
 800a02c:	fb01 f303 	mul.w	r3, r1, r3
 800a030:	4413      	add	r3, r2
 800a032:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	211a      	movs	r1, #26
 800a042:	fb01 f303 	mul.w	r3, r1, r3
 800a046:	4413      	add	r3, r2
 800a048:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a04c:	881a      	ldrh	r2, [r3, #0]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	835a      	strh	r2, [r3, #26]
 800a052:	e015      	b.n	800a080 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	211a      	movs	r1, #26
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	4413      	add	r3, r2
 800a060:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a064:	781a      	ldrb	r2, [r3, #0]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	211a      	movs	r1, #26
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	4413      	add	r3, r2
 800a076:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a07a:	881a      	ldrh	r2, [r3, #0]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	211a      	movs	r1, #26
 800a086:	fb01 f303 	mul.w	r3, r1, r3
 800a08a:	4413      	add	r3, r2
 800a08c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b25b      	sxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	da16      	bge.n	800a0c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	211a      	movs	r1, #26
 800a09e:	fb01 f303 	mul.w	r3, r1, r3
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	211a      	movs	r1, #26
 800a0b4:	fb01 f303 	mul.w	r3, r1, r3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a0be:	881a      	ldrh	r2, [r3, #0]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	835a      	strh	r2, [r3, #26]
 800a0c4:	e015      	b.n	800a0f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	211a      	movs	r1, #26
 800a0cc:	fb01 f303 	mul.w	r3, r1, r3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0d6:	781a      	ldrb	r2, [r3, #0]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	211a      	movs	r1, #26
 800a0e2:	fb01 f303 	mul.w	r3, r1, r3
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a0ec:	881a      	ldrh	r2, [r3, #0]
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	7b9b      	ldrb	r3, [r3, #14]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fdf0 	bl	800bcde <USBH_AllocPipe>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	7bdb      	ldrb	r3, [r3, #15]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fde6 	bl	800bcde <USBH_AllocPipe>
 800a112:	4603      	mov	r3, r0
 800a114:	461a      	mov	r2, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	7b59      	ldrb	r1, [r3, #13]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	7b98      	ldrb	r0, [r3, #14]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	8b12      	ldrh	r2, [r2, #24]
 800a132:	9202      	str	r2, [sp, #8]
 800a134:	2202      	movs	r2, #2
 800a136:	9201      	str	r2, [sp, #4]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	4623      	mov	r3, r4
 800a13c:	4602      	mov	r2, r0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 fd9e 	bl	800bc80 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	7b19      	ldrb	r1, [r3, #12]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7bd8      	ldrb	r0, [r3, #15]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	8b52      	ldrh	r2, [r2, #26]
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	2202      	movs	r2, #2
 800a160:	9201      	str	r2, [sp, #4]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4623      	mov	r3, r4
 800a166:	4602      	mov	r2, r0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fd89 	bl	800bc80 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	7b5b      	ldrb	r3, [r3, #13]
 800a17a:	2200      	movs	r2, #0
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f002 f974 	bl	800c46c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	7b1b      	ldrb	r3, [r3, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f002 f96d 	bl	800c46c <USBH_LL_SetToggle>

  return USBH_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd90      	pop	{r4, r7, pc}

0800a19c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00e      	beq.n	800a1d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fd7e 	bl	800bcbe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f001 fda9 	bl	800bd20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	7b1b      	ldrb	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00e      	beq.n	800a1fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	7b1b      	ldrb	r3, [r3, #12]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 fd6b 	bl	800bcbe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	7b1b      	ldrb	r3, [r3, #12]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fd96 	bl	800bd20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	7b5b      	ldrb	r3, [r3, #13]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00e      	beq.n	800a220 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	7b5b      	ldrb	r3, [r3, #13]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 fd58 	bl	800bcbe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	7b5b      	ldrb	r3, [r3, #13]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f001 fd83 	bl	800bd20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	4618      	mov	r0, r3
 800a236:	f002 f9cf 	bl	800c5d8 <free>
    phost->pActiveClass->pData = 0U;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a240:	2200      	movs	r2, #0
 800a242:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3340      	adds	r3, #64	; 0x40
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f8b1 	bl	800a3ce <GetLineCoding>
 800a26c:	4603      	mov	r3, r0
 800a26e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a27c:	2102      	movs	r1, #2
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a282:	7afb      	ldrb	r3, [r7, #11]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a294:	2301      	movs	r3, #1
 800a296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d877      	bhi.n	800a3a0 <USBH_CDC_Process+0x114>
 800a2b0:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <USBH_CDC_Process+0x2c>)
 800a2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b6:	bf00      	nop
 800a2b8:	0800a2cd 	.word	0x0800a2cd
 800a2bc:	0800a2d3 	.word	0x0800a2d3
 800a2c0:	0800a303 	.word	0x0800a303
 800a2c4:	0800a377 	.word	0x0800a377
 800a2c8:	0800a385 	.word	0x0800a385
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d0:	e06d      	b.n	800a3ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f897 	bl	800a40c <SetLineCoding>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a2f0:	e058      	b.n	800a3a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d055      	beq.n	800a3a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2204      	movs	r2, #4
 800a2fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a300:	e050      	b.n	800a3a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	3340      	adds	r3, #64	; 0x40
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f860 	bl	800a3ce <GetLineCoding>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d126      	bne.n	800a366 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a32a:	791b      	ldrb	r3, [r3, #4]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d13b      	bne.n	800a3a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a33a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d133      	bne.n	800a3a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a34a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d12b      	bne.n	800a3a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a358:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d124      	bne.n	800a3a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f9be 	bl	800a6e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a364:	e020      	b.n	800a3a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d01d      	beq.n	800a3a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2204      	movs	r2, #4
 800a370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a374:	e018      	b.n	800a3a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8e1 	bl	800a53e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f954 	bl	800a62a <CDC_ProcessReception>
      break;
 800a382:	e014      	b.n	800a3ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 f849 	bl	800b41e <USBH_ClrFeature>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a39e:	e005      	b.n	800a3ac <USBH_CDC_Process+0x120>

    default:
      break;
 800a3a0:	bf00      	nop
 800a3a2:	e004      	b.n	800a3ae <USBH_CDC_Process+0x122>
      break;
 800a3a4:	bf00      	nop
 800a3a6:	e002      	b.n	800a3ae <USBH_CDC_Process+0x122>
      break;
 800a3a8:	bf00      	nop
 800a3aa:	e000      	b.n	800a3ae <USBH_CDC_Process+0x122>
      break;
 800a3ac:	bf00      	nop

  }

  return status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	22a1      	movs	r2, #161	; 0xa1
 800a3dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2221      	movs	r2, #33	; 0x21
 800a3e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2207      	movs	r2, #7
 800a3f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2207      	movs	r2, #7
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 f9ee 	bl	800b7de <USBH_CtlReq>
 800a402:	4603      	mov	r3, r0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2221      	movs	r2, #33	; 0x21
 800a41a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2220      	movs	r2, #32
 800a420:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2207      	movs	r2, #7
 800a432:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2207      	movs	r2, #7
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 f9cf 	bl	800b7de <USBH_CtlReq>
 800a440:	4603      	mov	r3, r0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b0b      	cmp	r3, #11
 800a464:	d107      	bne.n	800a476 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	7b1b      	ldrb	r3, [r3, #12]
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 ff41 	bl	800c2f4 <USBH_LL_GetLastXferSize>
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	e001      	b.n	800a47a <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	b29b      	uxth	r3, r3
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a486:	b480      	push	{r7}
 800a488:	b087      	sub	sp, #28
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a492:	2301      	movs	r3, #1
 800a494:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <USBH_CDC_Transmit+0x2e>
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d10f      	bne.n	800a4d4 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b087      	sub	sp, #28
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <USBH_CDC_Receive+0x2e>
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d10f      	bne.n	800a530 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2203      	movs	r2, #3
 800a520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	2203      	movs	r2, #3
 800a528:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a52c:	2300      	movs	r3, #0
 800a52e:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af02      	add	r7, sp, #8
 800a544:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a550:	2300      	movs	r3, #0
 800a552:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d002      	beq.n	800a564 <CDC_ProcessTransmission+0x26>
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d023      	beq.n	800a5aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a562:	e05e      	b.n	800a622 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	8b12      	ldrh	r2, [r2, #24]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d90b      	bls.n	800a588 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	69d9      	ldr	r1, [r3, #28]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8b1a      	ldrh	r2, [r3, #24]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	7b5b      	ldrb	r3, [r3, #13]
 800a57c:	2001      	movs	r0, #1
 800a57e:	9000      	str	r0, [sp, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 fb3a 	bl	800bbfa <USBH_BulkSendData>
 800a586:	e00b      	b.n	800a5a0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	7b5b      	ldrb	r3, [r3, #13]
 800a596:	2001      	movs	r0, #1
 800a598:	9000      	str	r0, [sp, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 fb2d 	bl	800bbfa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a5a8:	e03b      	b.n	800a622 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	7b5b      	ldrb	r3, [r3, #13]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f001 ff31 	bl	800c418 <USBH_LL_GetURBState>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a5ba:	7afb      	ldrb	r3, [r7, #11]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d128      	bne.n	800a612 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	8b12      	ldrh	r2, [r2, #24]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d90e      	bls.n	800a5ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	8b12      	ldrh	r2, [r2, #24]
 800a5d4:	1a9a      	subs	r2, r3, r2
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	8b12      	ldrh	r2, [r2, #24]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	61da      	str	r2, [r3, #28]
 800a5e8:	e002      	b.n	800a5f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a600:	e00e      	b.n	800a620 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fbca 	bl	800bda4 <USBH_CDC_TransmitCallback>
      break;
 800a610:	e006      	b.n	800a620 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	2b02      	cmp	r3, #2
 800a616:	d103      	bne.n	800a620 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a620:	bf00      	nop
  }
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a646:	2b03      	cmp	r3, #3
 800a648:	d002      	beq.n	800a650 <CDC_ProcessReception+0x26>
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d00e      	beq.n	800a66c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a64e:	e043      	b.n	800a6d8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	6a19      	ldr	r1, [r3, #32]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	8b5a      	ldrh	r2, [r3, #26]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	7b1b      	ldrb	r3, [r3, #12]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 faf1 	bl	800bc44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2204      	movs	r2, #4
 800a666:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a66a:	e035      	b.n	800a6d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	7b1b      	ldrb	r3, [r3, #12]
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fed0 	bl	800c418 <USBH_LL_GetURBState>
 800a678:	4603      	mov	r3, r0
 800a67a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a67c:	7cfb      	ldrb	r3, [r7, #19]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d129      	bne.n	800a6d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	7b1b      	ldrb	r3, [r3, #12]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 fe33 	bl	800c2f4 <USBH_LL_GetLastXferSize>
 800a68e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	429a      	cmp	r2, r3
 800a698:	d016      	beq.n	800a6c8 <CDC_ProcessReception+0x9e>
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	8b5b      	ldrh	r3, [r3, #26]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d910      	bls.n	800a6c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	1ad2      	subs	r2, r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	6a1a      	ldr	r2, [r3, #32]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	441a      	add	r2, r3
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a6c6:	e006      	b.n	800a6d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 fb71 	bl	800bdb8 <USBH_CDC_ReceiveCallback>
      break;
 800a6d6:	bf00      	nop
  }
}
 800a6d8:	bf00      	nop
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a708:	2302      	movs	r3, #2
 800a70a:	e029      	b.n	800a760 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	79fa      	ldrb	r2, [r7, #7]
 800a710:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f81f 	bl	800a768 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f001 fd17 	bl	800c18c <USBH_LL_Init>

  return USBH_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	e009      	b.n	800a78e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	33e0      	adds	r3, #224	; 0xe0
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	2200      	movs	r2, #0
 800a786:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b0e      	cmp	r3, #14
 800a792:	d9f2      	bls.n	800a77a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	e009      	b.n	800a7ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b4:	d3f1      	bcc.n	800a79a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2240      	movs	r2, #64	; 0x40
 800a7da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d016      	beq.n	800a852 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10e      	bne.n	800a84c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a834:	1c59      	adds	r1, r3, #1
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	33de      	adds	r3, #222	; 0xde
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	e004      	b.n	800a856 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a84c:	2302      	movs	r3, #2
 800a84e:	73fb      	strb	r3, [r7, #15]
 800a850:	e001      	b.n	800a856 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a852:	2302      	movs	r3, #2
 800a854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d204      	bcs.n	800a88a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	78fa      	ldrb	r2, [r7, #3]
 800a884:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a888:	e001      	b.n	800a88e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a88a:	2302      	movs	r3, #2
 800a88c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	70fb      	strb	r3, [r7, #3]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70bb      	strb	r3, [r7, #2]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a8c6:	e025      	b.n	800a914 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	221a      	movs	r2, #26
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	795b      	ldrb	r3, [r3, #5]
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d002      	beq.n	800a8ea <USBH_FindInterface+0x4e>
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	2bff      	cmp	r3, #255	; 0xff
 800a8e8:	d111      	bne.n	800a90e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8ee:	78ba      	ldrb	r2, [r7, #2]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d002      	beq.n	800a8fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8f4:	78bb      	ldrb	r3, [r7, #2]
 800a8f6:	2bff      	cmp	r3, #255	; 0xff
 800a8f8:	d109      	bne.n	800a90e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8fe:	787a      	ldrb	r2, [r7, #1]
 800a900:	429a      	cmp	r2, r3
 800a902:	d002      	beq.n	800a90a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a904:	787b      	ldrb	r3, [r7, #1]
 800a906:	2bff      	cmp	r3, #255	; 0xff
 800a908:	d101      	bne.n	800a90e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	e006      	b.n	800a91c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	3301      	adds	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d9d6      	bls.n	800a8c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a91a:	23ff      	movs	r3, #255	; 0xff
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 fc67 	bl	800c204 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a936:	2101      	movs	r1, #1
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 fd80 	bl	800c43e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af04      	add	r7, sp, #16
 800a94e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a950:	2302      	movs	r3, #2
 800a952:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b01      	cmp	r3, #1
 800a962:	d102      	bne.n	800a96a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2203      	movs	r2, #3
 800a968:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b0b      	cmp	r3, #11
 800a972:	f200 81b3 	bhi.w	800acdc <USBH_Process+0x394>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <USBH_Process+0x34>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9ad 	.word	0x0800a9ad
 800a980:	0800a9df 	.word	0x0800a9df
 800a984:	0800aa47 	.word	0x0800aa47
 800a988:	0800ac77 	.word	0x0800ac77
 800a98c:	0800acdd 	.word	0x0800acdd
 800a990:	0800aaeb 	.word	0x0800aaeb
 800a994:	0800ac1d 	.word	0x0800ac1d
 800a998:	0800ab21 	.word	0x0800ab21
 800a99c:	0800ab41 	.word	0x0800ab41
 800a9a0:	0800ab61 	.word	0x0800ab61
 800a9a4:	0800ab8f 	.word	0x0800ab8f
 800a9a8:	0800ac5f 	.word	0x0800ac5f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 8193 	beq.w	800ace0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a9c0:	20c8      	movs	r0, #200	; 0xc8
 800a9c2:	f001 fd83 	bl	800c4cc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 fc79 	bl	800c2be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a9dc:	e180      	b.n	800ace0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d107      	bne.n	800a9f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9f6:	e182      	b.n	800acfe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa02:	d914      	bls.n	800aa2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d903      	bls.n	800aa26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	220d      	movs	r2, #13
 800aa22:	701a      	strb	r2, [r3, #0]
      break;
 800aa24:	e16b      	b.n	800acfe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
      break;
 800aa2c:	e167      	b.n	800acfe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa34:	f103 020a 	add.w	r2, r3, #10
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800aa3e:	200a      	movs	r0, #10
 800aa40:	f001 fd44 	bl	800c4cc <USBH_Delay>
      break;
 800aa44:	e15b      	b.n	800acfe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa56:	2104      	movs	r1, #4
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aa5c:	2064      	movs	r0, #100	; 0x64
 800aa5e:	f001 fd35 	bl	800c4cc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 fc04 	bl	800c270 <USBH_LL_GetSpeed>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2205      	movs	r2, #5
 800aa76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aa78:	2100      	movs	r1, #0
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f001 f92f 	bl	800bcde <USBH_AllocPipe>
 800aa80:	4603      	mov	r3, r0
 800aa82:	461a      	mov	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aa88:	2180      	movs	r1, #128	; 0x80
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f927 	bl	800bcde <USBH_AllocPipe>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7919      	ldrb	r1, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aaac:	b292      	uxth	r2, r2
 800aaae:	9202      	str	r2, [sp, #8]
 800aab0:	2200      	movs	r2, #0
 800aab2:	9201      	str	r2, [sp, #4]
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	4603      	mov	r3, r0
 800aab8:	2280      	movs	r2, #128	; 0x80
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 f8e0 	bl	800bc80 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	7959      	ldrb	r1, [r3, #5]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aad4:	b292      	uxth	r2, r2
 800aad6:	9202      	str	r2, [sp, #8]
 800aad8:	2200      	movs	r2, #0
 800aada:	9201      	str	r2, [sp, #4]
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4603      	mov	r3, r0
 800aae0:	2200      	movs	r2, #0
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 f8cc 	bl	800bc80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aae8:	e109      	b.n	800acfe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f90c 	bl	800ad08 <USBH_HandleEnum>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f040 80f3 	bne.w	800ace4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d103      	bne.n	800ab18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2208      	movs	r2, #8
 800ab14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab16:	e0e5      	b.n	800ace4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2207      	movs	r2, #7
 800ab1c:	701a      	strb	r2, [r3, #0]
      break;
 800ab1e:	e0e1      	b.n	800ace4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 80de 	beq.w	800ace8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab32:	2101      	movs	r1, #1
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ab3e:	e0d3      	b.n	800ace8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fc20 	bl	800b390 <USBH_SetCfg>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 80ca 	bne.w	800acec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2209      	movs	r2, #9
 800ab5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab5e:	e0c5      	b.n	800acec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00b      	beq.n	800ab86 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ab6e:	2101      	movs	r1, #1
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fc30 	bl	800b3d6 <USBH_SetFeature>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 80b9 	bne.w	800acf0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	220a      	movs	r2, #10
 800ab82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab84:	e0b4      	b.n	800acf0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	220a      	movs	r2, #10
 800ab8a:	701a      	strb	r2, [r3, #0]
      break;
 800ab8c:	e0b0      	b.n	800acf0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80ad 	beq.w	800acf4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]
 800aba6:	e016      	b.n	800abd6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aba8:	7bfa      	ldrb	r2, [r7, #15]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	32de      	adds	r2, #222	; 0xde
 800abae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb2:	791a      	ldrb	r2, [r3, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800abba:	429a      	cmp	r2, r3
 800abbc:	d108      	bne.n	800abd0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800abbe:	7bfa      	ldrb	r2, [r7, #15]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	32de      	adds	r2, #222	; 0xde
 800abc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800abce:	e005      	b.n	800abdc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	3301      	adds	r3, #1
 800abd4:	73fb      	strb	r3, [r7, #15]
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0e5      	beq.n	800aba8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d016      	beq.n	800ac14 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	4798      	blx	r3
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2206      	movs	r2, #6
 800abfc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac04:	2103      	movs	r1, #3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac0a:	e073      	b.n	800acf4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	220d      	movs	r2, #13
 800ac10:	701a      	strb	r2, [r3, #0]
      break;
 800ac12:	e06f      	b.n	800acf4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	220d      	movs	r2, #13
 800ac18:	701a      	strb	r2, [r3, #0]
      break;
 800ac1a:	e06b      	b.n	800acf4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d017      	beq.n	800ac56 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
 800ac32:	4603      	mov	r3, r0
 800ac34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d103      	bne.n	800ac46 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	220b      	movs	r2, #11
 800ac42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac44:	e058      	b.n	800acf8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d154      	bne.n	800acf8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	220d      	movs	r2, #13
 800ac52:	701a      	strb	r2, [r3, #0]
      break;
 800ac54:	e050      	b.n	800acf8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	220d      	movs	r2, #13
 800ac5a:	701a      	strb	r2, [r3, #0]
      break;
 800ac5c:	e04c      	b.n	800acf8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d049      	beq.n	800acfc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
      }
      break;
 800ac74:	e042      	b.n	800acfc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fd72 	bl	800a768 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d009      	beq.n	800aca2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acb2:	2105      	movs	r1, #5
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d107      	bne.n	800acd4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fe2b 	bl	800a928 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800acd2:	e014      	b.n	800acfe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 fa95 	bl	800c204 <USBH_LL_Start>
      break;
 800acda:	e010      	b.n	800acfe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800acdc:	bf00      	nop
 800acde:	e00e      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800ace0:	bf00      	nop
 800ace2:	e00c      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800ace4:	bf00      	nop
 800ace6:	e00a      	b.n	800acfe <USBH_Process+0x3b6>
    break;
 800ace8:	bf00      	nop
 800acea:	e008      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800acec:	bf00      	nop
 800acee:	e006      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800acf0:	bf00      	nop
 800acf2:	e004      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800acf4:	bf00      	nop
 800acf6:	e002      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800acf8:	bf00      	nop
 800acfa:	e000      	b.n	800acfe <USBH_Process+0x3b6>
      break;
 800acfc:	bf00      	nop
  }
  return USBH_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af04      	add	r7, sp, #16
 800ad0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad10:	2301      	movs	r3, #1
 800ad12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ad14:	2301      	movs	r3, #1
 800ad16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	2b07      	cmp	r3, #7
 800ad1e:	f200 81c1 	bhi.w	800b0a4 <USBH_HandleEnum+0x39c>
 800ad22:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <USBH_HandleEnum+0x20>)
 800ad24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad28:	0800ad49 	.word	0x0800ad49
 800ad2c:	0800ae07 	.word	0x0800ae07
 800ad30:	0800ae71 	.word	0x0800ae71
 800ad34:	0800aeff 	.word	0x0800aeff
 800ad38:	0800af69 	.word	0x0800af69
 800ad3c:	0800afd9 	.word	0x0800afd9
 800ad40:	0800b01f 	.word	0x0800b01f
 800ad44:	0800b065 	.word	0x0800b065
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ad48:	2108      	movs	r1, #8
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa50 	bl	800b1f0 <USBH_Get_DevDesc>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d130      	bne.n	800adbc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7919      	ldrb	r1, [r3, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	9202      	str	r2, [sp, #8]
 800ad82:	2200      	movs	r2, #0
 800ad84:	9201      	str	r2, [sp, #4]
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2280      	movs	r2, #128	; 0x80
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 ff77 	bl	800bc80 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7959      	ldrb	r1, [r3, #5]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ada6:	b292      	uxth	r2, r2
 800ada8:	9202      	str	r2, [sp, #8]
 800adaa:	2200      	movs	r2, #0
 800adac:	9201      	str	r2, [sp, #4]
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	4603      	mov	r3, r0
 800adb2:	2200      	movs	r2, #0
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 ff63 	bl	800bc80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adba:	e175      	b.n	800b0a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	f040 8172 	bne.w	800b0a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adca:	3301      	adds	r3, #1
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adda:	2b03      	cmp	r3, #3
 800addc:	d903      	bls.n	800ade6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	220d      	movs	r2, #13
 800ade2:	701a      	strb	r2, [r3, #0]
      break;
 800ade4:	e160      	b.n	800b0a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	795b      	ldrb	r3, [r3, #5]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 ff97 	bl	800bd20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	791b      	ldrb	r3, [r3, #4]
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 ff91 	bl	800bd20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
      break;
 800ae04:	e150      	b.n	800b0a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ae06:	2112      	movs	r1, #18
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9f1 	bl	800b1f0 <USBH_Get_DevDesc>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae1e:	e145      	b.n	800b0ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	f040 8142 	bne.w	800b0ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae2e:	3301      	adds	r3, #1
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d903      	bls.n	800ae4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	220d      	movs	r2, #13
 800ae46:	701a      	strb	r2, [r3, #0]
      break;
 800ae48:	e130      	b.n	800b0ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	795b      	ldrb	r3, [r3, #5]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 ff65 	bl	800bd20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	791b      	ldrb	r3, [r3, #4]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 ff5f 	bl	800bd20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
      break;
 800ae6e:	e11d      	b.n	800b0ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ae70:	2101      	movs	r1, #1
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fa68 	bl	800b348 <USBH_SetAddress>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d132      	bne.n	800aee8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ae82:	2002      	movs	r0, #2
 800ae84:	f001 fb22 	bl	800c4cc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2203      	movs	r2, #3
 800ae94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7919      	ldrb	r1, [r3, #4]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aeaa:	b292      	uxth	r2, r2
 800aeac:	9202      	str	r2, [sp, #8]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	9201      	str	r2, [sp, #4]
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2280      	movs	r2, #128	; 0x80
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fee1 	bl	800bc80 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	7959      	ldrb	r1, [r3, #5]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aed2:	b292      	uxth	r2, r2
 800aed4:	9202      	str	r2, [sp, #8]
 800aed6:	2200      	movs	r2, #0
 800aed8:	9201      	str	r2, [sp, #4]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	4603      	mov	r3, r0
 800aede:	2200      	movs	r2, #0
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fecd 	bl	800bc80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aee6:	e0e3      	b.n	800b0b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	f040 80e0 	bne.w	800b0b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	220d      	movs	r2, #13
 800aef4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	705a      	strb	r2, [r3, #1]
      break;
 800aefc:	e0d8      	b.n	800b0b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aefe:	2109      	movs	r1, #9
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f99d 	bl	800b240 <USBH_Get_CfgDesc>
 800af06:	4603      	mov	r3, r0
 800af08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2204      	movs	r2, #4
 800af14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af16:	e0cd      	b.n	800b0b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	f040 80ca 	bne.w	800b0b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af26:	3301      	adds	r3, #1
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af36:	2b03      	cmp	r3, #3
 800af38:	d903      	bls.n	800af42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	220d      	movs	r2, #13
 800af3e:	701a      	strb	r2, [r3, #0]
      break;
 800af40:	e0b8      	b.n	800b0b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	795b      	ldrb	r3, [r3, #5]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fee9 	bl	800bd20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	791b      	ldrb	r3, [r3, #4]
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fee3 	bl	800bd20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
      break;
 800af66:	e0a5      	b.n	800b0b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800af6e:	4619      	mov	r1, r3
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f965 	bl	800b240 <USBH_Get_CfgDesc>
 800af76:	4603      	mov	r3, r0
 800af78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d103      	bne.n	800af88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2205      	movs	r2, #5
 800af84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af86:	e097      	b.n	800b0b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	f040 8094 	bne.w	800b0b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af96:	3301      	adds	r3, #1
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d903      	bls.n	800afb2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	220d      	movs	r2, #13
 800afae:	701a      	strb	r2, [r3, #0]
      break;
 800afb0:	e082      	b.n	800b0b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	795b      	ldrb	r3, [r3, #5]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 feb1 	bl	800bd20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	791b      	ldrb	r3, [r3, #4]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 feab 	bl	800bd20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	701a      	strb	r2, [r3, #0]
      break;
 800afd6:	e06f      	b.n	800b0b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d019      	beq.n	800b016 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800afee:	23ff      	movs	r3, #255	; 0xff
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 f949 	bl	800b288 <USBH_Get_StringDesc>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d103      	bne.n	800b008 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2206      	movs	r2, #6
 800b004:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b006:	e059      	b.n	800b0bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d156      	bne.n	800b0bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2206      	movs	r2, #6
 800b012:	705a      	strb	r2, [r3, #1]
      break;
 800b014:	e052      	b.n	800b0bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2206      	movs	r2, #6
 800b01a:	705a      	strb	r2, [r3, #1]
      break;
 800b01c:	e04e      	b.n	800b0bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b024:	2b00      	cmp	r3, #0
 800b026:	d019      	beq.n	800b05c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b034:	23ff      	movs	r3, #255	; 0xff
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f926 	bl	800b288 <USBH_Get_StringDesc>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b040:	7bbb      	ldrb	r3, [r7, #14]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d103      	bne.n	800b04e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2207      	movs	r2, #7
 800b04a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b04c:	e038      	b.n	800b0c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b03      	cmp	r3, #3
 800b052:	d135      	bne.n	800b0c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2207      	movs	r2, #7
 800b058:	705a      	strb	r2, [r3, #1]
      break;
 800b05a:	e031      	b.n	800b0c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2207      	movs	r2, #7
 800b060:	705a      	strb	r2, [r3, #1]
      break;
 800b062:	e02d      	b.n	800b0c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d017      	beq.n	800b09e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b07a:	23ff      	movs	r3, #255	; 0xff
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f903 	bl	800b288 <USBH_Get_StringDesc>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b090:	e018      	b.n	800b0c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	2b03      	cmp	r3, #3
 800b096:	d115      	bne.n	800b0c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
      break;
 800b09c:	e012      	b.n	800b0c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a2:	e00f      	b.n	800b0c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b0a4:	bf00      	nop
 800b0a6:	e00e      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0a8:	bf00      	nop
 800b0aa:	e00c      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e00a      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e008      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e006      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0b8:	bf00      	nop
 800b0ba:	e004      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0bc:	bf00      	nop
 800b0be:	e002      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0c0:	bf00      	nop
 800b0c2:	e000      	b.n	800b0c6 <USBH_HandleEnum+0x3be>
      break;
 800b0c4:	bf00      	nop
  }
  return Status;
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f804 	bl	800b112 <USBH_HandleSof>
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b0b      	cmp	r3, #11
 800b122:	d10a      	bne.n	800b13a <USBH_HandleSof+0x28>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
  }
}
 800b13a:	bf00      	nop
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b152:	bf00      	nop
}
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b16e:	bf00      	nop
}
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 f836 	bl	800c23a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	791b      	ldrb	r3, [r3, #4]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fda3 	bl	800bd20 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	795b      	ldrb	r3, [r3, #5]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fd9d 	bl	800bd20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	b29b      	uxth	r3, r3
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4613      	mov	r3, r2
 800b20a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f864 	bl	800b2de <USBH_GetDescriptor>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b22c:	78fa      	ldrb	r2, [r7, #3]
 800b22e:	b292      	uxth	r2, r2
 800b230:	4619      	mov	r1, r3
 800b232:	f000 f918 	bl	800b466 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af02      	add	r7, sp, #8
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	331c      	adds	r3, #28
 800b250:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b252:	887b      	ldrh	r3, [r7, #2]
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f83d 	bl	800b2de <USBH_GetDescriptor>
 800b264:	4603      	mov	r3, r0
 800b266:	72fb      	strb	r3, [r7, #11]
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d107      	bne.n	800b27e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b274:	887a      	ldrh	r2, [r7, #2]
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f964 	bl	800b546 <USBH_ParseCfgDesc>
  }

  return status;
 800b27e:	7afb      	ldrb	r3, [r7, #11]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	461a      	mov	r2, r3
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
 800b298:	4613      	mov	r3, r2
 800b29a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b2a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b2ac:	893b      	ldrh	r3, [r7, #8]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 f812 	bl	800b2de <USBH_GetDescriptor>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	75fb      	strb	r3, [r7, #23]
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d107      	bne.n	800b2d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ca:	893a      	ldrh	r2, [r7, #8]
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 fa37 	bl	800b742 <USBH_ParseStringDesc>
  }

  return status;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	72fb      	strb	r3, [r7, #11]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	789b      	ldrb	r3, [r3, #2]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d11c      	bne.n	800b332 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2206      	movs	r2, #6
 800b308:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	893a      	ldrh	r2, [r7, #8]
 800b30e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b310:	893b      	ldrh	r3, [r7, #8]
 800b312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b31a:	d104      	bne.n	800b326 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f240 4209 	movw	r2, #1033	; 0x409
 800b322:	829a      	strh	r2, [r3, #20]
 800b324:	e002      	b.n	800b32c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8b3a      	ldrh	r2, [r7, #24]
 800b330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b332:	8b3b      	ldrh	r3, [r7, #24]
 800b334:	461a      	mov	r2, r3
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 fa50 	bl	800b7de <USBH_CtlReq>
 800b33e:	4603      	mov	r3, r0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	789b      	ldrb	r3, [r3, #2]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d10f      	bne.n	800b37c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2205      	movs	r2, #5
 800b366:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b368:	78fb      	ldrb	r3, [r7, #3]
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fa2c 	bl	800b7de <USBH_CtlReq>
 800b386:	4603      	mov	r3, r0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	789b      	ldrb	r3, [r3, #2]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d10e      	bne.n	800b3c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2209      	movs	r2, #9
 800b3ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	887a      	ldrh	r2, [r7, #2]
 800b3b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fa09 	bl	800b7de <USBH_CtlReq>
 800b3cc:	4603      	mov	r3, r0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	789b      	ldrb	r3, [r3, #2]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d10f      	bne.n	800b40a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b3f6:	78fb      	ldrb	r3, [r7, #3]
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b40a:	2200      	movs	r2, #0
 800b40c:	2100      	movs	r1, #0
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f9e5 	bl	800b7de <USBH_CtlReq>
 800b414:	4603      	mov	r3, r0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	789b      	ldrb	r3, [r3, #2]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d10f      	bne.n	800b452 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2202      	movs	r2, #2
 800b436:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	b29a      	uxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b452:	2200      	movs	r2, #0
 800b454:	2100      	movs	r1, #0
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f9c1 	bl	800b7de <USBH_CtlReq>
 800b45c:	4603      	mov	r3, r0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	4613      	mov	r3, r2
 800b472:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	781a      	ldrb	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	785a      	ldrb	r2, [r3, #1]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	3302      	adds	r3, #2
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	3303      	adds	r3, #3
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b29b      	uxth	r3, r3
 800b494:	021b      	lsls	r3, r3, #8
 800b496:	b29b      	uxth	r3, r3
 800b498:	4313      	orrs	r3, r2
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	791a      	ldrb	r2, [r3, #4]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	795a      	ldrb	r2, [r3, #5]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	799a      	ldrb	r2, [r3, #6]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	79da      	ldrb	r2, [r3, #7]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	2b08      	cmp	r3, #8
 800b4c4:	d939      	bls.n	800b53a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	3309      	adds	r3, #9
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	330a      	adds	r3, #10
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	330b      	adds	r3, #11
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	021b      	lsls	r3, r3, #8
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	330c      	adds	r3, #12
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	b29a      	uxth	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	330d      	adds	r3, #13
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	021b      	lsls	r3, r3, #8
 800b510:	b29b      	uxth	r3, r3
 800b512:	4313      	orrs	r3, r2
 800b514:	b29a      	uxth	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	7b9a      	ldrb	r2, [r3, #14]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	7bda      	ldrb	r2, [r3, #15]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	7c1a      	ldrb	r2, [r3, #16]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	7c5a      	ldrb	r2, [r3, #17]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	745a      	strb	r2, [r3, #17]
  }
}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b08a      	sub	sp, #40	; 0x28
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	4613      	mov	r3, r2
 800b552:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b558:	2300      	movs	r3, #0
 800b55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	781a      	ldrb	r2, [r3, #0]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	785a      	ldrb	r2, [r3, #1]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	3302      	adds	r3, #2
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	3303      	adds	r3, #3
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	b29b      	uxth	r3, r3
 800b588:	021b      	lsls	r3, r3, #8
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4313      	orrs	r3, r2
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	791a      	ldrb	r2, [r3, #4]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	795a      	ldrb	r2, [r3, #5]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	799a      	ldrb	r2, [r3, #6]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	79da      	ldrb	r2, [r3, #7]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	7a1a      	ldrb	r2, [r3, #8]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5bc:	88fb      	ldrh	r3, [r7, #6]
 800b5be:	2b09      	cmp	r3, #9
 800b5c0:	d95f      	bls.n	800b682 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5c2:	2309      	movs	r3, #9
 800b5c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5ca:	e051      	b.n	800b670 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5cc:	f107 0316 	add.w	r3, r7, #22
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5d4:	f000 f8e8 	bl	800b7a8 <USBH_GetNextDesc>
 800b5d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	785b      	ldrb	r3, [r3, #1]
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	d146      	bne.n	800b670 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b5e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5e6:	221a      	movs	r2, #26
 800b5e8:	fb02 f303 	mul.w	r3, r2, r3
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	3302      	adds	r3, #2
 800b5f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b5f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5f8:	69f8      	ldr	r0, [r7, #28]
 800b5fa:	f000 f846 	bl	800b68a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b604:	2300      	movs	r3, #0
 800b606:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b608:	e022      	b.n	800b650 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b60a:	f107 0316 	add.w	r3, r7, #22
 800b60e:	4619      	mov	r1, r3
 800b610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b612:	f000 f8c9 	bl	800b7a8 <USBH_GetNextDesc>
 800b616:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	785b      	ldrb	r3, [r3, #1]
 800b61c:	2b05      	cmp	r3, #5
 800b61e:	d117      	bne.n	800b650 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b624:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b628:	3201      	adds	r2, #1
 800b62a:	00d2      	lsls	r2, r2, #3
 800b62c:	211a      	movs	r1, #26
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	3308      	adds	r3, #8
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	4413      	add	r3, r2
 800b63a:	3304      	adds	r3, #4
 800b63c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b63e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b640:	69b8      	ldr	r0, [r7, #24]
 800b642:	f000 f851 	bl	800b6e8 <USBH_ParseEPDesc>
            ep_ix++;
 800b646:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b64a:	3301      	adds	r3, #1
 800b64c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	791b      	ldrb	r3, [r3, #4]
 800b654:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b658:	429a      	cmp	r2, r3
 800b65a:	d204      	bcs.n	800b666 <USBH_ParseCfgDesc+0x120>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	885a      	ldrh	r2, [r3, #2]
 800b660:	8afb      	ldrh	r3, [r7, #22]
 800b662:	429a      	cmp	r2, r3
 800b664:	d8d1      	bhi.n	800b60a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b66a:	3301      	adds	r3, #1
 800b66c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b674:	2b01      	cmp	r3, #1
 800b676:	d804      	bhi.n	800b682 <USBH_ParseCfgDesc+0x13c>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	885a      	ldrh	r2, [r3, #2]
 800b67c:	8afb      	ldrh	r3, [r7, #22]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d8a4      	bhi.n	800b5cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b682:	bf00      	nop
 800b684:	3728      	adds	r7, #40	; 0x28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781a      	ldrb	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	785a      	ldrb	r2, [r3, #1]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	789a      	ldrb	r2, [r3, #2]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	78da      	ldrb	r2, [r3, #3]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	791a      	ldrb	r2, [r3, #4]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	795a      	ldrb	r2, [r3, #5]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	799a      	ldrb	r2, [r3, #6]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	79da      	ldrb	r2, [r3, #7]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	7a1a      	ldrb	r2, [r3, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	721a      	strb	r2, [r3, #8]
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	781a      	ldrb	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	785a      	ldrb	r2, [r3, #1]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	789a      	ldrb	r2, [r3, #2]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	78da      	ldrb	r2, [r3, #3]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	3304      	adds	r3, #4
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	b29a      	uxth	r2, r3
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	3305      	adds	r3, #5
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	b29b      	uxth	r3, r3
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	b29b      	uxth	r3, r3
 800b726:	4313      	orrs	r3, r2
 800b728:	b29a      	uxth	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	799a      	ldrb	r2, [r3, #6]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	719a      	strb	r2, [r3, #6]
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	4613      	mov	r3, r2
 800b74e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3301      	adds	r3, #1
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b03      	cmp	r3, #3
 800b758:	d120      	bne.n	800b79c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	1e9a      	subs	r2, r3, #2
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	4293      	cmp	r3, r2
 800b764:	bf28      	it	cs
 800b766:	4613      	movcs	r3, r2
 800b768:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3302      	adds	r3, #2
 800b76e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b770:	2300      	movs	r3, #0
 800b772:	82fb      	strh	r3, [r7, #22]
 800b774:	e00b      	b.n	800b78e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b776:	8afb      	ldrh	r3, [r7, #22]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	781a      	ldrb	r2, [r3, #0]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	3301      	adds	r3, #1
 800b786:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b788:	8afb      	ldrh	r3, [r7, #22]
 800b78a:	3302      	adds	r3, #2
 800b78c:	82fb      	strh	r3, [r7, #22]
 800b78e:	8afa      	ldrh	r2, [r7, #22]
 800b790:	8abb      	ldrh	r3, [r7, #20]
 800b792:	429a      	cmp	r2, r3
 800b794:	d3ef      	bcc.n	800b776 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
  }
}
 800b79c:	bf00      	nop
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	881a      	ldrh	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	4413      	add	r3, r2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	789b      	ldrb	r3, [r3, #2]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d002      	beq.n	800b7fe <USBH_CtlReq+0x20>
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d00f      	beq.n	800b81c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b7fc:	e027      	b.n	800b84e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	88fa      	ldrh	r2, [r7, #6]
 800b808:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2202      	movs	r2, #2
 800b814:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b816:	2301      	movs	r3, #1
 800b818:	75fb      	strb	r3, [r7, #23]
      break;
 800b81a:	e018      	b.n	800b84e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 f81b 	bl	800b858 <USBH_HandleControl>
 800b822:	4603      	mov	r3, r0
 800b824:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <USBH_CtlReq+0x54>
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d106      	bne.n	800b840 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	761a      	strb	r2, [r3, #24]
      break;
 800b83e:	e005      	b.n	800b84c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d102      	bne.n	800b84c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	709a      	strb	r2, [r3, #2]
      break;
 800b84c:	bf00      	nop
  }
  return status;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af02      	add	r7, sp, #8
 800b85e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b860:	2301      	movs	r3, #1
 800b862:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b864:	2300      	movs	r3, #0
 800b866:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7e1b      	ldrb	r3, [r3, #24]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	2b0a      	cmp	r3, #10
 800b870:	f200 8156 	bhi.w	800bb20 <USBH_HandleControl+0x2c8>
 800b874:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <USBH_HandleControl+0x24>)
 800b876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87a:	bf00      	nop
 800b87c:	0800b8a9 	.word	0x0800b8a9
 800b880:	0800b8c3 	.word	0x0800b8c3
 800b884:	0800b92d 	.word	0x0800b92d
 800b888:	0800b953 	.word	0x0800b953
 800b88c:	0800b98b 	.word	0x0800b98b
 800b890:	0800b9b5 	.word	0x0800b9b5
 800b894:	0800ba07 	.word	0x0800ba07
 800b898:	0800ba29 	.word	0x0800ba29
 800b89c:	0800ba65 	.word	0x0800ba65
 800b8a0:	0800ba8b 	.word	0x0800ba8b
 800b8a4:	0800bac9 	.word	0x0800bac9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f103 0110 	add.w	r1, r3, #16
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	795b      	ldrb	r3, [r3, #5]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f943 	bl	800bb40 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2202      	movs	r2, #2
 800b8be:	761a      	strb	r2, [r3, #24]
      break;
 800b8c0:	e139      	b.n	800bb36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	795b      	ldrb	r3, [r3, #5]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fda5 	bl	800c418 <USBH_LL_GetURBState>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d11e      	bne.n	800b916 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	7c1b      	ldrb	r3, [r3, #16]
 800b8dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	8adb      	ldrh	r3, [r3, #22]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00a      	beq.n	800b900 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b8ea:	7b7b      	ldrb	r3, [r7, #13]
 800b8ec:	2b80      	cmp	r3, #128	; 0x80
 800b8ee:	d103      	bne.n	800b8f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8f6:	e115      	b.n	800bb24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2205      	movs	r2, #5
 800b8fc:	761a      	strb	r2, [r3, #24]
      break;
 800b8fe:	e111      	b.n	800bb24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b900:	7b7b      	ldrb	r3, [r7, #13]
 800b902:	2b80      	cmp	r3, #128	; 0x80
 800b904:	d103      	bne.n	800b90e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2209      	movs	r2, #9
 800b90a:	761a      	strb	r2, [r3, #24]
      break;
 800b90c:	e10a      	b.n	800bb24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2207      	movs	r2, #7
 800b912:	761a      	strb	r2, [r3, #24]
      break;
 800b914:	e106      	b.n	800bb24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b916:	7bbb      	ldrb	r3, [r7, #14]
 800b918:	2b04      	cmp	r3, #4
 800b91a:	d003      	beq.n	800b924 <USBH_HandleControl+0xcc>
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	f040 8100 	bne.w	800bb24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	220b      	movs	r2, #11
 800b928:	761a      	strb	r2, [r3, #24]
      break;
 800b92a:	e0fb      	b.n	800bb24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b932:	b29a      	uxth	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6899      	ldr	r1, [r3, #8]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	899a      	ldrh	r2, [r3, #12]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	791b      	ldrb	r3, [r3, #4]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f93a 	bl	800bbbe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2204      	movs	r2, #4
 800b94e:	761a      	strb	r2, [r3, #24]
      break;
 800b950:	e0f1      	b.n	800bb36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	791b      	ldrb	r3, [r3, #4]
 800b956:	4619      	mov	r1, r3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fd5d 	bl	800c418 <USBH_LL_GetURBState>
 800b95e:	4603      	mov	r3, r0
 800b960:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d102      	bne.n	800b96e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2209      	movs	r2, #9
 800b96c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b05      	cmp	r3, #5
 800b972:	d102      	bne.n	800b97a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b974:	2303      	movs	r3, #3
 800b976:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b978:	e0d6      	b.n	800bb28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b04      	cmp	r3, #4
 800b97e:	f040 80d3 	bne.w	800bb28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	220b      	movs	r2, #11
 800b986:	761a      	strb	r2, [r3, #24]
      break;
 800b988:	e0ce      	b.n	800bb28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6899      	ldr	r1, [r3, #8]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	899a      	ldrh	r2, [r3, #12]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	795b      	ldrb	r3, [r3, #5]
 800b996:	2001      	movs	r0, #1
 800b998:	9000      	str	r0, [sp, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f8ea 	bl	800bb74 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2206      	movs	r2, #6
 800b9b0:	761a      	strb	r2, [r3, #24]
      break;
 800b9b2:	e0c0      	b.n	800bb36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	795b      	ldrb	r3, [r3, #5]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fd2c 	bl	800c418 <USBH_LL_GetURBState>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d103      	bne.n	800b9d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2207      	movs	r2, #7
 800b9ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9d0:	e0ac      	b.n	800bb2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b9d2:	7bbb      	ldrb	r3, [r7, #14]
 800b9d4:	2b05      	cmp	r3, #5
 800b9d6:	d105      	bne.n	800b9e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	220c      	movs	r2, #12
 800b9dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e2:	e0a3      	b.n	800bb2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d103      	bne.n	800b9f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	761a      	strb	r2, [r3, #24]
      break;
 800b9f0:	e09c      	b.n	800bb2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	f040 8099 	bne.w	800bb2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	220b      	movs	r2, #11
 800b9fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba00:	2302      	movs	r3, #2
 800ba02:	73fb      	strb	r3, [r7, #15]
      break;
 800ba04:	e092      	b.n	800bb2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	791b      	ldrb	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f8d5 	bl	800bbbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2208      	movs	r2, #8
 800ba24:	761a      	strb	r2, [r3, #24]

      break;
 800ba26:	e086      	b.n	800bb36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	791b      	ldrb	r3, [r3, #4]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fcf2 	bl	800c418 <USBH_LL_GetURBState>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d105      	bne.n	800ba4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	220d      	movs	r2, #13
 800ba42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba48:	e072      	b.n	800bb30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d103      	bne.n	800ba58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	220b      	movs	r2, #11
 800ba54:	761a      	strb	r2, [r3, #24]
      break;
 800ba56:	e06b      	b.n	800bb30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d168      	bne.n	800bb30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	73fb      	strb	r3, [r7, #15]
      break;
 800ba62:	e065      	b.n	800bb30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	795b      	ldrb	r3, [r3, #5]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	9200      	str	r2, [sp, #0]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2100      	movs	r1, #0
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f87f 	bl	800bb74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	220a      	movs	r2, #10
 800ba86:	761a      	strb	r2, [r3, #24]
      break;
 800ba88:	e055      	b.n	800bb36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	795b      	ldrb	r3, [r3, #5]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fcc1 	bl	800c418 <USBH_LL_GetURBState>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d105      	bne.n	800baac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	220d      	movs	r2, #13
 800baa8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800baaa:	e043      	b.n	800bb34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d103      	bne.n	800baba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2209      	movs	r2, #9
 800bab6:	761a      	strb	r2, [r3, #24]
      break;
 800bab8:	e03c      	b.n	800bb34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b04      	cmp	r3, #4
 800babe:	d139      	bne.n	800bb34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	220b      	movs	r2, #11
 800bac4:	761a      	strb	r2, [r3, #24]
      break;
 800bac6:	e035      	b.n	800bb34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7e5b      	ldrb	r3, [r3, #25]
 800bacc:	3301      	adds	r3, #1
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	765a      	strb	r2, [r3, #25]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7e5b      	ldrb	r3, [r3, #25]
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d806      	bhi.n	800baea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bae8:	e025      	b.n	800bb36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800baf0:	2106      	movs	r1, #6
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	795b      	ldrb	r3, [r3, #5]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f90c 	bl	800bd20 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	791b      	ldrb	r3, [r3, #4]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f906 	bl	800bd20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb1e:	e00a      	b.n	800bb36 <USBH_HandleControl+0x2de>

    default:
      break;
 800bb20:	bf00      	nop
 800bb22:	e008      	b.n	800bb36 <USBH_HandleControl+0x2de>
      break;
 800bb24:	bf00      	nop
 800bb26:	e006      	b.n	800bb36 <USBH_HandleControl+0x2de>
      break;
 800bb28:	bf00      	nop
 800bb2a:	e004      	b.n	800bb36 <USBH_HandleControl+0x2de>
      break;
 800bb2c:	bf00      	nop
 800bb2e:	e002      	b.n	800bb36 <USBH_HandleControl+0x2de>
      break;
 800bb30:	bf00      	nop
 800bb32:	e000      	b.n	800bb36 <USBH_HandleControl+0x2de>
      break;
 800bb34:	bf00      	nop
  }

  return status;
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af04      	add	r7, sp, #16
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb4e:	79f9      	ldrb	r1, [r7, #7]
 800bb50:	2300      	movs	r3, #0
 800bb52:	9303      	str	r3, [sp, #12]
 800bb54:	2308      	movs	r3, #8
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	2300      	movs	r3, #0
 800bb62:	2200      	movs	r2, #0
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 fc26 	bl	800c3b6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af04      	add	r7, sp, #16
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4611      	mov	r1, r2
 800bb80:	461a      	mov	r2, r3
 800bb82:	460b      	mov	r3, r1
 800bb84:	80fb      	strh	r3, [r7, #6]
 800bb86:	4613      	mov	r3, r2
 800bb88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb98:	7979      	ldrb	r1, [r7, #5]
 800bb9a:	7e3b      	ldrb	r3, [r7, #24]
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	88fb      	ldrh	r3, [r7, #6]
 800bba0:	9302      	str	r3, [sp, #8]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	2301      	movs	r3, #1
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2200      	movs	r2, #0
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f000 fc01 	bl	800c3b6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b088      	sub	sp, #32
 800bbc2:	af04      	add	r7, sp, #16
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	461a      	mov	r2, r3
 800bbcc:	460b      	mov	r3, r1
 800bbce:	80fb      	strh	r3, [r7, #6]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbd4:	7979      	ldrb	r1, [r7, #5]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	88fb      	ldrh	r3, [r7, #6]
 800bbdc:	9302      	str	r3, [sp, #8]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	2201      	movs	r2, #1
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 fbe3 	bl	800c3b6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bbf0:	2300      	movs	r3, #0

}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b088      	sub	sp, #32
 800bbfe:	af04      	add	r7, sp, #16
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	60b9      	str	r1, [r7, #8]
 800bc04:	4611      	mov	r1, r2
 800bc06:	461a      	mov	r2, r3
 800bc08:	460b      	mov	r3, r1
 800bc0a:	80fb      	strh	r3, [r7, #6]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc1e:	7979      	ldrb	r1, [r7, #5]
 800bc20:	7e3b      	ldrb	r3, [r7, #24]
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	9302      	str	r3, [sp, #8]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	2302      	movs	r3, #2
 800bc32:	2200      	movs	r2, #0
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 fbbe 	bl	800c3b6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af04      	add	r7, sp, #16
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	461a      	mov	r2, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	80fb      	strh	r3, [r7, #6]
 800bc56:	4613      	mov	r3, r2
 800bc58:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc5a:	7979      	ldrb	r1, [r7, #5]
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9303      	str	r3, [sp, #12]
 800bc60:	88fb      	ldrh	r3, [r7, #6]
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	9301      	str	r3, [sp, #4]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	2201      	movs	r2, #1
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fba0 	bl	800c3b6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af04      	add	r7, sp, #16
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4603      	mov	r3, r0
 800bc90:	70fb      	strb	r3, [r7, #3]
 800bc92:	460b      	mov	r3, r1
 800bc94:	70bb      	strb	r3, [r7, #2]
 800bc96:	4613      	mov	r3, r2
 800bc98:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bc9a:	7878      	ldrb	r0, [r7, #1]
 800bc9c:	78ba      	ldrb	r2, [r7, #2]
 800bc9e:	78f9      	ldrb	r1, [r7, #3]
 800bca0:	8b3b      	ldrh	r3, [r7, #24]
 800bca2:	9302      	str	r3, [sp, #8]
 800bca4:	7d3b      	ldrb	r3, [r7, #20]
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	7c3b      	ldrb	r3, [r7, #16]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	4603      	mov	r3, r0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fb33 	bl	800c31a <USBH_LL_OpenPipe>

  return USBH_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fb52 	bl	800c378 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b084      	sub	sp, #16
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f836 	bl	800bd5c <USBH_GetFreePipe>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d00a      	beq.n	800bd14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bcfe:	78fa      	ldrb	r2, [r7, #3]
 800bd00:	89fb      	ldrh	r3, [r7, #14]
 800bd02:	f003 030f 	and.w	r3, r3, #15
 800bd06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	33e0      	adds	r3, #224	; 0xe0
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd14:	89fb      	ldrh	r3, [r7, #14]
 800bd16:	b2db      	uxtb	r3, r3
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	2b0a      	cmp	r3, #10
 800bd30:	d80d      	bhi.n	800bd4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	33e0      	adds	r3, #224	; 0xe0
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	33e0      	adds	r3, #224	; 0xe0
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
 800bd6c:	e00f      	b.n	800bd8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	33e0      	adds	r3, #224	; 0xe0
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	e007      	b.n	800bd98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	73fb      	strb	r3, [r7, #15]
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b0a      	cmp	r3, #10
 800bd92:	d9ec      	bls.n	800bd6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bd94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a14      	ldr	r2, [pc, #80]	; (800be14 <USBH_CDC_ReceiveCallback+0x5c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d120      	bne.n	800be0a <USBH_CDC_ReceiveCallback+0x52>
  	{
  		// Handles the data recived from the USB CDC host, here just printing it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7fe fb3e 	bl	800a44a <USBH_CDC_GetLastReceivedDataSize>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4b11      	ldr	r3, [pc, #68]	; (800be18 <USBH_CDC_ReceiveCallback+0x60>)
 800bdd4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);
 800bdd6:	4b10      	ldr	r3, [pc, #64]	; (800be18 <USBH_CDC_ReceiveCallback+0x60>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	f04f 33ff 	mov.w	r3, #4294967295
 800bde0:	490e      	ldr	r1, [pc, #56]	; (800be1c <USBH_CDC_ReceiveCallback+0x64>)
 800bde2:	480f      	ldr	r0, [pc, #60]	; (800be20 <USBH_CDC_ReceiveCallback+0x68>)
 800bde4:	f7fb f938 	bl	8007058 <HAL_UART_Transmit>

		strcpy((char *)dongle_response, (char *)CDC_RX_Buffer);
 800bde8:	490c      	ldr	r1, [pc, #48]	; (800be1c <USBH_CDC_ReceiveCallback+0x64>)
 800bdea:	480e      	ldr	r0, [pc, #56]	; (800be24 <USBH_CDC_ReceiveCallback+0x6c>)
 800bdec:	f000 fcde 	bl	800c7ac <strcpy>
		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 800bdf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	4809      	ldr	r0, [pc, #36]	; (800be1c <USBH_CDC_ReceiveCallback+0x64>)
 800bdf8:	f000 fbf6 	bl	800c5e8 <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 800bdfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be00:	4906      	ldr	r1, [pc, #24]	; (800be1c <USBH_CDC_ReceiveCallback+0x64>)
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7fe fb6d 	bl	800a4e2 <USBH_CDC_Receive>
  	}

  	return;
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
}
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	240004dc 	.word	0x240004dc
 800be18:	24000280 	.word	0x24000280
 800be1c:	240008b4 	.word	0x240008b4
 800be20:	24000384 	.word	0x24000384
 800be24:	24000290 	.word	0x24000290

0800be28 <writeToDongle>:
/**
  * @brief Simple function that takes a string and transmit it to the dongle
  * @retval None
  */
void writeToDongle(uint8_t * cmd)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit(&hUsbHostFS, cmd, strlen((char *)cmd));
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7f4 fa55 	bl	80002e0 <strlen>
 800be36:	4603      	mov	r3, r0
 800be38:	461a      	mov	r2, r3
 800be3a:	6879      	ldr	r1, [r7, #4]
 800be3c:	4803      	ldr	r0, [pc, #12]	; (800be4c <writeToDongle+0x24>)
 800be3e:	f7fe fb22 	bl	800a486 <USBH_CDC_Transmit>
}
 800be42:	bf00      	nop
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	240004dc 	.word	0x240004dc

0800be50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800be54:	2201      	movs	r2, #1
 800be56:	490e      	ldr	r1, [pc, #56]	; (800be90 <MX_USB_HOST_Init+0x40>)
 800be58:	480e      	ldr	r0, [pc, #56]	; (800be94 <MX_USB_HOST_Init+0x44>)
 800be5a:	f7fe fc4b 	bl	800a6f4 <USBH_Init>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800be64:	f7f5 f83a 	bl	8000edc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800be68:	490b      	ldr	r1, [pc, #44]	; (800be98 <MX_USB_HOST_Init+0x48>)
 800be6a:	480a      	ldr	r0, [pc, #40]	; (800be94 <MX_USB_HOST_Init+0x44>)
 800be6c:	f7fe fcd0 	bl	800a810 <USBH_RegisterClass>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800be76:	f7f5 f831 	bl	8000edc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800be7a:	4806      	ldr	r0, [pc, #24]	; (800be94 <MX_USB_HOST_Init+0x44>)
 800be7c:	f7fe fd54 	bl	800a928 <USBH_Start>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800be86:	f7f5 f829 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800be8a:	bf00      	nop
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	0800beb1 	.word	0x0800beb1
 800be94:	240004dc 	.word	0x240004dc
 800be98:	24000010 	.word	0x24000010

0800be9c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bea0:	4802      	ldr	r0, [pc, #8]	; (800beac <MX_USB_HOST_Process+0x10>)
 800bea2:	f7fe fd51 	bl	800a948 <USBH_Process>
}
 800bea6:	bf00      	nop
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	240004dc 	.word	0x240004dc

0800beb0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d866      	bhi.n	800bf92 <USBH_UserProcess+0xe2>
 800bec4:	a201      	add	r2, pc, #4	; (adr r2, 800becc <USBH_UserProcess+0x1c>)
 800bec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beca:	bf00      	nop
 800becc:	0800bf93 	.word	0x0800bf93
 800bed0:	0800bf0f 	.word	0x0800bf0f
 800bed4:	0800bf93 	.word	0x0800bf93
 800bed8:	0800bf65 	.word	0x0800bf65
 800bedc:	0800bee1 	.word	0x0800bee1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bee0:	4b2f      	ldr	r3, [pc, #188]	; (800bfa0 <USBH_UserProcess+0xf0>)
 800bee2:	2203      	movs	r2, #3
 800bee4:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800bee6:	4b2f      	ldr	r3, [pc, #188]	; (800bfa4 <USBH_UserProcess+0xf4>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800beec:	2200      	movs	r2, #0
 800beee:	2101      	movs	r1, #1
 800bef0:	482d      	ldr	r0, [pc, #180]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bef2:	f7f6 ff9b 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800bef6:	2200      	movs	r2, #0
 800bef8:	2102      	movs	r1, #2
 800befa:	482c      	ldr	r0, [pc, #176]	; (800bfac <USBH_UserProcess+0xfc>)
 800befc:	f7f6 ff96 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800bf00:	2201      	movs	r2, #1
 800bf02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf06:	4828      	ldr	r0, [pc, #160]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bf08:	f7f6 ff90 	bl	8002e2c <HAL_GPIO_WritePin>
  break;
 800bf0c:	e044      	b.n	800bf98 <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf0e:	4b24      	ldr	r3, [pc, #144]	; (800bfa0 <USBH_UserProcess+0xf0>)
 800bf10:	2202      	movs	r2, #2
 800bf12:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  // (idProduct:0x6001 = bootloader, idProduct:0x6002 = bleuio fw)
  if(phost->device.DevDesc.idProduct == 0x6002)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 800bf1a:	f246 0202 	movw	r2, #24578	; 0x6002
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d139      	bne.n	800bf96 <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 800bf22:	4b20      	ldr	r3, [pc, #128]	; (800bfa4 <USBH_UserProcess+0xf4>)
 800bf24:	2201      	movs	r2, #1
 800bf26:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	2219      	movs	r2, #25
 800bf2e:	4920      	ldr	r1, [pc, #128]	; (800bfb0 <USBH_UserProcess+0x100>)
 800bf30:	4820      	ldr	r0, [pc, #128]	; (800bfb4 <USBH_UserProcess+0x104>)
 800bf32:	f7fb f891 	bl	8007058 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800bf36:	2201      	movs	r2, #1
 800bf38:	2101      	movs	r1, #1
 800bf3a:	481b      	ldr	r0, [pc, #108]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bf3c:	f7f6 ff76 	bl	8002e2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800bf40:	2200      	movs	r2, #0
 800bf42:	2102      	movs	r1, #2
 800bf44:	4819      	ldr	r0, [pc, #100]	; (800bfac <USBH_UserProcess+0xfc>)
 800bf46:	f7f6 ff71 	bl	8002e2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf50:	4815      	ldr	r0, [pc, #84]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bf52:	f7f6 ff6b 	bl	8002e2c <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 800bf56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf5a:	4917      	ldr	r1, [pc, #92]	; (800bfb8 <USBH_UserProcess+0x108>)
 800bf5c:	4817      	ldr	r0, [pc, #92]	; (800bfbc <USBH_UserProcess+0x10c>)
 800bf5e:	f7fe fac0 	bl	800a4e2 <USBH_CDC_Receive>
  }
  break;
 800bf62:	e018      	b.n	800bf96 <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf64:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <USBH_UserProcess+0xf0>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 800bf6a:	4b0e      	ldr	r3, [pc, #56]	; (800bfa4 <USBH_UserProcess+0xf4>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800bf70:	2200      	movs	r2, #0
 800bf72:	2101      	movs	r1, #1
 800bf74:	480c      	ldr	r0, [pc, #48]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bf76:	f7f6 ff59 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2102      	movs	r1, #2
 800bf7e:	480b      	ldr	r0, [pc, #44]	; (800bfac <USBH_UserProcess+0xfc>)
 800bf80:	f7f6 ff54 	bl	8002e2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800bf84:	2200      	movs	r2, #0
 800bf86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf8a:	4807      	ldr	r0, [pc, #28]	; (800bfa8 <USBH_UserProcess+0xf8>)
 800bf8c:	f7f6 ff4e 	bl	8002e2c <HAL_GPIO_WritePin>
  break;
 800bf90:	e002      	b.n	800bf98 <USBH_UserProcess+0xe8>

  default:
  break;
 800bf92:	bf00      	nop
 800bf94:	e000      	b.n	800bf98 <USBH_UserProcess+0xe8>
  break;
 800bf96:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf98:	bf00      	nop
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	24000284 	.word	0x24000284
 800bfa4:	24000418 	.word	0x24000418
 800bfa8:	58020400 	.word	0x58020400
 800bfac:	58021000 	.word	0x58021000
 800bfb0:	0800d020 	.word	0x0800d020
 800bfb4:	24000384 	.word	0x24000384
 800bfb8:	240008b4 	.word	0x240008b4
 800bfbc:	240004dc 	.word	0x240004dc

0800bfc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b0b8      	sub	sp, #224	; 0xe0
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	605a      	str	r2, [r3, #4]
 800bfd2:	609a      	str	r2, [r3, #8]
 800bfd4:	60da      	str	r2, [r3, #12]
 800bfd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bfd8:	f107 0310 	add.w	r3, r7, #16
 800bfdc:	22bc      	movs	r2, #188	; 0xbc
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 fb01 	bl	800c5e8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a3b      	ldr	r2, [pc, #236]	; (800c0d8 <HAL_HCD_MspInit+0x118>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d16e      	bne.n	800c0ce <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bff4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bff6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bffe:	f107 0310 	add.w	r3, r7, #16
 800c002:	4618      	mov	r0, r3
 800c004:	f7f9 fc76 	bl	80058f4 <HAL_RCCEx_PeriphCLKConfig>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 800c00e:	f7f4 ff65 	bl	8000edc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c012:	f7f8 fcc3 	bl	800499c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c016:	4b31      	ldr	r3, [pc, #196]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c01c:	4a2f      	ldr	r2, [pc, #188]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c026:	4b2d      	ldr	r3, [pc, #180]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800c034:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800c038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c03c:	2302      	movs	r3, #2
 800c03e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c042:	2300      	movs	r3, #0
 800c044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c048:	2300      	movs	r3, #0
 800c04a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800c04e:	230a      	movs	r3, #10
 800c050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c054:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c058:	4619      	mov	r1, r3
 800c05a:	4821      	ldr	r0, [pc, #132]	; (800c0e0 <HAL_HCD_MspInit+0x120>)
 800c05c:	f7f6 fd36 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c068:	2300      	movs	r3, #0
 800c06a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800c078:	4619      	mov	r1, r3
 800c07a:	4819      	ldr	r0, [pc, #100]	; (800c0e0 <HAL_HCD_MspInit+0x120>)
 800c07c:	f7f6 fd26 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c080:	4b16      	ldr	r3, [pc, #88]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c086:	4a15      	ldr	r2, [pc, #84]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c088:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c08c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c090:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <HAL_HCD_MspInit+0x11c>)
 800c092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c09a:	60bb      	str	r3, [r7, #8]
 800c09c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	2062      	movs	r0, #98	; 0x62
 800c0a4:	f7f5 fb65 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 800c0a8:	2062      	movs	r0, #98	; 0x62
 800c0aa:	f7f5 fb7c 	bl	80017a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	2063      	movs	r0, #99	; 0x63
 800c0b4:	f7f5 fb5d 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800c0b8:	2063      	movs	r0, #99	; 0x63
 800c0ba:	f7f5 fb74 	bl	80017a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	2065      	movs	r0, #101	; 0x65
 800c0c4:	f7f5 fb55 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0c8:	2065      	movs	r0, #101	; 0x65
 800c0ca:	f7f5 fb6c 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0ce:	bf00      	nop
 800c0d0:	37e0      	adds	r7, #224	; 0xe0
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40080000 	.word	0x40080000
 800c0dc:	58024400 	.word	0x58024400
 800c0e0:	58020000 	.word	0x58020000

0800c0e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fffb 	bl	800b0ee <USBH_LL_IncTimer>
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff f833 	bl	800b17a <USBH_LL_Connect>
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff f83c 	bl	800b1a8 <USBH_LL_Disconnect>
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
 800c144:	4613      	mov	r3, r2
 800c146:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe ffed 	bl	800b142 <USBH_LL_PortEnabled>
}
 800c168:	bf00      	nop
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe ffed 	bl	800b15e <USBH_LL_PortDisabled>
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d129      	bne.n	800c1f2 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c19e:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a14      	ldr	r2, [pc, #80]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <USBH_LL_Init+0x74>)
 800c1b2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 800c1b4:	4b11      	ldr	r3, [pc, #68]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1b6:	2210      	movs	r2, #16
 800c1b8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c1ba:	4b10      	ldr	r3, [pc, #64]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1c0:	4b0e      	ldr	r3, [pc, #56]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c1c6:	4b0d      	ldr	r3, [pc, #52]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c1d2:	480a      	ldr	r0, [pc, #40]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1d4:	f7f6 fe43 	bl	8002e5e <HAL_HCD_Init>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 800c1de:	f7f4 fe7d 	bl	8000edc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c1e2:	4806      	ldr	r0, [pc, #24]	; (800c1fc <USBH_LL_Init+0x70>)
 800c1e4:	f7f7 fa20 	bl	8003628 <HAL_HCD_GetCurrentFrame>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7fe ff6f 	bl	800b0d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	24000cb4 	.word	0x24000cb4
 800c200:	40080000 	.word	0x40080000

0800c204 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7f7 f98e 	bl	800353c <HAL_HCD_Start>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 f95c 	bl	800c4e4 <USBH_Get_USB_Status>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c230:	7bbb      	ldrb	r3, [r7, #14]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c250:	4618      	mov	r0, r3
 800c252:	f7f7 f996 	bl	8003582 <HAL_HCD_Stop>
 800c256:	4603      	mov	r3, r0
 800c258:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 f941 	bl	800c4e4 <USBH_Get_USB_Status>
 800c262:	4603      	mov	r3, r0
 800c264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c266:	7bbb      	ldrb	r3, [r7, #14]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c278:	2301      	movs	r3, #1
 800c27a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c282:	4618      	mov	r0, r3
 800c284:	f7f7 f9de 	bl	8003644 <HAL_HCD_GetCurrentSpeed>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d00c      	beq.n	800c2a8 <USBH_LL_GetSpeed+0x38>
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d80d      	bhi.n	800c2ae <USBH_LL_GetSpeed+0x3e>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <USBH_LL_GetSpeed+0x2c>
 800c296:	2b01      	cmp	r3, #1
 800c298:	d003      	beq.n	800c2a2 <USBH_LL_GetSpeed+0x32>
 800c29a:	e008      	b.n	800c2ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a0:	e008      	b.n	800c2b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a6:	e005      	b.n	800c2b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ac:	e002      	b.n	800c2b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b2:	bf00      	nop
  }
  return  speed;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7f7 f971 	bl	80035bc <HAL_HCD_ResetPort>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 f8ff 	bl	800c4e4 <USBH_Get_USB_Status>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7f7 f978 	bl	8003600 <HAL_HCD_HC_GetXferCount>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c31a:	b590      	push	{r4, r7, lr}
 800c31c:	b089      	sub	sp, #36	; 0x24
 800c31e:	af04      	add	r7, sp, #16
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	4608      	mov	r0, r1
 800c324:	4611      	mov	r1, r2
 800c326:	461a      	mov	r2, r3
 800c328:	4603      	mov	r3, r0
 800c32a:	70fb      	strb	r3, [r7, #3]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70bb      	strb	r3, [r7, #2]
 800c330:	4613      	mov	r3, r2
 800c332:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c342:	787c      	ldrb	r4, [r7, #1]
 800c344:	78ba      	ldrb	r2, [r7, #2]
 800c346:	78f9      	ldrb	r1, [r7, #3]
 800c348:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c34a:	9302      	str	r3, [sp, #8]
 800c34c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	4623      	mov	r3, r4
 800c35a:	f7f6 fde2 	bl	8002f22 <HAL_HCD_HC_Init>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f8bd 	bl	800c4e4 <USBH_Get_USB_Status>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	bd90      	pop	{r4, r7, pc}

0800c378 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	4611      	mov	r1, r2
 800c396:	4618      	mov	r0, r3
 800c398:	f7f6 fe52 	bl	8003040 <HAL_HCD_HC_Halt>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f89e 	bl	800c4e4 <USBH_Get_USB_Status>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c3b6:	b590      	push	{r4, r7, lr}
 800c3b8:	b089      	sub	sp, #36	; 0x24
 800c3ba:	af04      	add	r7, sp, #16
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	70fb      	strb	r3, [r7, #3]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70bb      	strb	r3, [r7, #2]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c3de:	787c      	ldrb	r4, [r7, #1]
 800c3e0:	78ba      	ldrb	r2, [r7, #2]
 800c3e2:	78f9      	ldrb	r1, [r7, #3]
 800c3e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3e8:	9303      	str	r3, [sp, #12]
 800c3ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3ec:	9302      	str	r3, [sp, #8]
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	9301      	str	r3, [sp, #4]
 800c3f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	f7f6 fe45 	bl	8003088 <HAL_HCD_HC_SubmitRequest>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 f86d 	bl	800c4e4 <USBH_Get_USB_Status>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	bd90      	pop	{r4, r7, pc}

0800c418 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c42a:	78fa      	ldrb	r2, [r7, #3]
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f7 f8d2 	bl	80035d8 <HAL_HCD_HC_GetURBState>
 800c434:	4603      	mov	r3, r0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	460b      	mov	r3, r1
 800c448:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c450:	2b01      	cmp	r3, #1
 800c452:	d103      	bne.n	800c45c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	4618      	mov	r0, r3
 800c458:	f000 f870 	bl	800c53c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c45c:	20c8      	movs	r0, #200	; 0xc8
 800c45e:	f7f5 f869 	bl	8001534 <HAL_Delay>
  return USBH_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	70fb      	strb	r3, [r7, #3]
 800c478:	4613      	mov	r3, r2
 800c47a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c482:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	212c      	movs	r1, #44	; 0x2c
 800c48a:	fb01 f303 	mul.w	r3, r1, r3
 800c48e:	4413      	add	r3, r2
 800c490:	333b      	adds	r3, #59	; 0x3b
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d009      	beq.n	800c4ac <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	212c      	movs	r1, #44	; 0x2c
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	3354      	adds	r3, #84	; 0x54
 800c4a6:	78ba      	ldrb	r2, [r7, #2]
 800c4a8:	701a      	strb	r2, [r3, #0]
 800c4aa:	e008      	b.n	800c4be <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c4ac:	78fb      	ldrb	r3, [r7, #3]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	212c      	movs	r1, #44	; 0x2c
 800c4b2:	fb01 f303 	mul.w	r3, r1, r3
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3355      	adds	r3, #85	; 0x55
 800c4ba:	78ba      	ldrb	r2, [r7, #2]
 800c4bc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7f5 f82d 	bl	8001534 <HAL_Delay>
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d817      	bhi.n	800c528 <USBH_Get_USB_Status+0x44>
 800c4f8:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <USBH_Get_USB_Status+0x1c>)
 800c4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4fe:	bf00      	nop
 800c500:	0800c511 	.word	0x0800c511
 800c504:	0800c517 	.word	0x0800c517
 800c508:	0800c51d 	.word	0x0800c51d
 800c50c:	0800c523 	.word	0x0800c523
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]
    break;
 800c514:	e00b      	b.n	800c52e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c516:	2302      	movs	r3, #2
 800c518:	73fb      	strb	r3, [r7, #15]
    break;
 800c51a:	e008      	b.n	800c52e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c51c:	2301      	movs	r3, #1
 800c51e:	73fb      	strb	r3, [r7, #15]
    break;
 800c520:	e005      	b.n	800c52e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c522:	2302      	movs	r3, #2
 800c524:	73fb      	strb	r3, [r7, #15]
    break;
 800c526:	e002      	b.n	800c52e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c528:	2302      	movs	r3, #2
 800c52a:	73fb      	strb	r3, [r7, #15]
    break;
 800c52c:	bf00      	nop
  }
  return usb_status;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c550:	2301      	movs	r3, #1
 800c552:	73fb      	strb	r3, [r7, #15]
 800c554:	e001      	b.n	800c55a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c556:	2300      	movs	r3, #0
 800c558:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	461a      	mov	r2, r3
 800c55e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c562:	4803      	ldr	r0, [pc, #12]	; (800c570 <MX_DriverVbusFS+0x34>)
 800c564:	f7f6 fc62 	bl	8002e2c <HAL_GPIO_WritePin>
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	58020c00 	.word	0x58020c00

0800c574 <__errno>:
 800c574:	4b01      	ldr	r3, [pc, #4]	; (800c57c <__errno+0x8>)
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	24000030 	.word	0x24000030

0800c580 <__libc_init_array>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	4d0d      	ldr	r5, [pc, #52]	; (800c5b8 <__libc_init_array+0x38>)
 800c584:	4c0d      	ldr	r4, [pc, #52]	; (800c5bc <__libc_init_array+0x3c>)
 800c586:	1b64      	subs	r4, r4, r5
 800c588:	10a4      	asrs	r4, r4, #2
 800c58a:	2600      	movs	r6, #0
 800c58c:	42a6      	cmp	r6, r4
 800c58e:	d109      	bne.n	800c5a4 <__libc_init_array+0x24>
 800c590:	4d0b      	ldr	r5, [pc, #44]	; (800c5c0 <__libc_init_array+0x40>)
 800c592:	4c0c      	ldr	r4, [pc, #48]	; (800c5c4 <__libc_init_array+0x44>)
 800c594:	f000 fc7e 	bl	800ce94 <_init>
 800c598:	1b64      	subs	r4, r4, r5
 800c59a:	10a4      	asrs	r4, r4, #2
 800c59c:	2600      	movs	r6, #0
 800c59e:	42a6      	cmp	r6, r4
 800c5a0:	d105      	bne.n	800c5ae <__libc_init_array+0x2e>
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
 800c5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a8:	4798      	blx	r3
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	e7ee      	b.n	800c58c <__libc_init_array+0xc>
 800c5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b2:	4798      	blx	r3
 800c5b4:	3601      	adds	r6, #1
 800c5b6:	e7f2      	b.n	800c59e <__libc_init_array+0x1e>
 800c5b8:	0800d0b0 	.word	0x0800d0b0
 800c5bc:	0800d0b0 	.word	0x0800d0b0
 800c5c0:	0800d0b0 	.word	0x0800d0b0
 800c5c4:	0800d0b4 	.word	0x0800d0b4

0800c5c8 <malloc>:
 800c5c8:	4b02      	ldr	r3, [pc, #8]	; (800c5d4 <malloc+0xc>)
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	6818      	ldr	r0, [r3, #0]
 800c5ce:	f000 b863 	b.w	800c698 <_malloc_r>
 800c5d2:	bf00      	nop
 800c5d4:	24000030 	.word	0x24000030

0800c5d8 <free>:
 800c5d8:	4b02      	ldr	r3, [pc, #8]	; (800c5e4 <free+0xc>)
 800c5da:	4601      	mov	r1, r0
 800c5dc:	6818      	ldr	r0, [r3, #0]
 800c5de:	f000 b80b 	b.w	800c5f8 <_free_r>
 800c5e2:	bf00      	nop
 800c5e4:	24000030 	.word	0x24000030

0800c5e8 <memset>:
 800c5e8:	4402      	add	r2, r0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d100      	bne.n	800c5f2 <memset+0xa>
 800c5f0:	4770      	bx	lr
 800c5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f6:	e7f9      	b.n	800c5ec <memset+0x4>

0800c5f8 <_free_r>:
 800c5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5fa:	2900      	cmp	r1, #0
 800c5fc:	d048      	beq.n	800c690 <_free_r+0x98>
 800c5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c602:	9001      	str	r0, [sp, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f1a1 0404 	sub.w	r4, r1, #4
 800c60a:	bfb8      	it	lt
 800c60c:	18e4      	addlt	r4, r4, r3
 800c60e:	f000 f8ed 	bl	800c7ec <__malloc_lock>
 800c612:	4a20      	ldr	r2, [pc, #128]	; (800c694 <_free_r+0x9c>)
 800c614:	9801      	ldr	r0, [sp, #4]
 800c616:	6813      	ldr	r3, [r2, #0]
 800c618:	4615      	mov	r5, r2
 800c61a:	b933      	cbnz	r3, 800c62a <_free_r+0x32>
 800c61c:	6063      	str	r3, [r4, #4]
 800c61e:	6014      	str	r4, [r2, #0]
 800c620:	b003      	add	sp, #12
 800c622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c626:	f000 b8e7 	b.w	800c7f8 <__malloc_unlock>
 800c62a:	42a3      	cmp	r3, r4
 800c62c:	d90b      	bls.n	800c646 <_free_r+0x4e>
 800c62e:	6821      	ldr	r1, [r4, #0]
 800c630:	1862      	adds	r2, r4, r1
 800c632:	4293      	cmp	r3, r2
 800c634:	bf04      	itt	eq
 800c636:	681a      	ldreq	r2, [r3, #0]
 800c638:	685b      	ldreq	r3, [r3, #4]
 800c63a:	6063      	str	r3, [r4, #4]
 800c63c:	bf04      	itt	eq
 800c63e:	1852      	addeq	r2, r2, r1
 800c640:	6022      	streq	r2, [r4, #0]
 800c642:	602c      	str	r4, [r5, #0]
 800c644:	e7ec      	b.n	800c620 <_free_r+0x28>
 800c646:	461a      	mov	r2, r3
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	b10b      	cbz	r3, 800c650 <_free_r+0x58>
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d9fa      	bls.n	800c646 <_free_r+0x4e>
 800c650:	6811      	ldr	r1, [r2, #0]
 800c652:	1855      	adds	r5, r2, r1
 800c654:	42a5      	cmp	r5, r4
 800c656:	d10b      	bne.n	800c670 <_free_r+0x78>
 800c658:	6824      	ldr	r4, [r4, #0]
 800c65a:	4421      	add	r1, r4
 800c65c:	1854      	adds	r4, r2, r1
 800c65e:	42a3      	cmp	r3, r4
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	d1dd      	bne.n	800c620 <_free_r+0x28>
 800c664:	681c      	ldr	r4, [r3, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	6053      	str	r3, [r2, #4]
 800c66a:	4421      	add	r1, r4
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	e7d7      	b.n	800c620 <_free_r+0x28>
 800c670:	d902      	bls.n	800c678 <_free_r+0x80>
 800c672:	230c      	movs	r3, #12
 800c674:	6003      	str	r3, [r0, #0]
 800c676:	e7d3      	b.n	800c620 <_free_r+0x28>
 800c678:	6825      	ldr	r5, [r4, #0]
 800c67a:	1961      	adds	r1, r4, r5
 800c67c:	428b      	cmp	r3, r1
 800c67e:	bf04      	itt	eq
 800c680:	6819      	ldreq	r1, [r3, #0]
 800c682:	685b      	ldreq	r3, [r3, #4]
 800c684:	6063      	str	r3, [r4, #4]
 800c686:	bf04      	itt	eq
 800c688:	1949      	addeq	r1, r1, r5
 800c68a:	6021      	streq	r1, [r4, #0]
 800c68c:	6054      	str	r4, [r2, #4]
 800c68e:	e7c7      	b.n	800c620 <_free_r+0x28>
 800c690:	b003      	add	sp, #12
 800c692:	bd30      	pop	{r4, r5, pc}
 800c694:	24000288 	.word	0x24000288

0800c698 <_malloc_r>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	1ccd      	adds	r5, r1, #3
 800c69c:	f025 0503 	bic.w	r5, r5, #3
 800c6a0:	3508      	adds	r5, #8
 800c6a2:	2d0c      	cmp	r5, #12
 800c6a4:	bf38      	it	cc
 800c6a6:	250c      	movcc	r5, #12
 800c6a8:	2d00      	cmp	r5, #0
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	db01      	blt.n	800c6b2 <_malloc_r+0x1a>
 800c6ae:	42a9      	cmp	r1, r5
 800c6b0:	d903      	bls.n	800c6ba <_malloc_r+0x22>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	6033      	str	r3, [r6, #0]
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ba:	f000 f897 	bl	800c7ec <__malloc_lock>
 800c6be:	4921      	ldr	r1, [pc, #132]	; (800c744 <_malloc_r+0xac>)
 800c6c0:	680a      	ldr	r2, [r1, #0]
 800c6c2:	4614      	mov	r4, r2
 800c6c4:	b99c      	cbnz	r4, 800c6ee <_malloc_r+0x56>
 800c6c6:	4f20      	ldr	r7, [pc, #128]	; (800c748 <_malloc_r+0xb0>)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	b923      	cbnz	r3, 800c6d6 <_malloc_r+0x3e>
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f000 f83c 	bl	800c74c <_sbrk_r>
 800c6d4:	6038      	str	r0, [r7, #0]
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f837 	bl	800c74c <_sbrk_r>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d123      	bne.n	800c72a <_malloc_r+0x92>
 800c6e2:	230c      	movs	r3, #12
 800c6e4:	6033      	str	r3, [r6, #0]
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f000 f886 	bl	800c7f8 <__malloc_unlock>
 800c6ec:	e7e3      	b.n	800c6b6 <_malloc_r+0x1e>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	1b5b      	subs	r3, r3, r5
 800c6f2:	d417      	bmi.n	800c724 <_malloc_r+0x8c>
 800c6f4:	2b0b      	cmp	r3, #11
 800c6f6:	d903      	bls.n	800c700 <_malloc_r+0x68>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	441c      	add	r4, r3
 800c6fc:	6025      	str	r5, [r4, #0]
 800c6fe:	e004      	b.n	800c70a <_malloc_r+0x72>
 800c700:	6863      	ldr	r3, [r4, #4]
 800c702:	42a2      	cmp	r2, r4
 800c704:	bf0c      	ite	eq
 800c706:	600b      	streq	r3, [r1, #0]
 800c708:	6053      	strne	r3, [r2, #4]
 800c70a:	4630      	mov	r0, r6
 800c70c:	f000 f874 	bl	800c7f8 <__malloc_unlock>
 800c710:	f104 000b 	add.w	r0, r4, #11
 800c714:	1d23      	adds	r3, r4, #4
 800c716:	f020 0007 	bic.w	r0, r0, #7
 800c71a:	1ac2      	subs	r2, r0, r3
 800c71c:	d0cc      	beq.n	800c6b8 <_malloc_r+0x20>
 800c71e:	1a1b      	subs	r3, r3, r0
 800c720:	50a3      	str	r3, [r4, r2]
 800c722:	e7c9      	b.n	800c6b8 <_malloc_r+0x20>
 800c724:	4622      	mov	r2, r4
 800c726:	6864      	ldr	r4, [r4, #4]
 800c728:	e7cc      	b.n	800c6c4 <_malloc_r+0x2c>
 800c72a:	1cc4      	adds	r4, r0, #3
 800c72c:	f024 0403 	bic.w	r4, r4, #3
 800c730:	42a0      	cmp	r0, r4
 800c732:	d0e3      	beq.n	800c6fc <_malloc_r+0x64>
 800c734:	1a21      	subs	r1, r4, r0
 800c736:	4630      	mov	r0, r6
 800c738:	f000 f808 	bl	800c74c <_sbrk_r>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d1dd      	bne.n	800c6fc <_malloc_r+0x64>
 800c740:	e7cf      	b.n	800c6e2 <_malloc_r+0x4a>
 800c742:	bf00      	nop
 800c744:	24000288 	.word	0x24000288
 800c748:	2400028c 	.word	0x2400028c

0800c74c <_sbrk_r>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	4d06      	ldr	r5, [pc, #24]	; (800c768 <_sbrk_r+0x1c>)
 800c750:	2300      	movs	r3, #0
 800c752:	4604      	mov	r4, r0
 800c754:	4608      	mov	r0, r1
 800c756:	602b      	str	r3, [r5, #0]
 800c758:	f7f4 fd6e 	bl	8001238 <_sbrk>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d102      	bne.n	800c766 <_sbrk_r+0x1a>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	b103      	cbz	r3, 800c766 <_sbrk_r+0x1a>
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	24000fb8 	.word	0x24000fb8

0800c76c <siprintf>:
 800c76c:	b40e      	push	{r1, r2, r3}
 800c76e:	b500      	push	{lr}
 800c770:	b09c      	sub	sp, #112	; 0x70
 800c772:	ab1d      	add	r3, sp, #116	; 0x74
 800c774:	9002      	str	r0, [sp, #8]
 800c776:	9006      	str	r0, [sp, #24]
 800c778:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c77c:	4809      	ldr	r0, [pc, #36]	; (800c7a4 <siprintf+0x38>)
 800c77e:	9107      	str	r1, [sp, #28]
 800c780:	9104      	str	r1, [sp, #16]
 800c782:	4909      	ldr	r1, [pc, #36]	; (800c7a8 <siprintf+0x3c>)
 800c784:	f853 2b04 	ldr.w	r2, [r3], #4
 800c788:	9105      	str	r1, [sp, #20]
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	9301      	str	r3, [sp, #4]
 800c78e:	a902      	add	r1, sp, #8
 800c790:	f000 f894 	bl	800c8bc <_svfiprintf_r>
 800c794:	9b02      	ldr	r3, [sp, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	b01c      	add	sp, #112	; 0x70
 800c79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a0:	b003      	add	sp, #12
 800c7a2:	4770      	bx	lr
 800c7a4:	24000030 	.word	0x24000030
 800c7a8:	ffff0208 	.word	0xffff0208

0800c7ac <strcpy>:
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7b2:	f803 2b01 	strb.w	r2, [r3], #1
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	d1f9      	bne.n	800c7ae <strcpy+0x2>
 800c7ba:	4770      	bx	lr

0800c7bc <strstr>:
 800c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7be:	780c      	ldrb	r4, [r1, #0]
 800c7c0:	b164      	cbz	r4, 800c7dc <strstr+0x20>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	781a      	ldrb	r2, [r3, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	1c5e      	adds	r6, r3, #1
 800c7ca:	b90a      	cbnz	r2, 800c7d0 <strstr+0x14>
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	e005      	b.n	800c7dc <strstr+0x20>
 800c7d0:	4294      	cmp	r4, r2
 800c7d2:	d108      	bne.n	800c7e6 <strstr+0x2a>
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800c7da:	b902      	cbnz	r2, 800c7de <strstr+0x22>
 800c7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7de:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800c7e2:	4297      	cmp	r7, r2
 800c7e4:	d0f7      	beq.n	800c7d6 <strstr+0x1a>
 800c7e6:	4633      	mov	r3, r6
 800c7e8:	e7ec      	b.n	800c7c4 <strstr+0x8>
	...

0800c7ec <__malloc_lock>:
 800c7ec:	4801      	ldr	r0, [pc, #4]	; (800c7f4 <__malloc_lock+0x8>)
 800c7ee:	f000 baf9 	b.w	800cde4 <__retarget_lock_acquire_recursive>
 800c7f2:	bf00      	nop
 800c7f4:	24000fc0 	.word	0x24000fc0

0800c7f8 <__malloc_unlock>:
 800c7f8:	4801      	ldr	r0, [pc, #4]	; (800c800 <__malloc_unlock+0x8>)
 800c7fa:	f000 baf4 	b.w	800cde6 <__retarget_lock_release_recursive>
 800c7fe:	bf00      	nop
 800c800:	24000fc0 	.word	0x24000fc0

0800c804 <__ssputs_r>:
 800c804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c808:	688e      	ldr	r6, [r1, #8]
 800c80a:	429e      	cmp	r6, r3
 800c80c:	4682      	mov	sl, r0
 800c80e:	460c      	mov	r4, r1
 800c810:	4690      	mov	r8, r2
 800c812:	461f      	mov	r7, r3
 800c814:	d838      	bhi.n	800c888 <__ssputs_r+0x84>
 800c816:	898a      	ldrh	r2, [r1, #12]
 800c818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c81c:	d032      	beq.n	800c884 <__ssputs_r+0x80>
 800c81e:	6825      	ldr	r5, [r4, #0]
 800c820:	6909      	ldr	r1, [r1, #16]
 800c822:	eba5 0901 	sub.w	r9, r5, r1
 800c826:	6965      	ldr	r5, [r4, #20]
 800c828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c82c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c830:	3301      	adds	r3, #1
 800c832:	444b      	add	r3, r9
 800c834:	106d      	asrs	r5, r5, #1
 800c836:	429d      	cmp	r5, r3
 800c838:	bf38      	it	cc
 800c83a:	461d      	movcc	r5, r3
 800c83c:	0553      	lsls	r3, r2, #21
 800c83e:	d531      	bpl.n	800c8a4 <__ssputs_r+0xa0>
 800c840:	4629      	mov	r1, r5
 800c842:	f7ff ff29 	bl	800c698 <_malloc_r>
 800c846:	4606      	mov	r6, r0
 800c848:	b950      	cbnz	r0, 800c860 <__ssputs_r+0x5c>
 800c84a:	230c      	movs	r3, #12
 800c84c:	f8ca 3000 	str.w	r3, [sl]
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c856:	81a3      	strh	r3, [r4, #12]
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c860:	6921      	ldr	r1, [r4, #16]
 800c862:	464a      	mov	r2, r9
 800c864:	f000 fac0 	bl	800cde8 <memcpy>
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	6126      	str	r6, [r4, #16]
 800c876:	6165      	str	r5, [r4, #20]
 800c878:	444e      	add	r6, r9
 800c87a:	eba5 0509 	sub.w	r5, r5, r9
 800c87e:	6026      	str	r6, [r4, #0]
 800c880:	60a5      	str	r5, [r4, #8]
 800c882:	463e      	mov	r6, r7
 800c884:	42be      	cmp	r6, r7
 800c886:	d900      	bls.n	800c88a <__ssputs_r+0x86>
 800c888:	463e      	mov	r6, r7
 800c88a:	4632      	mov	r2, r6
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	4641      	mov	r1, r8
 800c890:	f000 fab8 	bl	800ce04 <memmove>
 800c894:	68a3      	ldr	r3, [r4, #8]
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	1b9b      	subs	r3, r3, r6
 800c89a:	4432      	add	r2, r6
 800c89c:	60a3      	str	r3, [r4, #8]
 800c89e:	6022      	str	r2, [r4, #0]
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7db      	b.n	800c85c <__ssputs_r+0x58>
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	f000 fac7 	bl	800ce38 <_realloc_r>
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d1e1      	bne.n	800c874 <__ssputs_r+0x70>
 800c8b0:	6921      	ldr	r1, [r4, #16]
 800c8b2:	4650      	mov	r0, sl
 800c8b4:	f7ff fea0 	bl	800c5f8 <_free_r>
 800c8b8:	e7c7      	b.n	800c84a <__ssputs_r+0x46>
	...

0800c8bc <_svfiprintf_r>:
 800c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c0:	4698      	mov	r8, r3
 800c8c2:	898b      	ldrh	r3, [r1, #12]
 800c8c4:	061b      	lsls	r3, r3, #24
 800c8c6:	b09d      	sub	sp, #116	; 0x74
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	d50e      	bpl.n	800c8ee <_svfiprintf_r+0x32>
 800c8d0:	690b      	ldr	r3, [r1, #16]
 800c8d2:	b963      	cbnz	r3, 800c8ee <_svfiprintf_r+0x32>
 800c8d4:	2140      	movs	r1, #64	; 0x40
 800c8d6:	f7ff fedf 	bl	800c698 <_malloc_r>
 800c8da:	6028      	str	r0, [r5, #0]
 800c8dc:	6128      	str	r0, [r5, #16]
 800c8de:	b920      	cbnz	r0, 800c8ea <_svfiprintf_r+0x2e>
 800c8e0:	230c      	movs	r3, #12
 800c8e2:	603b      	str	r3, [r7, #0]
 800c8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e8:	e0d1      	b.n	800ca8e <_svfiprintf_r+0x1d2>
 800c8ea:	2340      	movs	r3, #64	; 0x40
 800c8ec:	616b      	str	r3, [r5, #20]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	2320      	movs	r3, #32
 800c8f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8fc:	2330      	movs	r3, #48	; 0x30
 800c8fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800caa8 <_svfiprintf_r+0x1ec>
 800c902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c906:	f04f 0901 	mov.w	r9, #1
 800c90a:	4623      	mov	r3, r4
 800c90c:	469a      	mov	sl, r3
 800c90e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c912:	b10a      	cbz	r2, 800c918 <_svfiprintf_r+0x5c>
 800c914:	2a25      	cmp	r2, #37	; 0x25
 800c916:	d1f9      	bne.n	800c90c <_svfiprintf_r+0x50>
 800c918:	ebba 0b04 	subs.w	fp, sl, r4
 800c91c:	d00b      	beq.n	800c936 <_svfiprintf_r+0x7a>
 800c91e:	465b      	mov	r3, fp
 800c920:	4622      	mov	r2, r4
 800c922:	4629      	mov	r1, r5
 800c924:	4638      	mov	r0, r7
 800c926:	f7ff ff6d 	bl	800c804 <__ssputs_r>
 800c92a:	3001      	adds	r0, #1
 800c92c:	f000 80aa 	beq.w	800ca84 <_svfiprintf_r+0x1c8>
 800c930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c932:	445a      	add	r2, fp
 800c934:	9209      	str	r2, [sp, #36]	; 0x24
 800c936:	f89a 3000 	ldrb.w	r3, [sl]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f000 80a2 	beq.w	800ca84 <_svfiprintf_r+0x1c8>
 800c940:	2300      	movs	r3, #0
 800c942:	f04f 32ff 	mov.w	r2, #4294967295
 800c946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c94a:	f10a 0a01 	add.w	sl, sl, #1
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	9307      	str	r3, [sp, #28]
 800c952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c956:	931a      	str	r3, [sp, #104]	; 0x68
 800c958:	4654      	mov	r4, sl
 800c95a:	2205      	movs	r2, #5
 800c95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c960:	4851      	ldr	r0, [pc, #324]	; (800caa8 <_svfiprintf_r+0x1ec>)
 800c962:	f7f3 fcc5 	bl	80002f0 <memchr>
 800c966:	9a04      	ldr	r2, [sp, #16]
 800c968:	b9d8      	cbnz	r0, 800c9a2 <_svfiprintf_r+0xe6>
 800c96a:	06d0      	lsls	r0, r2, #27
 800c96c:	bf44      	itt	mi
 800c96e:	2320      	movmi	r3, #32
 800c970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c974:	0711      	lsls	r1, r2, #28
 800c976:	bf44      	itt	mi
 800c978:	232b      	movmi	r3, #43	; 0x2b
 800c97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c97e:	f89a 3000 	ldrb.w	r3, [sl]
 800c982:	2b2a      	cmp	r3, #42	; 0x2a
 800c984:	d015      	beq.n	800c9b2 <_svfiprintf_r+0xf6>
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	4654      	mov	r4, sl
 800c98a:	2000      	movs	r0, #0
 800c98c:	f04f 0c0a 	mov.w	ip, #10
 800c990:	4621      	mov	r1, r4
 800c992:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c996:	3b30      	subs	r3, #48	; 0x30
 800c998:	2b09      	cmp	r3, #9
 800c99a:	d94e      	bls.n	800ca3a <_svfiprintf_r+0x17e>
 800c99c:	b1b0      	cbz	r0, 800c9cc <_svfiprintf_r+0x110>
 800c99e:	9207      	str	r2, [sp, #28]
 800c9a0:	e014      	b.n	800c9cc <_svfiprintf_r+0x110>
 800c9a2:	eba0 0308 	sub.w	r3, r0, r8
 800c9a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	46a2      	mov	sl, r4
 800c9b0:	e7d2      	b.n	800c958 <_svfiprintf_r+0x9c>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	1d19      	adds	r1, r3, #4
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	9103      	str	r1, [sp, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bfbb      	ittet	lt
 800c9be:	425b      	neglt	r3, r3
 800c9c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9c4:	9307      	strge	r3, [sp, #28]
 800c9c6:	9307      	strlt	r3, [sp, #28]
 800c9c8:	bfb8      	it	lt
 800c9ca:	9204      	strlt	r2, [sp, #16]
 800c9cc:	7823      	ldrb	r3, [r4, #0]
 800c9ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c9d0:	d10c      	bne.n	800c9ec <_svfiprintf_r+0x130>
 800c9d2:	7863      	ldrb	r3, [r4, #1]
 800c9d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9d6:	d135      	bne.n	800ca44 <_svfiprintf_r+0x188>
 800c9d8:	9b03      	ldr	r3, [sp, #12]
 800c9da:	1d1a      	adds	r2, r3, #4
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	9203      	str	r2, [sp, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	bfb8      	it	lt
 800c9e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9e8:	3402      	adds	r4, #2
 800c9ea:	9305      	str	r3, [sp, #20]
 800c9ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cab8 <_svfiprintf_r+0x1fc>
 800c9f0:	7821      	ldrb	r1, [r4, #0]
 800c9f2:	2203      	movs	r2, #3
 800c9f4:	4650      	mov	r0, sl
 800c9f6:	f7f3 fc7b 	bl	80002f0 <memchr>
 800c9fa:	b140      	cbz	r0, 800ca0e <_svfiprintf_r+0x152>
 800c9fc:	2340      	movs	r3, #64	; 0x40
 800c9fe:	eba0 000a 	sub.w	r0, r0, sl
 800ca02:	fa03 f000 	lsl.w	r0, r3, r0
 800ca06:	9b04      	ldr	r3, [sp, #16]
 800ca08:	4303      	orrs	r3, r0
 800ca0a:	3401      	adds	r4, #1
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca12:	4826      	ldr	r0, [pc, #152]	; (800caac <_svfiprintf_r+0x1f0>)
 800ca14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca18:	2206      	movs	r2, #6
 800ca1a:	f7f3 fc69 	bl	80002f0 <memchr>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d038      	beq.n	800ca94 <_svfiprintf_r+0x1d8>
 800ca22:	4b23      	ldr	r3, [pc, #140]	; (800cab0 <_svfiprintf_r+0x1f4>)
 800ca24:	bb1b      	cbnz	r3, 800ca6e <_svfiprintf_r+0x1b2>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	3307      	adds	r3, #7
 800ca2a:	f023 0307 	bic.w	r3, r3, #7
 800ca2e:	3308      	adds	r3, #8
 800ca30:	9303      	str	r3, [sp, #12]
 800ca32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca34:	4433      	add	r3, r6
 800ca36:	9309      	str	r3, [sp, #36]	; 0x24
 800ca38:	e767      	b.n	800c90a <_svfiprintf_r+0x4e>
 800ca3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca3e:	460c      	mov	r4, r1
 800ca40:	2001      	movs	r0, #1
 800ca42:	e7a5      	b.n	800c990 <_svfiprintf_r+0xd4>
 800ca44:	2300      	movs	r3, #0
 800ca46:	3401      	adds	r4, #1
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	f04f 0c0a 	mov.w	ip, #10
 800ca50:	4620      	mov	r0, r4
 800ca52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca56:	3a30      	subs	r2, #48	; 0x30
 800ca58:	2a09      	cmp	r2, #9
 800ca5a:	d903      	bls.n	800ca64 <_svfiprintf_r+0x1a8>
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0c5      	beq.n	800c9ec <_svfiprintf_r+0x130>
 800ca60:	9105      	str	r1, [sp, #20]
 800ca62:	e7c3      	b.n	800c9ec <_svfiprintf_r+0x130>
 800ca64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca68:	4604      	mov	r4, r0
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e7f0      	b.n	800ca50 <_svfiprintf_r+0x194>
 800ca6e:	ab03      	add	r3, sp, #12
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	462a      	mov	r2, r5
 800ca74:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <_svfiprintf_r+0x1f8>)
 800ca76:	a904      	add	r1, sp, #16
 800ca78:	4638      	mov	r0, r7
 800ca7a:	f3af 8000 	nop.w
 800ca7e:	1c42      	adds	r2, r0, #1
 800ca80:	4606      	mov	r6, r0
 800ca82:	d1d6      	bne.n	800ca32 <_svfiprintf_r+0x176>
 800ca84:	89ab      	ldrh	r3, [r5, #12]
 800ca86:	065b      	lsls	r3, r3, #25
 800ca88:	f53f af2c 	bmi.w	800c8e4 <_svfiprintf_r+0x28>
 800ca8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca8e:	b01d      	add	sp, #116	; 0x74
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca94:	ab03      	add	r3, sp, #12
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	462a      	mov	r2, r5
 800ca9a:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <_svfiprintf_r+0x1f8>)
 800ca9c:	a904      	add	r1, sp, #16
 800ca9e:	4638      	mov	r0, r7
 800caa0:	f000 f87a 	bl	800cb98 <_printf_i>
 800caa4:	e7eb      	b.n	800ca7e <_svfiprintf_r+0x1c2>
 800caa6:	bf00      	nop
 800caa8:	0800d074 	.word	0x0800d074
 800caac:	0800d07e 	.word	0x0800d07e
 800cab0:	00000000 	.word	0x00000000
 800cab4:	0800c805 	.word	0x0800c805
 800cab8:	0800d07a 	.word	0x0800d07a

0800cabc <_printf_common>:
 800cabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cac0:	4616      	mov	r6, r2
 800cac2:	4699      	mov	r9, r3
 800cac4:	688a      	ldr	r2, [r1, #8]
 800cac6:	690b      	ldr	r3, [r1, #16]
 800cac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cacc:	4293      	cmp	r3, r2
 800cace:	bfb8      	it	lt
 800cad0:	4613      	movlt	r3, r2
 800cad2:	6033      	str	r3, [r6, #0]
 800cad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cad8:	4607      	mov	r7, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	b10a      	cbz	r2, 800cae2 <_printf_common+0x26>
 800cade:	3301      	adds	r3, #1
 800cae0:	6033      	str	r3, [r6, #0]
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	0699      	lsls	r1, r3, #26
 800cae6:	bf42      	ittt	mi
 800cae8:	6833      	ldrmi	r3, [r6, #0]
 800caea:	3302      	addmi	r3, #2
 800caec:	6033      	strmi	r3, [r6, #0]
 800caee:	6825      	ldr	r5, [r4, #0]
 800caf0:	f015 0506 	ands.w	r5, r5, #6
 800caf4:	d106      	bne.n	800cb04 <_printf_common+0x48>
 800caf6:	f104 0a19 	add.w	sl, r4, #25
 800cafa:	68e3      	ldr	r3, [r4, #12]
 800cafc:	6832      	ldr	r2, [r6, #0]
 800cafe:	1a9b      	subs	r3, r3, r2
 800cb00:	42ab      	cmp	r3, r5
 800cb02:	dc26      	bgt.n	800cb52 <_printf_common+0x96>
 800cb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb08:	1e13      	subs	r3, r2, #0
 800cb0a:	6822      	ldr	r2, [r4, #0]
 800cb0c:	bf18      	it	ne
 800cb0e:	2301      	movne	r3, #1
 800cb10:	0692      	lsls	r2, r2, #26
 800cb12:	d42b      	bmi.n	800cb6c <_printf_common+0xb0>
 800cb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	47c0      	blx	r8
 800cb1e:	3001      	adds	r0, #1
 800cb20:	d01e      	beq.n	800cb60 <_printf_common+0xa4>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	68e5      	ldr	r5, [r4, #12]
 800cb26:	6832      	ldr	r2, [r6, #0]
 800cb28:	f003 0306 	and.w	r3, r3, #6
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	bf08      	it	eq
 800cb30:	1aad      	subeq	r5, r5, r2
 800cb32:	68a3      	ldr	r3, [r4, #8]
 800cb34:	6922      	ldr	r2, [r4, #16]
 800cb36:	bf0c      	ite	eq
 800cb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb3c:	2500      	movne	r5, #0
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	bfc4      	itt	gt
 800cb42:	1a9b      	subgt	r3, r3, r2
 800cb44:	18ed      	addgt	r5, r5, r3
 800cb46:	2600      	movs	r6, #0
 800cb48:	341a      	adds	r4, #26
 800cb4a:	42b5      	cmp	r5, r6
 800cb4c:	d11a      	bne.n	800cb84 <_printf_common+0xc8>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	e008      	b.n	800cb64 <_printf_common+0xa8>
 800cb52:	2301      	movs	r3, #1
 800cb54:	4652      	mov	r2, sl
 800cb56:	4649      	mov	r1, r9
 800cb58:	4638      	mov	r0, r7
 800cb5a:	47c0      	blx	r8
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d103      	bne.n	800cb68 <_printf_common+0xac>
 800cb60:	f04f 30ff 	mov.w	r0, #4294967295
 800cb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb68:	3501      	adds	r5, #1
 800cb6a:	e7c6      	b.n	800cafa <_printf_common+0x3e>
 800cb6c:	18e1      	adds	r1, r4, r3
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	2030      	movs	r0, #48	; 0x30
 800cb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb76:	4422      	add	r2, r4
 800cb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb80:	3302      	adds	r3, #2
 800cb82:	e7c7      	b.n	800cb14 <_printf_common+0x58>
 800cb84:	2301      	movs	r3, #1
 800cb86:	4622      	mov	r2, r4
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	47c0      	blx	r8
 800cb8e:	3001      	adds	r0, #1
 800cb90:	d0e6      	beq.n	800cb60 <_printf_common+0xa4>
 800cb92:	3601      	adds	r6, #1
 800cb94:	e7d9      	b.n	800cb4a <_printf_common+0x8e>
	...

0800cb98 <_printf_i>:
 800cb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb9c:	460c      	mov	r4, r1
 800cb9e:	4691      	mov	r9, r2
 800cba0:	7e27      	ldrb	r7, [r4, #24]
 800cba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cba4:	2f78      	cmp	r7, #120	; 0x78
 800cba6:	4680      	mov	r8, r0
 800cba8:	469a      	mov	sl, r3
 800cbaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbae:	d807      	bhi.n	800cbc0 <_printf_i+0x28>
 800cbb0:	2f62      	cmp	r7, #98	; 0x62
 800cbb2:	d80a      	bhi.n	800cbca <_printf_i+0x32>
 800cbb4:	2f00      	cmp	r7, #0
 800cbb6:	f000 80d8 	beq.w	800cd6a <_printf_i+0x1d2>
 800cbba:	2f58      	cmp	r7, #88	; 0x58
 800cbbc:	f000 80a3 	beq.w	800cd06 <_printf_i+0x16e>
 800cbc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cbc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbc8:	e03a      	b.n	800cc40 <_printf_i+0xa8>
 800cbca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbce:	2b15      	cmp	r3, #21
 800cbd0:	d8f6      	bhi.n	800cbc0 <_printf_i+0x28>
 800cbd2:	a001      	add	r0, pc, #4	; (adr r0, 800cbd8 <_printf_i+0x40>)
 800cbd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cbd8:	0800cc31 	.word	0x0800cc31
 800cbdc:	0800cc45 	.word	0x0800cc45
 800cbe0:	0800cbc1 	.word	0x0800cbc1
 800cbe4:	0800cbc1 	.word	0x0800cbc1
 800cbe8:	0800cbc1 	.word	0x0800cbc1
 800cbec:	0800cbc1 	.word	0x0800cbc1
 800cbf0:	0800cc45 	.word	0x0800cc45
 800cbf4:	0800cbc1 	.word	0x0800cbc1
 800cbf8:	0800cbc1 	.word	0x0800cbc1
 800cbfc:	0800cbc1 	.word	0x0800cbc1
 800cc00:	0800cbc1 	.word	0x0800cbc1
 800cc04:	0800cd51 	.word	0x0800cd51
 800cc08:	0800cc75 	.word	0x0800cc75
 800cc0c:	0800cd33 	.word	0x0800cd33
 800cc10:	0800cbc1 	.word	0x0800cbc1
 800cc14:	0800cbc1 	.word	0x0800cbc1
 800cc18:	0800cd73 	.word	0x0800cd73
 800cc1c:	0800cbc1 	.word	0x0800cbc1
 800cc20:	0800cc75 	.word	0x0800cc75
 800cc24:	0800cbc1 	.word	0x0800cbc1
 800cc28:	0800cbc1 	.word	0x0800cbc1
 800cc2c:	0800cd3b 	.word	0x0800cd3b
 800cc30:	680b      	ldr	r3, [r1, #0]
 800cc32:	1d1a      	adds	r2, r3, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	600a      	str	r2, [r1, #0]
 800cc38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc40:	2301      	movs	r3, #1
 800cc42:	e0a3      	b.n	800cd8c <_printf_i+0x1f4>
 800cc44:	6825      	ldr	r5, [r4, #0]
 800cc46:	6808      	ldr	r0, [r1, #0]
 800cc48:	062e      	lsls	r6, r5, #24
 800cc4a:	f100 0304 	add.w	r3, r0, #4
 800cc4e:	d50a      	bpl.n	800cc66 <_printf_i+0xce>
 800cc50:	6805      	ldr	r5, [r0, #0]
 800cc52:	600b      	str	r3, [r1, #0]
 800cc54:	2d00      	cmp	r5, #0
 800cc56:	da03      	bge.n	800cc60 <_printf_i+0xc8>
 800cc58:	232d      	movs	r3, #45	; 0x2d
 800cc5a:	426d      	negs	r5, r5
 800cc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc60:	485e      	ldr	r0, [pc, #376]	; (800cddc <_printf_i+0x244>)
 800cc62:	230a      	movs	r3, #10
 800cc64:	e019      	b.n	800cc9a <_printf_i+0x102>
 800cc66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cc6a:	6805      	ldr	r5, [r0, #0]
 800cc6c:	600b      	str	r3, [r1, #0]
 800cc6e:	bf18      	it	ne
 800cc70:	b22d      	sxthne	r5, r5
 800cc72:	e7ef      	b.n	800cc54 <_printf_i+0xbc>
 800cc74:	680b      	ldr	r3, [r1, #0]
 800cc76:	6825      	ldr	r5, [r4, #0]
 800cc78:	1d18      	adds	r0, r3, #4
 800cc7a:	6008      	str	r0, [r1, #0]
 800cc7c:	0628      	lsls	r0, r5, #24
 800cc7e:	d501      	bpl.n	800cc84 <_printf_i+0xec>
 800cc80:	681d      	ldr	r5, [r3, #0]
 800cc82:	e002      	b.n	800cc8a <_printf_i+0xf2>
 800cc84:	0669      	lsls	r1, r5, #25
 800cc86:	d5fb      	bpl.n	800cc80 <_printf_i+0xe8>
 800cc88:	881d      	ldrh	r5, [r3, #0]
 800cc8a:	4854      	ldr	r0, [pc, #336]	; (800cddc <_printf_i+0x244>)
 800cc8c:	2f6f      	cmp	r7, #111	; 0x6f
 800cc8e:	bf0c      	ite	eq
 800cc90:	2308      	moveq	r3, #8
 800cc92:	230a      	movne	r3, #10
 800cc94:	2100      	movs	r1, #0
 800cc96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc9a:	6866      	ldr	r6, [r4, #4]
 800cc9c:	60a6      	str	r6, [r4, #8]
 800cc9e:	2e00      	cmp	r6, #0
 800cca0:	bfa2      	ittt	ge
 800cca2:	6821      	ldrge	r1, [r4, #0]
 800cca4:	f021 0104 	bicge.w	r1, r1, #4
 800cca8:	6021      	strge	r1, [r4, #0]
 800ccaa:	b90d      	cbnz	r5, 800ccb0 <_printf_i+0x118>
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	d04d      	beq.n	800cd4c <_printf_i+0x1b4>
 800ccb0:	4616      	mov	r6, r2
 800ccb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccb6:	fb03 5711 	mls	r7, r3, r1, r5
 800ccba:	5dc7      	ldrb	r7, [r0, r7]
 800ccbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccc0:	462f      	mov	r7, r5
 800ccc2:	42bb      	cmp	r3, r7
 800ccc4:	460d      	mov	r5, r1
 800ccc6:	d9f4      	bls.n	800ccb2 <_printf_i+0x11a>
 800ccc8:	2b08      	cmp	r3, #8
 800ccca:	d10b      	bne.n	800cce4 <_printf_i+0x14c>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	07df      	lsls	r7, r3, #31
 800ccd0:	d508      	bpl.n	800cce4 <_printf_i+0x14c>
 800ccd2:	6923      	ldr	r3, [r4, #16]
 800ccd4:	6861      	ldr	r1, [r4, #4]
 800ccd6:	4299      	cmp	r1, r3
 800ccd8:	bfde      	ittt	le
 800ccda:	2330      	movle	r3, #48	; 0x30
 800ccdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cce4:	1b92      	subs	r2, r2, r6
 800cce6:	6122      	str	r2, [r4, #16]
 800cce8:	f8cd a000 	str.w	sl, [sp]
 800ccec:	464b      	mov	r3, r9
 800ccee:	aa03      	add	r2, sp, #12
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	f7ff fee2 	bl	800cabc <_printf_common>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d14c      	bne.n	800cd96 <_printf_i+0x1fe>
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	b004      	add	sp, #16
 800cd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd06:	4835      	ldr	r0, [pc, #212]	; (800cddc <_printf_i+0x244>)
 800cd08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	680e      	ldr	r6, [r1, #0]
 800cd10:	061f      	lsls	r7, r3, #24
 800cd12:	f856 5b04 	ldr.w	r5, [r6], #4
 800cd16:	600e      	str	r6, [r1, #0]
 800cd18:	d514      	bpl.n	800cd44 <_printf_i+0x1ac>
 800cd1a:	07d9      	lsls	r1, r3, #31
 800cd1c:	bf44      	itt	mi
 800cd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800cd22:	6023      	strmi	r3, [r4, #0]
 800cd24:	b91d      	cbnz	r5, 800cd2e <_printf_i+0x196>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	f023 0320 	bic.w	r3, r3, #32
 800cd2c:	6023      	str	r3, [r4, #0]
 800cd2e:	2310      	movs	r3, #16
 800cd30:	e7b0      	b.n	800cc94 <_printf_i+0xfc>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	f043 0320 	orr.w	r3, r3, #32
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	2378      	movs	r3, #120	; 0x78
 800cd3c:	4828      	ldr	r0, [pc, #160]	; (800cde0 <_printf_i+0x248>)
 800cd3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd42:	e7e3      	b.n	800cd0c <_printf_i+0x174>
 800cd44:	065e      	lsls	r6, r3, #25
 800cd46:	bf48      	it	mi
 800cd48:	b2ad      	uxthmi	r5, r5
 800cd4a:	e7e6      	b.n	800cd1a <_printf_i+0x182>
 800cd4c:	4616      	mov	r6, r2
 800cd4e:	e7bb      	b.n	800ccc8 <_printf_i+0x130>
 800cd50:	680b      	ldr	r3, [r1, #0]
 800cd52:	6826      	ldr	r6, [r4, #0]
 800cd54:	6960      	ldr	r0, [r4, #20]
 800cd56:	1d1d      	adds	r5, r3, #4
 800cd58:	600d      	str	r5, [r1, #0]
 800cd5a:	0635      	lsls	r5, r6, #24
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	d501      	bpl.n	800cd64 <_printf_i+0x1cc>
 800cd60:	6018      	str	r0, [r3, #0]
 800cd62:	e002      	b.n	800cd6a <_printf_i+0x1d2>
 800cd64:	0671      	lsls	r1, r6, #25
 800cd66:	d5fb      	bpl.n	800cd60 <_printf_i+0x1c8>
 800cd68:	8018      	strh	r0, [r3, #0]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	4616      	mov	r6, r2
 800cd70:	e7ba      	b.n	800cce8 <_printf_i+0x150>
 800cd72:	680b      	ldr	r3, [r1, #0]
 800cd74:	1d1a      	adds	r2, r3, #4
 800cd76:	600a      	str	r2, [r1, #0]
 800cd78:	681e      	ldr	r6, [r3, #0]
 800cd7a:	6862      	ldr	r2, [r4, #4]
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7f3 fab6 	bl	80002f0 <memchr>
 800cd84:	b108      	cbz	r0, 800cd8a <_printf_i+0x1f2>
 800cd86:	1b80      	subs	r0, r0, r6
 800cd88:	6060      	str	r0, [r4, #4]
 800cd8a:	6863      	ldr	r3, [r4, #4]
 800cd8c:	6123      	str	r3, [r4, #16]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd94:	e7a8      	b.n	800cce8 <_printf_i+0x150>
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	4632      	mov	r2, r6
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	47d0      	blx	sl
 800cda0:	3001      	adds	r0, #1
 800cda2:	d0ab      	beq.n	800ccfc <_printf_i+0x164>
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	079b      	lsls	r3, r3, #30
 800cda8:	d413      	bmi.n	800cdd2 <_printf_i+0x23a>
 800cdaa:	68e0      	ldr	r0, [r4, #12]
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	4298      	cmp	r0, r3
 800cdb0:	bfb8      	it	lt
 800cdb2:	4618      	movlt	r0, r3
 800cdb4:	e7a4      	b.n	800cd00 <_printf_i+0x168>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	4632      	mov	r2, r6
 800cdba:	4649      	mov	r1, r9
 800cdbc:	4640      	mov	r0, r8
 800cdbe:	47d0      	blx	sl
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	d09b      	beq.n	800ccfc <_printf_i+0x164>
 800cdc4:	3501      	adds	r5, #1
 800cdc6:	68e3      	ldr	r3, [r4, #12]
 800cdc8:	9903      	ldr	r1, [sp, #12]
 800cdca:	1a5b      	subs	r3, r3, r1
 800cdcc:	42ab      	cmp	r3, r5
 800cdce:	dcf2      	bgt.n	800cdb6 <_printf_i+0x21e>
 800cdd0:	e7eb      	b.n	800cdaa <_printf_i+0x212>
 800cdd2:	2500      	movs	r5, #0
 800cdd4:	f104 0619 	add.w	r6, r4, #25
 800cdd8:	e7f5      	b.n	800cdc6 <_printf_i+0x22e>
 800cdda:	bf00      	nop
 800cddc:	0800d085 	.word	0x0800d085
 800cde0:	0800d096 	.word	0x0800d096

0800cde4 <__retarget_lock_acquire_recursive>:
 800cde4:	4770      	bx	lr

0800cde6 <__retarget_lock_release_recursive>:
 800cde6:	4770      	bx	lr

0800cde8 <memcpy>:
 800cde8:	440a      	add	r2, r1
 800cdea:	4291      	cmp	r1, r2
 800cdec:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdf0:	d100      	bne.n	800cdf4 <memcpy+0xc>
 800cdf2:	4770      	bx	lr
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdfe:	4291      	cmp	r1, r2
 800ce00:	d1f9      	bne.n	800cdf6 <memcpy+0xe>
 800ce02:	bd10      	pop	{r4, pc}

0800ce04 <memmove>:
 800ce04:	4288      	cmp	r0, r1
 800ce06:	b510      	push	{r4, lr}
 800ce08:	eb01 0402 	add.w	r4, r1, r2
 800ce0c:	d902      	bls.n	800ce14 <memmove+0x10>
 800ce0e:	4284      	cmp	r4, r0
 800ce10:	4623      	mov	r3, r4
 800ce12:	d807      	bhi.n	800ce24 <memmove+0x20>
 800ce14:	1e43      	subs	r3, r0, #1
 800ce16:	42a1      	cmp	r1, r4
 800ce18:	d008      	beq.n	800ce2c <memmove+0x28>
 800ce1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce22:	e7f8      	b.n	800ce16 <memmove+0x12>
 800ce24:	4402      	add	r2, r0
 800ce26:	4601      	mov	r1, r0
 800ce28:	428a      	cmp	r2, r1
 800ce2a:	d100      	bne.n	800ce2e <memmove+0x2a>
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce36:	e7f7      	b.n	800ce28 <memmove+0x24>

0800ce38 <_realloc_r>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	460e      	mov	r6, r1
 800ce40:	b921      	cbnz	r1, 800ce4c <_realloc_r+0x14>
 800ce42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce46:	4611      	mov	r1, r2
 800ce48:	f7ff bc26 	b.w	800c698 <_malloc_r>
 800ce4c:	b922      	cbnz	r2, 800ce58 <_realloc_r+0x20>
 800ce4e:	f7ff fbd3 	bl	800c5f8 <_free_r>
 800ce52:	4625      	mov	r5, r4
 800ce54:	4628      	mov	r0, r5
 800ce56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce58:	f000 f814 	bl	800ce84 <_malloc_usable_size_r>
 800ce5c:	42a0      	cmp	r0, r4
 800ce5e:	d20f      	bcs.n	800ce80 <_realloc_r+0x48>
 800ce60:	4621      	mov	r1, r4
 800ce62:	4638      	mov	r0, r7
 800ce64:	f7ff fc18 	bl	800c698 <_malloc_r>
 800ce68:	4605      	mov	r5, r0
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d0f2      	beq.n	800ce54 <_realloc_r+0x1c>
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4622      	mov	r2, r4
 800ce72:	f7ff ffb9 	bl	800cde8 <memcpy>
 800ce76:	4631      	mov	r1, r6
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7ff fbbd 	bl	800c5f8 <_free_r>
 800ce7e:	e7e9      	b.n	800ce54 <_realloc_r+0x1c>
 800ce80:	4635      	mov	r5, r6
 800ce82:	e7e7      	b.n	800ce54 <_realloc_r+0x1c>

0800ce84 <_malloc_usable_size_r>:
 800ce84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce88:	1f18      	subs	r0, r3, #4
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bfbc      	itt	lt
 800ce8e:	580b      	ldrlt	r3, [r1, r0]
 800ce90:	18c0      	addlt	r0, r0, r3
 800ce92:	4770      	bx	lr

0800ce94 <_init>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	bf00      	nop
 800ce98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9a:	bc08      	pop	{r3}
 800ce9c:	469e      	mov	lr, r3
 800ce9e:	4770      	bx	lr

0800cea0 <_fini>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	bf00      	nop
 800cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea6:	bc08      	pop	{r3}
 800cea8:	469e      	mov	lr, r3
 800ceaa:	4770      	bx	lr
